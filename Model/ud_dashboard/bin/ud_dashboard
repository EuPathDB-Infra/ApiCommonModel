#!/usr/bin/env python

import sys
import datetime
import argparse
#sys.path.insert(0, "/Users/crisl-adm/Tools/vagrant-wij42/scratch/ud_dashboard/lib/python")
sys.path.insert(0, "/vagrant/scratch/ud_dashboard/lib/python")
from user_dataset_dashboard.dashboard import Dashboard


def main():
    """
    Entry into the dashboard program.  Currently, 3 reports are offered.  Help via -h or --help is available
    both at the command level and the sub-command (report) level.
    """
    dashboard = Dashboard()

    parser = argparse.ArgumentParser(description='User Dataset Dignostics')
    subparsers = parser.add_subparsers(help='diagnostic subcommand')

    parser_workspace_report = subparsers.add_parser('workspace_report', help='report on the iRODS workspace')
    parser_workspace_report.add_argument('-d', '--show_dataset_owners', action='store_true',
                                         help='indicate whether only datset owners should be shown - default is false.')
    parser_workspace_report.add_argument('-s', '--start_date', dest='start_date', default='2000-01-01', type=valid_date,
                                         help='optional start date (YYYY-MM-DD) for export/event listings.')
    parser_workspace_report.add_argument('-e', '--end_date', dest='end_date', default=up_to_now(), type=valid_date,
                                         help='optional end date (YYYY-MM-DD) for export/event listings.')
    parser_workspace_report.set_defaults(func=dashboard.workspace_report)

    parser_user_report = subparsers.add_parser('user_report',
                                               help='report on a user identified by his/her email address')
    parser_user_report.add_argument('user_email', help='email address user uses to log into wdk')
    parser_user_report.add_argument('--show_events', action='store_true',
                                    help='indicate whether events should be shown - default is false')
    parser_user_report.set_defaults(func=dashboard.user_report)

    parser_dataset_report = subparsers.add_parser('dataset_report',
                                                  help='report on a user dataset identified by its id')
    parser_dataset_report.add_argument('dataset_id', help='irods id for irods user dataset collection')
    parser_dataset_report.set_defaults(func=dashboard.dataset_report)

    args = parser.parse_args()
    args.func(args)


def up_to_now():
    """
    Today's date alone excludes today's events.
    :return: date
    """
    return (datetime.date.today()).strftime("%Y-%m-%d")


def valid_date(d):
    """
    Insures that any date provided is in the proper format.
    :param d: date to be checked
    """
    try:
        return datetime.datetime.strptime(d, "%Y-%m-%d")
    except ValueError:
        msg = "Not a valid date: '{0}'.".format(d)
        raise argparse.ArgumentTypeError(msg)


if __name__ == "__main__":
    sys.exit(main())
