#!/usr/bin/perl

use strict;

use lib "$ENV{GUS_HOME}/lib/perl";

use DBI;
use DBD::Oracle;

use Getopt::Long qw(GetOptions);

use ApiCommonShared::Model::tmUtils;

my ($help, $propfile, $instance, $schema, $suffix, $debug);

GetOptions("propfile=s" => \$propfile,
           "instance=s" => \$instance,
           "schema=s" => \$schema,
           "suffix=s" => \$suffix,
           "debug!" => \$debug,
           "help|h" => \$help,
          );

die "required parameter missing" unless ($propfile && $instance && $suffix);

my $dbh = ApiCommonShared::Model::tmUtils::getDbHandle($instance, $schema, $propfile);

&run();

sub run{

  if($help) {
    &usage();
  }

  my $failures = 0;

  my @fields;
  my $fieldsSql = "select replace(term, ' ', '_') as term from (
select distinct 'c_' || lower(term) as term from apidbtuning.samplecharmetadata
union
select distinct 'p_' || lower(term) as term from apidbtuning.sampleprotocolmetadata
) where length(term) <= 30";

  my $fieldsSh = $dbh->prepare($fieldsSql);
  $fieldsSh->execute();
  while(my ($field) = $fieldsSh->fetchrow_array()) {
    my $oldField = $field;
    $field =~ s/-/_/g;
    print STDERR "changed field from \"$oldField\" to \"$field\"\n"
      if $field ne $oldField;
    push @fields, $field;
  }
  $fieldsSh->finish();

  my @sortedFields = sort @fields;

  createEmptyTable($dbh,$suffix, \@sortedFields);

  my $fieldsString = join(",", @sortedFields);

  my $bindVarLength = scalar(@sortedFields) + 5;
  my @bindVars;
  foreach(1..$bindVarLength) {
    push @bindVars, "?";
  }
  my $bindVarsString = join(",", @bindVars);

  my $insertStatement = "INSERT INTO SampleAttributes$suffix(protocol_app_node_id, name, description, type_id, type, $fieldsString) VALUES ($bindVarsString)";
  my $insertRow = $dbh->prepare($insertStatement);


  my $metaDataSql = "
select pan.protocol_app_node_id, pan.name, pan.description, pan.type_id, ot.name as type, meta.value
from (
select protocol_app_node_id, listagg(value, ',') within group (order by value) as value
from (
select protocol_app_node_id, '\"c_' || replace(lower(term), ' ', '_') || '\"=>\"' || value || '\"' as value from apidbtuning.samplecharmetadata
union
select protocol_app_node_id, '\"p_' || replace(lower(term), ' ', '_') || '\"=>\"' || value || '\"' from apidbtuning.sampleprotocolmetadata
)
group by protocol_app_node_id
) meta, study.protocolappnode pan, sres.ontologyterm ot
where meta.protocol_app_node_id = pan.protocol_app_node_id
and pan.type_id = ot.ontology_term_id";

  my $metaSh = $dbh->prepare($metaDataSql);
  $metaSh->execute();
  while(my ($id, $name, $desc, $typeId, $type, $metadata) = $metaSh->fetchrow_array()) {

    my $hashString = "{ $metadata }";
    my $hashref = eval $hashString;

    if($@) {
      die "Error evaluating string: $@";
    }

    my @values = map { $hashref->{$_} } @sortedFields;

    $insertRow->execute($id, $name, $desc, $typeId, $type, @values);
  }
  $insertRow->finish();
    
  $dbh->commit();
  $dbh->disconnect();
}

sub createEmptyTable {
     my ($dbh, $suffix, $fields) = @_;

     my $fieldsString = join(",\n", map {"$_ varchar2(1200)"} @$fields);

    $dbh->do(<<SQL) or die "creating table";
     create table SampleAttributes$suffix (
       protocol_app_node_id number(10),
       name varchar2(200),
       description varchar2(1000),
       type_id number(10),
       type  varchar2(400),
       $fieldsString
  ) nologging
SQL
$dbh->{PrintError} = 0;
}

sub usage {
  my $e = shift;
  if($e) {
    print STDERR $e . "\n";
  }
  print STDERR "usage:  buildSampleAttributesTT -instance <instance> -propfile <file> -suffix <NNNN> [ -schema <login> ] [ -debug ] [ -help ] \n";
  exit;
}

1;
