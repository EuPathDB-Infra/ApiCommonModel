#!/usr/bin/perl

use strict;

use lib "$ENV{GUS_HOME}/lib/perl";

use DBI;
use DBD::Oracle;

use Getopt::Long qw(GetOptions);

use EbrcModelCommon::Model::tmUtils;

my ($help, $propfile, $instance, $schema, $suffix, $debug);

GetOptions("propfile=s" => \$propfile,
           "instance=s" => \$instance,
           "schema=s" => \$schema,
           "suffix=s" => \$suffix,
           "debug!" => \$debug,
           "help|h" => \$help,
          );

die "required parameter missing" unless ($propfile && $instance && $suffix);

my $dbh = EbrcModelCommon::Model::tmUtils::getDbHandle($instance, $schema, $propfile);

&run();

sub run{

  if($help) {
    &usage();
  }

  my $failures = 0;

  my @fields;
  my $fieldsSh = $dbh->prepare(<<SQL);
      -- turn terms into column names
      select distinct replace(replace(replace(replace(replace(replace(term, ' ', '_'), -- space -> underscore
                                             '/', ''), -- slash -> nothing
                                     '-', '_'),  -- hyphen -> underscore
                             '''', ''), -- apostrophe -> nothing
                         '(', ''), -- open paren -> nothing
                     ')', '') as term -- close paren -> nothing
      from (  select 'c_' || lower(term) as term
              from apidbTuning.SampleCharMetadata
            union
              select 'p_' || lower(term) as term
              from apidbTuning.SampleProtocolMetadata
           ) where length(term) <= 30
SQL

  $fieldsSh->execute();
  while(my ($field) = $fieldsSh->fetchrow_array()) {
    push @fields, $field;
  }
  $fieldsSh->finish();

  my @sortedFields = sort @fields;

  createEmptyTable($dbh,$suffix, \@sortedFields);

  my $fieldsString = join(",", @sortedFields);

  # prefix a comma if it isn't empty
  $fieldsString = ", " . $fieldsString
    if $fieldsString;

  my $bindVarLength = scalar(@sortedFields) + 5;
  my @bindVars;
  foreach(1..$bindVarLength) {
    push @bindVars, "?";
  }
  my $bindVarsString = join(",", @bindVars);

  my $insertStatement = "INSERT INTO SampleAttributes$suffix(protocol_app_node_id, name, description, type_id, type $fieldsString) VALUES ($bindVarsString)";
  my $insertRow = $dbh->prepare($insertStatement);


  my $metaDataSql = "
    select pan.protocol_app_node_id, pan.name, pan.description, pan.type_id, ot.name as type, meta.value
    from (select protocol_app_node_id,
--               listagg(value, ',') within group (order by value) as value
                 regexp_replace(regexp_replace(regexp_replace(rtrim(xmlagg(XMLELEMENT(e,text,',').EXTRACT('//text()') ORDER BY text).GetClobVal(),','),
                                                              '.quot;', '\"'),
                                               '.gt;', '>'),
                                '.apos;', '''') as value
          from (  select protocol_app_node_id, '\"c_' || replace(lower(term), ' ', '_') || '\"=> ''' || replace(value, '''', '\\''') || '''' as text
                  from apidbTuning.SampleCharMetadata
                union
                  select protocol_app_node_id, '\"p_' || replace(lower(term), ' ', '_') || '\"=> ''' || replace(value, '''', '\\''') || ''''
                  from apidbTuning.SampleProtocolMetadata
               )
          group by protocol_app_node_id
         ) meta,
         study.ProtocolAppNode pan, sres.OntologyTerm ot
    where meta.protocol_app_node_id = pan.protocol_app_node_id
      and pan.type_id = ot.ontology_term_id
";
  print STDERR "metaDataSql-->>\n$metaDataSql\n<<-- end of metaDataSql\n"
    if $debug;

  my $metaSh = $dbh->prepare($metaDataSql);
  $metaSh->execute();
  while(my ($id, $name, $desc, $typeId, $type, $metadata) = $metaSh->fetchrow_array()) {

    my $hashString = "{ $metadata }";
    print STDERR "hashString-->>\n$hashString\n<<-- end of hashString\n"
      if $debug;
    my $hashref = eval $hashString;

    if($@) {
      die "Error evaluating string: $@";
    }

    my @values = map { $hashref->{$_} } @sortedFields;

    $insertRow->execute($id, $name, $desc, $typeId, $type, @values);
  }
  $insertRow->finish();

  $dbh->commit();

  createIndexes($dbh, $suffix);

  $dbh->disconnect();
}

sub createEmptyTable {
     my ($dbh, $suffix, $fields) = @_;

     my $fieldsString = join(",\n", map {"$_ varchar2(2000)"} @$fields);
     # prefix a comma if it isn't empty
     $fieldsString = ", " . $fieldsString
       if $fieldsString;

    $dbh->do(<<SQL) or die "creating table";
     create table SampleAttributes$suffix (
       protocol_app_node_id number(10),
       name varchar2(200),
       description varchar2(3000),
       type_id number(10),
       type  varchar2(400)
       $fieldsString
  ) nologging
SQL
$dbh->{PrintError} = 0;
}

sub createIndexes {
     my ($dbh, $suffix) = @_;

    $dbh->do(<<SQL) or die "creating index";
      create index sampatt_panid_ix$suffix
      on SampleAttributes$suffix (protocol_app_node_id, name)
      tablespace indx
SQL

    $dbh->do(<<SQL) or die "creating index";
      create index sampatt_name_ix$suffix
      on SampleAttributes$suffix (name, protocol_app_node_id)
      tablespace indx
SQL

}

sub usage {
  my $e = shift;
  if($e) {
    print STDERR $e . "\n";
  }
  print STDERR "usage:  buildSampleAttributesTT -instance <instance> -propfile <file> -suffix <NNNN> [ -schema <login> ] [ -debug ] [ -help ] \n";
  exit;
}

1;
