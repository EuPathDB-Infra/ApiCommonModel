#!/usr/bin/perl

use strict;
use lib $ENV{GUS_HOME} . "/lib/perl";
use Data::Dumper;

use LWP::Simple;
use LWP::UserAgent;

use DBI;
use DBD::Oracle;
use WDK::Model::ModelConfig;

use JSON;
use URI::Escape;
use Tie::IxHash;

my ($organismAbbrev, $projectName, $buildNumber) = @ARGV;

#sub getDbh {$_[0]->{_dbh}}

my %websiteUrl = (AmoebaDB => 'https://amoebadb.org',
                CryptoDB => 'https://cryptodb.org',
                FungiDB => 'https://fungidb.org',
                GiardiaDB => 'https://giardiadb.org',
                MicrosporidiaDB => 'https://microsporidiadb.org',
                PiroplasmaDB => 'https://piroplasmadb.org',
                PlasmoDB => 'https://plasmodb.org',
                ToxoDB => 'https://toxodb.org',
                TrichDB => 'https://trichdb.org',
                TriTrypDB => 'https://tritrypdb.org',
                VectorBase => 'https://vectorbase.org');

  my @websites = $websiteUrl{$projectName};
print "DATABASE= $projectName AND WEBSITE= $websites[0] \n";
  my $sourceWebsite = $websites[0];
  my $websiteDir = $ENV{OLDPWD} . "/temporaryWebservices/";
  my $organisms = &getOrganismListAndPrintJson($sourceWebsite, $websiteDir);


    my $modelConfig = new WDK::Model::ModelConfig($projectName);
    my $dbh = DBI->connect( $modelConfig->getAppDbDbiDsn(),
                            $modelConfig->getAppDbLogin(),
                            $modelConfig->getAppDbPassword()
        )
        || die "unable to open db handle to ", $modelConfig->getAppDbDbiDsn();

	#my $metadataFile = $ENV{GUS_HOME} . "/lib/jbrowse/auto_generated/$organismAbbrev/jbrowse.conf";

  foreach my $organism (@{$organisms->{organisms}}) {

    	my $organismAbbrev = $organism->{ORGANISM_ABBREV};

	my $dir = $ENV{OLDPWD} . "/temporaryWebservices/$organismAbbrev";
	mkdir $dir unless(-d $dir);
	my $metadataFile = $ENV{OLDPWD} . "/temporaryWebservices/$organismAbbrev/jbrowse.conf";
	open(FILE, '>>', $metadataFile) or die "Cannot open file $metadataFile for reading: $!";


	my $result = {"jBrowseMetadata" => [] };	

	&addCentromereCount($dbh, $result, $organismAbbrev);
	&addScaffoldCount($dbh, $result, $organismAbbrev);
	&addUnifiedSnpCount($dbh, $result, $organismAbbrev); 
	&addChipChipTracks($dbh, $result, $organismAbbrev); 
	&addUnifiedMassSpecCount($dbh, $result, $organismAbbrev);
	&addTRNACount($dbh, $result);
	&addCnvArray($dbh, $result);

	print FILE $organismAbbrev."::centromereCount=".$result->{jBrowseMetadata}[0]{centromereCount}."\n";
	print FILE $organismAbbrev."::scaffoldCount=".$result->{jBrowseMetadata}[1]{scaffoldCount}."\n";
	print FILE $organismAbbrev."::unifiedSnpCount=".$result->{jBrowseMetadata}[2]{unifiedSnpCount}."\n";
	print FILE $organismAbbrev."::unifiedMassSpecCount=".$result->{jBrowseMetadata}[4]{unifiedMassSpecCount}."\n";
	print FILE $organismAbbrev."::tRNACount=".$result->{jBrowseMetadata}[5]{tRNACount}."\n\n";

	my $chipChipVarsArrayRef = $result->{jBrowseMetadata}[3]{chipChipVars};

		foreach my $key (@{$chipChipVarsArrayRef}) {
		    print FILE $organismAbbrev."::dataset=".$key->{dataset}."\n";
		    print FILE $organismAbbrev."::study=".$key->{study}."\n";
		    print FILE $organismAbbrev."::panName=".$key->{panName}."\n";
	    	    print FILE $organismAbbrev."::panId=".$key->{panId}."\n\n";
		}

	close FILE;

	}		


sub addCentromereCount {
  my ($dbh, $result, $organismAbbrev) = @_;
  my $sql = "select count(*) from apidbtuning.organismattributes where hasCentromere = 1 and  internal_abbrev = '${organismAbbrev}'";

  my $sh = $dbh->prepare($sql);
  $sh->execute();
  my $count = $sh->fetchrow_array();
  my $centromereCount = {centromereCount => $count};
  push @{$result->{jBrowseMetadata}}, $centromereCount;
  $sh->finish(); 
  return $result;
}


sub addScaffoldCount {
  my ($dbh, $result, $organismAbbrev) = @_;
  my $sql = "select count(*) from dots.scaffoldgapfeature sgf, apidbtuning.genomicseqattributes sa, apidb.organism o where sa.na_sequence_id = sgf.na_sequence_id and o.taxon_id = sa.taxon_id and o.abbrev = '${organismAbbrev}'";

  my $sh = $dbh->prepare($sql);
  $sh->execute();
  my $count = $sh->fetchrow_array();
  my $scaffoldCount = {scaffoldCount => $count};
  push @{$result->{jBrowseMetadata}}, $scaffoldCount;  
  $sh->finish();
  return $result;
}


sub addUnifiedSnpCount {
  my ($dbh, $result, $organismAbbrev) = @_;

  my $sql = "select count(*) from apidbtuning.datasetpresenter where name like '${organismAbbrev}%HTS_SNP_%'";

  my $sh = $dbh->prepare($sql);
  $sh->execute();
  my $snpCount = $sh->fetchrow_array();
  my $unifiedSnpCount = {unifiedSnpCount => $snpCount};
  push @{$result->{jBrowseMetadata}}, $unifiedSnpCount; 
  $sh->finish();
  return $result;
}


sub addUnifiedMassSpecCount {
  my ($dbh, $result, $organismAbbrev) = @_;

  my $sql = "select count(*) from apidbtuning.datasetpresenter where name like '${organismAbbrev}%massSpec%'";
  my $sh = $dbh->prepare($sql);
  $sh->execute();
  my $count = $sh->fetchrow_array();
  my $unifiedMassSpecCount = {unifiedMassSpecCount => $count};
  push @{$result->{jBrowseMetadata}}, $unifiedMassSpecCount;
  $sh->finish();
  return $result;
}


sub addTRNACount {
  my ($dbh, $result) = @_;

  my $sql = "select count(*) from dots.rnafeature rnaf, sres.ontologyterm ot
where ot.ontology_term_id = rnaf.sequence_ontology_id
and ot.name ='tRNA'";

  my $sh = $dbh->prepare($sql);
  $sh->execute();
  my $count = $sh->fetchrow_array();
  my $tRNACount = {tRNACount => $count};
  push @{$result->{jBrowseMetadata}},  $tRNACount;
  $sh->finish();
  return $result;
}


sub addCnvArray {
  my ($dbh, $result) = @_;

  my $sql = "select distinct pan.name
from study.protocolappnode pan
   , study.study s
   , study.studylink sl
where pan.PROTOCOL_APP_NODE_ID = sl.PROTOCOL_APP_NODE_ID
and sl.study_id = s.study_id
and s.name like 'tcruCLBrenerEsmeraldo-like_cghArrayExper_Tarelton_GSE23576_CNV_RSRC%'
order by pan.name";

  my $sh = $dbh->prepare($sql);
  $sh->execute();

  while(my ($panName) = $sh->fetchrow_array()){
        my $cnvArray = {cnvArray => $panName,
        }; 
  push @{$result->{jBrowseMetadata}}, $cnvArray;
  }
  $sh->finish();
  return $result;
}

#TODO: should use query apidb.organism table (test toxo inc)
sub addChipChipTracks {
  my ($dbh, $result, $organismAbbrev) = @_;
  
 my $sql = "select d.name, s.name, pan.name
from study.study s
   , SRES.EXTERNALDATABASERELEASE r
   , SRES.EXTERNALDATABASE d
   , study.protocolappnode pan
   , study.studylink sl
where d.name like '${organismAbbrev}%_chipChipExper_%'
and s.EXTERNAL_DATABASE_RELEASE_ID = r.EXTERNAL_DATABASE_RELEASE_ID
and r.EXTERNAL_DATABASE_ID = d.EXTERNAL_DATABASE_ID
and s.study_id = sl.study_id
and sl.protocol_app_node_id = pan.PROTOCOL_APP_NODE_ID
and s.investigation_id is null";
  
  my $sh = $dbh->prepare($sql);
  $sh->execute();
  my $chipChipVarsArray = {"chipChipVars" => [] };
  while(my ($dataset, $study, $panName, $panId) = $sh->fetchrow_array()){
      my $chipChipVars = {dataset => $dataset,
                          study => $study,
                          panName => $panName,
	};
  
  push @{$chipChipVarsArray->{chipChipVars}}, $chipChipVars;
  }
  push @{$result->{jBrowseMetadata}}, $chipChipVarsArray;
  $sh->finish();
  return $result;
}




sub getOrganismListAndPrintJson {
  my ($site, $websiteDir) = @_;

  my $orgUrl = "$site/a/service/jbrowse/organismList";
  my $organismsFile = "$websiteDir/organismList.json";

  my $organisms = &getData($orgUrl);

  open(ORGS, ">$organismsFile") or die "Cannot open file $organismsFile for writing: $!";
  print ORGS encode_json $organisms;
  close ORGS;

  return $organisms;
}


sub websiteNames {
  my ($site, $subdomain, $stripSubdomain) = @_;

  if($site =~ /(https?:\/\/)?(.+).org\/?/) {
    my $siteNoSub = "https://$2.org";

    my $sourceSite = $subdomain ? "https://$subdomain.$2.org" : $siteNoSub;
    my $siteForApolloConfig = $stripSubdomain ? $siteNoSub : $sourceSite;

    my $cleanSource = $subdomain ? "$subdomain.$2.org" : "$2.org";
    my $cleanSiteDir = $stripSubdomain ? "$2.org" : $cleanSource;

    print STDERR "Configs will be generated from:  $sourceSite\n";
    print STDERR "The website referenced in output configs will be:  $siteForApolloConfig\n";
    print STDERR "The directory name for this website is:  $cleanSiteDir\n";

    return ($sourceSite, $siteForApolloConfig, $cleanSiteDir);
  }

  die "Did not recognize veupathdb website: $site";
}



sub getData {
  my ($url) = @_;

my $agent = LWP::UserAgent->new;
$agent->timeout(3600);
my $json = $agent->get($url);
$json->is_success or die $json->status_line;
my $decodedJson = decode_json($json->content);
return $decodedJson;
}
