#!/usr/bin/perl

use strict;
use Data::Dumper;

usage() unless scalar(@ARGV) == 4;

my ($site1ServiceUrl, $idsFile1, $site2ServiceUrl, $idsFile2) = @ARGV;

my $result1 = perfTestRecordTables($site1ServiceUrl, $idsFile1);
print STDERR Dumper $result1;
my $result2 = perfTestRecordTables($site2ServiceUrl, $idsFile2);

foreach my $recordtype (sort keys %$result1) {
  my %t = %{$result1->{$recordtype}};
  foreach my $table (sort keys %t) {
    my %ig = %{$result1->{$recordtype}->{$table}};
    foreach my $id (sort keys %ig) {
      my $row1 = $result1->{$recordtype}->{$table}->{$id};
      my $row2 = $result2->{$recordtype}->{$table}->{$id};
      my @a = ($recordtype, $table, $id, $row1->[0], $row1->[1], $row2->[2], $row2->[0], $row2->[1], $row2->[2]);
      print STDOUT join("\t", @a) . "\n";
    }
  }
}

sub usage {
  die
"Compare performance of two websites, focusing on WDK Record Class Tables. IDs for each record class are supplied in the provided IDs yaml file.

For each site:
  - read the wdk meta info to discover all record types and their records
  - for those record types included in the IDs file, for each of its tables, use the provided IDs to run a request to the /record-types/XXXX/records endpoint, to pull data for this table

Usage: performanceTestRecordTablesUniDB site1_service_url site2_service_url ids_file

IDs file format is yaml:
gene:
  - sourceId: pf12345
    project: PlasmoDB
  - sourceId: pf4444
    projectId: PlasmoDB
snp:
  - id:

(where the record-type name comes from plasmodb.org/plasmo/service/record-types)

Output is tab delimited, with these columns:
 - record-type name
 - table name
 - ID
 - start time
 - end time
 - duration
";
}

use LWP::Simple;
use Data::Dumper;
use JSON qw( decode_json encode_json );
use YAML qw(LoadFile);
use Time::HiRes qw(time);

sub perfTestRecordTables {
  my ($siteServiceUrl, $idsFile) = @_;

  die "Can't open IDs file '$idsFile' for reading\n" unless -e $idsFile;

  my $idsMap = LoadFile($idsFile);
  my $resultMap;

  print STDERR "Reading from wdk /record-types endpoint\n";
  my $recordsString = get("https://$siteServiceUrl/record-types?format=expanded");
  my $recordClassesJson = decode_json($recordsString);

  foreach my $recordClass (@$recordClassesJson) {
    my $className = $recordClass->{urlSegment};
    if (!$idsMap->{$className}) {
      print STDERR "can't find IDs for record '$className'\n";
      next;
    }
    foreach my $table (@{$recordClass->{tables}}) {
      my $tableName = $table->{name};
      foreach my $id (@{$idsMap->{$className}}) {
	my ($prunedIdString, $start, $duration, $rowCount) = runTest($id, $className, $tableName, $siteServiceUrl);
	$resultMap->{$className}->{$tableName}->{$prunedIdString} = [$start, $duration, $rowCount];
      }
    }
  }
  return $resultMap;
}

sub runTest {
  my ($id, $className, $tableName, $serviceUrl) = @_;

  print STDERR "running test: $className $tableName\n";
  my $testResult = {};
  my $ua = LWP::UserAgent->new;

  my $wdkPk = convertPkToWdkFormat($id);
  my %prunedId = %$id;
  delete $prunedId{project_id};  # gets in the way of comparing with unidb
  $testResult->{id} = "" . join(", ", values(%prunedId));

  my $requestBody = {};
  $requestBody->{primaryKey} = $wdkPk;
  $requestBody->{tables} = [$tableName];
  $requestBody->{attributes} = [];

  my $url = "https://$serviceUrl/record-types/$className/records";
  my $req = HTTP::Request->new(POST => $url);
  $req->header('content-type' => 'application/json');
  $req->content(encode_json($requestBody));
  $testResult->{timestamp} = localtime;
  my $start = time;
  my $resp = $ua->request($req);
  my $end = time;
  $testResult->{duration} = sprintf("%.2f", $end - $start);
  die "HTTP POST error code: " . $resp->code . " " . $resp->message . "\n" unless $resp->is_success;
  my $message = $resp->decoded_content;
  my $f = decode_json($message);
  my $table = $f->{tables}->{$tableName};
  die "Table $tableName not returned in result\n" unless $table;
  die "Had table errors: " . $f->{tableErrors} if scalar(@{$f->{tableErrors}});
  $testResult->{rowCount} = scalar(@$table);
  return ($testResult->{id}, $testResult->{timestamp}, $testResult->{duration}, $testResult->{rowCount});
}

sub convertPkToWdkFormat {
  my ($id) = @_;
  my @wdkPk;
  foreach my $label (keys %$id) {
    my %part = (name=> $label, value => $id->{$label});
    push(@wdkPk, \%part);
  }
  return \@wdkPk;
}
