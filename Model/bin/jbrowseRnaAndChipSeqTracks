#!/usr/bin/perl

use strict;
use lib $ENV{GUS_HOME} . "/lib/perl";
use JSON;
use ApiCommonModel::Model::JBrowseUtil;
use ApiCommonModel::Model::JBrowseTrackConfig::RNASeqCoverageTrackConfig;
use ApiCommonModel::Model::JBrowseTrackConfig::MultiBigWigTrackConfig;
use Data::Dumper;
use URI::Escape;
use XML::Simple;
use List::Util qw(min max);
use Storable 'dclone';
use JSON qw(decode_json);

# TODO:  add 3 new args:  applicationType, legacyWebappBaseUrl, localhost
my ($organismAbbrev, $projectName, $buildNumber, $webservicesDir, $technologyType, $applicationType) = @ARGV;

my $fileName = "_" . $technologyType . "Cache.json";

# set applicationType, legacyWebappBaseUrl, localhost in the util class
my $jbrowseUtil = ApiCommonModel::Model::JBrowseUtil->new({projectName => $projectName, organismAbbrev => $organismAbbrev, fileName => $fileName});

my $buildProps = $jbrowseUtil->getBuildProperties();

# TODO:  Add this back when we are done
# # we're done if we can get from cache file
# if($jbrowseUtil->printFromCache()) {
#   exit 0;
# }
#open(CACHE, "> " . $jbrowseUtil->getCacheFile()) or die "Cannot open file " . $jbrowseUtil->getCacheFile() . " for writing: $!";
#my $dbh = $jbrowseUtil->getDbh();

my ($sql, $category, $covMaxScoreDefault, $multiCovScale, $subCategory);
if($technologyType eq 'ChIPSeq') {
  $category = 'Epigenomics';
  $covMaxScoreDefault = 200;
  $multiCovScale = "linear";
  $subCategory = "ChIP-Seq";
}
elsif($technologyType eq 'RNASeq') {
  $category = 'Transcriptomics';
  $covMaxScoreDefault = 1000;
  $multiCovScale = "log";
  $subCategory = "RNA-Seq";
}
else {
  die "technologyType must be either RNASeq or ChIPSeq";
}

my $result = {"tracks" => [] };

### Get organism properties
my $orgHash = ($buildProps->{'organism'});
my $nameForFileNames = ($orgHash->{organismNameForFiles});
my $projectName = ($orgHash->{projectName});

### Create rnaseq hash and extract datasetName
my $allDatasetPropertiesForAssayType = ($buildProps->{lc($technologyType)});

foreach my $datasetName (keys %$allDatasetPropertiesForAssayType){

  my %studyProperties = %{$allDatasetPropertiesForAssayType->{$datasetName}};

  # TODO:  Handle duplicate Horn CDS Dataset Better
  next if($datasetName eq 'tbruTREU927_RNAi_Horn_CDS_rnaSeq_RSRC');

  my $metadataBase = "metadata_unlogged";

  if(lc $studyProperties{isStrandSpecific} ne 'true' && lc $studyProperties{switchStrandsGBrowse} ne 'true') {
    $metadataBase = $metadataBase . "_alt";
  }

  my %refinedQueryParams = %{$jbrowseUtil->intronJunctionsQueryParams('refined')};
  $refinedQueryParams{intronSizeLimit} = $projectName eq 'HostDB' ? 20000 : 3000;

  # EXAMPLE:
  #/var/www/Common/apiSiteFilesMirror/webServices/PlasmoDB/build-42/Pfalciparum3D7/bigwig/pfal3D7_Caro_ribosome_profiling_rnaSeq_RSRC/metadata_unlogged

  my $bigWigRelativePath = "$projectName/build-$buildNumber/$nameForFileNames/bigwig/$datasetName";
  #print $bigWigRelativePath."\n";
  my $metadataFile = "$webservicesDir/$bigWigRelativePath/$metadataBase";



  if(! -e $metadataFile) {
    #TODO:  take out the print if everything looks ok
    print STDERR "SKIPPING dataset $datasetName.  File not found:  $metadataFile";
    next;
  }

  open(FILE, $metadataFile) or die "Cannot open file $metadataFile for reading: $!";

  my ($start, $file, $displayName, $strand, $alignment, $dbid, $sample);;
  
  my @multiUrls;

  while(<FILE>) {
    chomp;
    if(/^\[(.+)\]$/) {
      &addConfiguration($result, $file, $displayName, $strand, $alignment, \%studyProperties, $datasetName, $nameForFileNames, $bigWigRelativePath, \@multiUrls, $dbid, $sample) if($start);
      $file = $1;
      $start = 1;
    }
    if(/^display_name\s*=\s*(.+)$/) {
      $displayName = $1;
      $displayName =~ s/^\S+ - //; #remove everything to the first " - "
      $displayName =~ s/ \(\)//; # remove open/close parens
    }
    if(/^alignment\s*=\s*(.+)$/) {
      $alignment = $1;
    }
    if(/^strand\s*=\s*(.+)$/) {
      $strand = $1;
    }
    if(/^\:dbid\s*=\s*(.+)$/) {
      $dbid = $1;
    }
    if(/^sample\s*=\s*(.+)$/) {
      $sample = $1;
    }
    
  }
  &addConfiguration($result, $file, $displayName, $strand, $alignment, \%studyProperties, $datasetName, $nameForFileNames, $bigWigRelativePath, \@multiUrls, $dbid, $sample);

  # ChipSeq are all unique
  my @uniqueOnlyUrls = grep { $technologyType eq 'ChIPSeq' || $_->{alignment} eq 'unique' } @multiUrls;

  my $studyDisplayName = $studyProperties{datasetDisplayName};

  my $shortAttribution = $studyProperties{shortAttribution};
  my $summary = $studyProperties{summary};
  $summary =~ s/\n/ /g;

  my $color = 'black';
  my $multiBigWigObj = ApiCommonModel::Model::JBrowseTrackConfig::MultiBigWigTrackConfig->new({ dataset_name => $datasetName,
                                                                                                url_templates => \@multiUrls,
                                                                                                display_name => $displayName,
                                                                                                study_display_name => $studyDisplayName,
                                                                                                application_type => $applicationType,
                                                                                                file_name => $file,
                                                                                                color => $color,
                                                                                                cov_max_score_default => $covMaxScoreDefault,
                                                                                                scale => $multiCovScale,
                                                                                                category => $category,
                                                                                                summary => $summary,
                                                                                                key => $studyProperties{datasetDisplayName} . " Density - Unique And Non-Unique",
                                                                                                subcategory => $subCategory,
                                                                                                attribution => $shortAttribution
                                                                                              })->getConfigurationObject();



  my $uniqueMultiBigWigObj = ApiCommonModel::Model::JBrowseTrackConfig::MultiBigWigTrackConfig->new({ dataset_name => $datasetName,
                                                                                                      url_templates => \@uniqueOnlyUrls,
                                                                                                      display_name => $displayName,
                                                                                                      study_display_name => $studyDisplayName,
                                                                                                      application_type => $applicationType,
                                                                                                      file_name => $file,
                                                                                                      color => $color,
                                                                                                      cov_max_score_default => $covMaxScoreDefault,
                                                                                                      scale => $multiCovScale,
                                                                                                      category => $category,
                                                                                                      summary => $summary,
                                                                                                      key => $studyProperties{datasetDisplayName} . " Density - Unique Only",
                                                                                                      subcategory => $subCategory,
                                                                                                      attribution => $shortAttribution
                                                                                                    })->getConfigurationObject();


  # my $uniqueMultiBigWig = {storeClass => "MultiBigWig/Store/SeqFeature/MultiBigWig",
  #                          urlTemplates => \@uniqueOnlyUrls,
  #                          showTooltips => JSON::true,
  #                          yScalePosition => "left",
  #                          category => "$category",
  #                          key => $studyProperties{datasetDisplayName} . " Density - Unique Only",
  #                          label => $datasetName . " Density - Unique Only",
  #                          type => "MultiBigWig/View/Track/MultiWiggle/MultiDensity",
  #                          style => {
  #                            pos_color => "black",
  #                            neg_color => "white",
  #                            height => max(min(scalar(@uniqueOnlyUrls) * 5, 100), 20),
  #                          },
  #                                scale => $multiCovScale,
  #                                metadata => {
  #                                  subcategory => $subCategory,
  #                                  dataset => $studyDisplayName,
  #                                  trackType => 'Multi-Density',
  #                                  attribution => $shortAttribution,
  #                                  description => $summary,
  #                                  alignment => "unique",
  #                          },
  #                          fmtMetaValue_Dataset => "function() { return datasetLinkByDatasetName('${datasetName}', '${studyDisplayName}'); }",
  #                          fmtMetaValue_Description => "function() { return datasetDescription('${summary}', ''); }"
  # };

  my $multiBigWigXy = dclone $multiBigWigObj;
  #my $multiBigWigXy = dclone $multiBigWig;
  $multiBigWigXy->{key} = $studyProperties{datasetDisplayName} . " XYPlot - Unique And Non-Unique";
  $multiBigWigXy->{label} = $datasetName  . " XYPlot - Unique And Non-Unique";
  $multiBigWigXy->{metadata}->{trackType} = "Multi XY plot";
  $multiBigWigXy->{type} = "MultiBigWig/View/Track/MultiWiggle/MultiXYPlot";
  $multiBigWigXy->{autoscale} = "local";
  $multiBigWigXy->{style}->{height} = 40;

  my $uniqueMultiBigWigXy = dclone $uniqueMultiBigWigObj;
  #my $uniqueMultiBigWigXy = dclone $uniqueMultiBigWig;
  $uniqueMultiBigWigXy->{key} = $studyProperties{datasetDisplayName} . " XYPlot - Unique Only";
  $uniqueMultiBigWigXy->{label} = $datasetName  . " XYPlot - Unique Only";
  $uniqueMultiBigWigXy->{metadata}->{trackType} = "Multi XY plot";
  $uniqueMultiBigWigXy->{type} = "MultiBigWig/View/Track/MultiWiggle/MultiXYPlot";
  $uniqueMultiBigWigXy->{autoscale} = "local";
  $uniqueMultiBigWigXy->{style}->{height} = 40;

  #push @{$result->{tracks}}, $uniqueMultiBigWig;
  push @{$result->{tracks}}, $uniqueMultiBigWigObj; # ChipSeq are all unique

  if($technologyType eq 'RNASeq') {
    #push @{$result->{tracks}}, $multiBigWig;
    push @{$result->{tracks}}, $multiBigWigObj;
    push @{$result->{tracks}}, $multiBigWigXy;
    push @{$result->{tracks}}, $uniqueMultiBigWigXy;
  }

  # if(lc($studyProperties{showIntronJunctions}) eq 'true') {
  #   my $junctions = {storeClass => "JBrowse/Store/SeqFeature/REST",
  #                    baseUrl => "/a/service/jbrowse",
  #                    type => "EbrcTracks/View/Track/IntronJunction",
  #                    key => "$studyDisplayName Intron Junctions",
  #                    label => "$studyDisplayName Intron Junctions",
  #                    category => "$category",
  #                    maxFeatureScreenDensity => 0.01,
  #                    metadata => {
  #                      subcategory => $subCategory,
  #                      dataset => $studyDisplayName,
  #                      trackType => 'Predicted Intron Junctions',
  #                      attribution => $shortAttribution,
  #                      description => $summary,
  #                    },
  #                    fmtMetaValue_Dataset => "function() { return datasetLinkByDatasetName('${datasetName}', '${studyDisplayName}'); }",
  #                    fmtMetaValue_Description => "function() { return datasetDescription('${summary}', ''); }",
  #                    hooks => {
  #                      modify => "{gsnapUnifiedIntronJunctionHooksModify}",
  #                    },
  #                    style => {
  #                      className => "ibeam",
  #                      labelScale => 1000000000000000, #some really big number so labels are not shown; showLabels=false not working here or in hook TODO
  #                    },
  #                    query => \%refinedQueryParams,
  #                    onClick => {
  #                      content => "{gsnapUnifiedIntronJunctionTitleFxn}",
  #                    },
  #                    menuTemplate => [
  #                      {label => "View Details",
  #                       content => "{gsnapUnifiedIntronJunctionTitleFxn}",
  #                      },
  #                        ],
  #   };

  #   push @{$result->{tracks}}, $junctions;
  # }




  # TODO:  add this back
#   if(lc($studyProperties{hasCalledPeaks}) eq 'true') {
#     my $datasetSql = "select ed.name, s.name, pan.name, pan.protocol_app_node_id
# FROM study.study s
# , sres.externaldatabaserelease edr
# , sres.externaldatabase ed
# , study.protocolappnode pan
# , study.studylink sl
# WHERE ed.name = '$datasetName'
# AND s.external_database_release_id = edr.external_database_release_id
# AND edr.external_database_id = ed.external_database_id
# AND s.study_id = sl.study_id
# AND sl.protocol_app_node_id = pan.protocol_app_node_id
# AND s.investigation_id is null";

#     my $datasetSh = $dbh->prepare($datasetSql);
#     $datasetSh->execute();

#     while(my ($dataset, $study, $panName, $panId) = $datasetSh->fetchrow_array()) {

#       my $key = $panName;
#       my $subTrackAttr = $studyProperties{subTrackAttr};

#       my $chipSeqPeaks = {storeClass => "JBrowse/Store/SeqFeature/REST",
#                           baseUrl => "/a/service/jbrowse",
#                           type => "JBrowse/View/Track/CanvasFeatures",
#                           key => $key,
#                           label => $key,
#                           category => "$category",
#                           maxFeatureScreenDensity => 0.03,
#                           metadata => {
#                             subcategory => $subCategory,
#                             dataset => $studyDisplayName,
#                             trackType => 'Peak',
#                             attribution => $shortAttribution,
#                             description => $summary,
#                           },
#                           fmtMetaValue_Dataset => "function() { return datasetLinkByDatasetName('${datasetName}', '${studyDisplayName}'); }",
#                           fmtMetaValue_Description => "function() { return datasetDescription('${summary}', ''); }",
#                           style => {
#                             'color' => "{chipColorFxn}",
#                                 'height' => 8,
#                           },
#                           query => {'feature' => "ChIP:ChIPSeqPeaksjbrowse",
#                                         'exp' => $datasetName,
#                                         'sub' => $subTrackAttr,
#                                         'panId' => $panId,
#                           },
#                           onClick => {
#                             content => "{peakTitleChipSeqFxn}",
#                           },
#                           menuTemplate => [
#                             {label => "View Details",
#                              content => "{peakTitleChipSeqFxn}",
#                             },
#                               ],
#       };
#       push @{$result->{tracks}}, $chipSeqPeaks;
#     }
#     $datasetSh->finish();
#   }

}

print encode_json($result);
print CACHE encode_json($result);
close CACHE;

#$dbh->disconnect();

sub addConfiguration {
  my ($result, $file, $displayName, $strand, $alignment, $properties, $datasetName, $nameForFileNames, $bigWigRelativePath, $multiUrls, $dbid, $sample) = @_;

  $strand = 'not strand specific' unless($strand);

  my $studyDisplayName = $properties->{datasetDisplayName};
  my $shortAttribution = $properties->{shortAttribution};
  my $summary = $properties->{summary};
  $summary =~ s/\n/ /g;

  # old, direct file access; replaced by jbrowse service
  #my $bwUrl = "/a/jbrowse/eupath_data/webServices/$bigWigRelativePath/$file";
  #my $bwUrl = "/a/service/jbrowse/rnaseq/bigwig/$nameForFileNames/$datasetName/$file"; 
  my $bwUrl = "/a/service/jbrowse/store?data=" . uri_escape_utf8("$nameForFileNames/bigwig/$datasetName/$file"); 

  my $color = &color($strand, $alignment, $datasetName, $displayName);

  my $label = $dbid ? $dbid : ($sample ? $sample : $displayName);

  my $coverageObj = ApiCommonModel::Model::JBrowseTrackConfig::RNASeqCoverageTrackConfig->new({ dataset_name => $datasetName,
                                                                                                url_template => $bwUrl,
                                                                                                display_name => $displayName,
                                                                                                study_display_name => $studyDisplayName,
                                                                                                application_type => $applicationType,
                                                                                                file_name => $file,
                                                                                                color => $color,
                                                                                                label => $label,
                                                                                                cov_max_score_default => $covMaxScoreDefault,
                                                                                                scale => $multiCovScale,
                                                                                                strand =>  $strand,
                                                                                                category => $category,
                                                                                                summary => $summary
#                                                                                          jbrowseUtilObject => $jbrowseUtil
                                                                                              })->getConfigurationObject();

#   my $coverage = {storeClass => "JBrowse/Store/SeqFeature/BigWig",
#                   urlTemplate => $bwUrl,
#                   yScalePosition => "left",
#                   key => "$studyDisplayName - $displayName Coverage",
#                   label => "$datasetName $label Coverage",
#                   type => "JBrowse/View/Track/Wiggle/XYPlot",
#                   category => "$category",
#                   min_score => 0,
#                   max_score => $covMaxScoreDefault,
# ##                  autoscale => "local",
#                   style => {
#                     "pos_color"         => $color,
#                     "clip_marker_color" =>  "black",
#                     "height" => 40
#                   },
#                   scale => $multiCovScale,
#                   metadata => {
#                     subcategory => $subCategory,
#                     dataset => $studyDisplayName,
#                     trackType => 'Coverage',
#                     attribution => $shortAttribution,
#                     description => $summary,
#                    },
#                    fmtMetaValue_Dataset => "function() { return datasetLinkByDatasetName('${datasetName}', '${studyDisplayName}'); }",
#                    fmtMetaValue_Description => "function() { return datasetDescription('${summary}', ''); }"
#   };
  if($technologyType eq 'RNASeq') {
    $coverageObj->{metadata}->{strand} = $strand;
    $coverageObj->{metadata}->{alignment} = $alignment;
  }

  my $multiUrlHash = {url => $bwUrl, name => $displayName, color => $color, alignment => $alignment};

  push @{$result->{tracks}}, $coverageObj;
  push @$multiUrls, $multiUrlHash;
}


sub color {
  my ($strand, $alignment, $datasetName, $displayName) = @_;

  if($datasetName eq 'tbruTREU927_Rijo_Circadian_Regulation_rnaSeq_RSRC') {
    return &customColorTbCircadianRegulation($strand, $alignment, $datasetName, $displayName);
  }

  if($alignment eq 'unique') {
    if($strand eq 'reverse') {
      return 'red';
    }
    elsif($strand eq 'forward') {
      return 'blue';
    }
    else {
      return '#DC7633';
    }
  }

  return 'grey';;
}

# special colors for a tbru dataset
sub customColorTbCircadianRegulation {
  my ($strand, $alignment, $datasetName, $displayName) = @_;

  if($alignment eq 'non-unique') {
    return 'grey';
  }
  if($displayName =~ /BSF.+Alt/) {
    return "cyan";
  }
  if($displayName =~ /BSF.+Const/) {
    return "goldenrod";
  }
  if($displayName =~ /PF.+Alt/) {
    return "blue";
  }
  if($displayName =~ /PF.+Const/) {
    return "red";
  }
  return "black";
}


1;

