#!/usr/bin/perl

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";

use DBI;
use Data::Dumper;
use XML::Simple;
use Getopt::Long qw(GetOptions);
use ApiCommonData::Load::TuningConfig::Utils;
use ApiCommonShared::Model::DataSourceAttributions;
use ApiCommonShared::Model::DataSourceAttribution;
use ApiCommonShared::Model::WdkReferenceCategories;
use CBIL::Util::PropertySet;

BEGIN {
  # This variable is declared inside a BEGIN block, to make it behave
  # like a Java "static" variable, whose state persists from one invocation to
  # another.
  my $errorFlag;

  sub setErrorFlag {
    $errorFlag = 1;
  }

  sub getErrorFlag {
    return $errorFlag;
  }
}

my ($propfile, $instance, $schema, $password, $suffix, $subversionDir, $debug);
GetOptions("propfile=s" => \$propfile,
           "instance=s" => \$instance,
           "schema=s" => \$schema,
           "password=s" => \$password,
           "suffix=s" => \$suffix,
           "subversionDir=s" => \$subversionDir,
           "debug!" => \$debug,
	  );

($instance, $schema, $password) = ApiCommonData::Load::TuningConfig::Utils::getDbLoginInfo($instance, $propfile, $schema, $password);
my $dbh = ApiCommonData::Load::TuningConfig::Utils::getDbHandle($instance, $schema, $password);

$|=1;

my $workingDir = $subversionDir . "datasources";

createTables($dbh, $suffix);

chdir "$workingDir";

my $projectQuery = $dbh->prepare(<<SQL);
  select project_id, lower(project_id) as lower_project_id
  from (select distinct project_id from $schema.SequenceAttributes)
SQL

my $wdkReferenceCategoriesXmlFile = "wdkReferenceCategories.xml";
my $wdkReferenceCategories = ApiCommonShared::Model::WdkReferenceCategories->new($wdkReferenceCategoriesXmlFile);

$projectQuery->execute() or die "getting a list of project IDs";
while (my ($project, $lowerProject) = $projectQuery->fetchrow_array()) {

  loadDataSources($dbh, "globalResourcesInfo.xml", $suffix, $wdkReferenceCategories, $debug);

  foreach my $file (`ls $lowerProject/*Info.xml`) {
    loadDataSources($dbh, $file, $suffix, $wdkReferenceCategories, $debug);
  }
}

createIndexes($dbh);
dropConstraints($dbh, $suffix);

die if getErrorFlag();

################################################################################

sub loadDataSources {
    my ($dbh, $infile, $suffix, $wdkReferenceCategories, $debug) = @_;

    print STDERR "loading $infile";

#    my $dataSourceInfos = ReFlow::DataSource::DataSourceInfos->new($infile, $wdkReferenceCategories);
     my $dbDataSourcesList = ApiCommonShared::Model::DataSourceList->new($dbh); 
     my $dataSourceAttributions = ApiCommonShared::Model::DataSourceAttributions->new($infile, $wdkReferenceCategories,$dbDataSourcesList);

    if($debug){
	print STDERR "DATA SOURCE INFO:  ";
	print STDERR Dumper $dataSourceAttributions;
    }


    my $insertDsAttrib = $dbh->prepare(<<SQL);
      insert into ApiDB.DataSourceAttribution$suffix
                  (data_source_id, display_name, description,summary,
                   protocol, caveat, ackowledgement, releasepolicy)
                   values (?, ?, ?, ?, ?, ?, ?, ?)
SQL

    my $queryContact = $dbh->prepare(<<SQL);
         select contact_id from Sres.Contact where name = ? and email = ?
SQL     

    my $insertDsCntctLink = $dbh->prepare(<<SQL);
      insert into ApiDB.DataSourceContact$suffix
                  (contact_id,data_source_id, is_primary_contact)
                  values(?, ?, ?)
SQL

    my $insertDsCntctLinkNew = $dbh->prepare(<<SQL);
      insert into ApiDB.DataSourceContact$suffix
                  (contact_id,data_source_id, is_primary_contact)
      select DataSourceContact_sq$suffix.currval, ?, ?
      from dual
SQL

    my $insertDsCntct = $dbh->prepare(<<SQL);
      insert into Sres.Contact$suffix
                  (contact_id,name,email,country,state,city,address1,address2,zip)
      select DataSourceContact_sq$suffix.nextval, ?, ?, ?, ?, ?, ?, ?, ?
      from dual
SQL

     my $insertDsURL = $dbh->prepare(<<SQL);
      insert into ApiDB.DataSourceAttributionURL$suffix
                  (ext_link_id,data_source_id,URL_Type,URL_Description,URL)
      select DataSourceAttrUrl_sq$suffix.nextval, ?, ?, ?, ?
      from dual
SQL
 
      my $insertDsp = $dbh->prepare(<<SQL);
      insert into apidb.DataSourceInfoPublication$suffix
                  (data_source_publication_id, data_source_id, pmid, doi, citation, abstract)
      select DataSourceInfoPub_sq$suffix.nextval, ?, ?, ?, ?, ?
      from dual
SQL

    my $insertDsr = $dbh->prepare(<<SQL);
      insert into apidb.DataSourceInfoReference$suffix
                  (data_source_reference_id, data_source_id, record_type, target_type, target_name)
      select DataSourceInfoRef_sq$suffix.nextval, ?, ?, ?, ?
      from dual
SQL
 

 #   my %loadedDatasets = getLoadedDatasets($dbh);

    foreach my $dsName ($dataSourceAttributions->getDataSourceAttributionNames()) {
      chomp($dsName);

      my $ds = $dataSourceAttributions->getDataSourceAttribution($dsName);
      print STDERR "data source: \"$dsName\"" if $debug;

      my $dbDataSource = $dbDataSourcesList->dataSourceHashByName{$dsName};
      my $dataSourceId = $dbDataSource->{ID};

      if (!$dbDataSource) {
	print STDERR "skipping [$dsName] because $dsName does not exist in apidb.DataSource\n" if $debug;
	next;
      }

      $insertDsAttrib->execute($dataSourceId, $ds->getDisplayName(),
                       $ds->getDescription(), $ds->getSummary(), $ds->getProtocol(),
                       $ds->getCaveat(), $ds->getAcknowledgement(), $ds->releasePolicy())
	or die "inserting a DataSourceAttribution record";



      foreach my $linkObj ($ds->getAssociatedLinks()) {
	print STDERR "Dumping External Links:\n" . Dumper($linkObj) if $debug;
	foreach my $extLink (@$linkObj) {
          $insertDsURL->execute($dataSourceId, $extLink->{type}, $extLink->{linkDescription}, $extLink->{url})
	    or die "inserting a DataSetExternalLinks record";
	}
      }

    

      foreach my $contactObj ($ds->getContacts()) {
        print STDERR "Dumping contacts:\n" . Dumper($contactObj) if $debug;
        foreach my $contact (@$contactObj) {

          #See if contact already exists in Sres Table
          $queryContact->execute($contact->{name}, $concat->{email})
           or die "getting DataSource name/ID pairs";

           #If it exists then link the data source to the existing contact record 
           if (my($contactId) = $queryContact->fetchrow_array()) {
             $insertDsCntctLink->execute($contactId,$dataSourceId,$contact->isPrimaryContact())
             or die "inserting a DataSourceContactLink record"; 
           } else {
            #If it does'nt, then insert records in both tables
             $insertDsCntct->execute($contact->{name}, $contact->{email}, $contact->{country}, $contact->{state}, $contact->{city}, $contact->{institution}, $contact->{address}, $contact->{zip})
             or die "inserting a DataSourceContact record";
             $insertDsCntctLinkNew->execute($dataSourceId,$contact->isPrimaryContact())
             or die "inserting a DataSourceContactLink record";
           }
        }
      }


      foreach my $publicationList ($ds->getPublications()) {
	print STDERR "Dumping publication:\n" . Dumper($publicationList) if $debug;
	foreach my $publication (@$publicationList) {
          $insertDsp->execute($dataSourceId, $publication->{pmid}, $publication->{doi}, $publication->{citation}, $publication->{abstract})
	    or die "inserting a DataSetPublication record";
	}
      }

      foreach my $referenceList ($ds->getWdkReferences()) {
	print STDERR "Dumping referenceList:\n" . Dumper($referenceList) if $debug;
	foreach my $reference (@$referenceList) {
	    $insertDsr->execute($dataSourceId, $reference->{recordClass}, $reference->{type}, $reference->{name})
	      or die "inserting a DataSetReference record";
	}
      }

    }
}

#sub getLoadedDatasets {
#  my ($dbh) = @_;

#  my $query = $dbh->prepare(<<SQL);
#    select name, data_source_id from apidb.DataSource
#SQL

#  $query->execute()
#    or die "getting DataSource name/ID pairs";

#  my %datasetHash;
#  while (my ($dsName, $dsId) = $query->fetchrow_array()) {
#    $datasetHash{$dsName} = $dsId;
#  }

#  return %datasetHash;
#}


sub createTables {
    my ($dbh, $suffix) = @_;

    $dbh->do(<<SQL) or die "creating DataSourceAttribution table";
      create table ApiDB.DataSourceAttribution$suffix (
        data_source_id               number(12),
        display_name                 varchar2(200),
        summary                   varchar2(200),
        protocol                   varchar2(80),
        description                  varchar2(4000),
        caveat                      varchar2(80),
        acknowledgement                  varchar2(120),
        releasepolicy                  varchar2(120),
        constraint DataSourceAttr_pk$suffix primary key (data_source_id)
      )
SQL

    $dbh->do(<<SQL) or die "creating DataSourceContact table";
      create table ApiDB.DataSourceContact$suffix (
        data_source_id               number(12),
        contact_id                   number(12),
        is_primary_contact           varchar2(20),
        constraint DataSourceContc_pk$suffix primary key (contact_id)
        constraint DataSrcContc_parent_fk$suffix foreign key (data_source_id) references apidb.DataSourceAttribution$suffix
      )
SQL

    $dbh->do(<<SQL) or die "creating DataSourceUrl table";
      create table ApiDB.DataSourceAttributionURL$suffix (
        data_source_id               number(12),
        ext_link_id                  number(12),
        url_type                     varchar2(20),
        url_description              varchar2(4000),
        url                          varchar2(2000),
        constraint DataSourceUrl_pk$suffix primary key (ext_link_id)
        constraint DataSrcUrl_parent_fk$suffix foreign key (data_source_id) references apidb.DataSourceAttribution$suffix
      )
SQL

    $dbh->do(<<SQL) or die "creating DataSourcePublication table";
      create table apidb.DataSourceInfoPublication$suffix (
        data_source_publication_id   number(12),
        data_source_id               number(12),
        pmid                         varchar2(60),
        doi                          varchar2(60),
        citation                     varchar2(1000),
        abstract                     varchar2(2000),
        constraint DataSrcInfoPub_pk$suffix primary key (data_source_publication_id),
        constraint DataSrcInfoPub_parent_fk$suffix foreign key (data_source_id) references apidb.DataSourceAttribution$suffix
      )
SQL

    $dbh->do(<<SQL) or die "creating DataSourceReference table";
      create table apidb.DataSourceInfoReference$suffix (
        data_source_reference_id     number(12),
        data_source_id               number(12),
        record_type                  varchar2(50),
        target_type                  varchar2(20),
        target_name                  varchar2(60),
        constraint DataSrcInfoRef_pk$suffix primary key (data_source_reference_id),
        constraint DataSrcInfoRef_parent_fk$suffix foreign key (data_source_id) references apidb.DataSourceAttribution$suffix
      )
SQL

    $dbh->do(<<SQL) or die "creating primary-key sequence for DataSourceContact table";
      create sequence apidb.DataSourceContact_sq$suffix
SQL

    $dbh->do(<<SQL) or die "creating primary-key sequence for DataSourceUrl table";
      create sequence apidb.DataSourceAttrUrl_sq$suffix
SQL

    $dbh->do(<<SQL) or die "creating primary-key sequence for DataSourcePublication table";
      create sequence apidb.DataSourceInfoPub_sq$suffix
SQL

    $dbh->do(<<SQL) or die "creating primary-key sequence for DataSourceReference table";
      create sequence apidb.DataSourceInfoRef_sq$suffix
SQL

}

sub createIndexes {

}

sub dropConstraints {
    my ($dbh, $suffix) = @_;

    $dbh->do(<<SQL) or die "dropping foreign-key constraint from DataSourceContact table";
        alter table ApiDB.DataSourceContact$suffix drop constraint DataSrcContc_parent_fk$suffix
SQL

    $dbh->do(<<SQL) or die "dropping foreign-key constraint from DataSourceUrl table";
        alter table ApiDB.DataSourceAttributionURL$suffix drop constraint DataSrcUrl_parent_fk$suffix
SQL

    $dbh->do(<<SQL) or die "dropping foreign-key constraint from DataSourcePublication table";
        alter table apidb.DataSourceInfoPublication$suffix drop constraint DataSrcInfoPub_parent_fk$suffix
SQL

    $dbh->do(<<SQL) or die "dropping foreign-key constraint from DataSourceReference table";
        alter table apidb.DataSourceInfoReference$suffix drop constraint DataSrcInfoRef_parent_fk$suffix
SQL
}

