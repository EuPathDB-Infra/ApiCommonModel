#!/usr/bin/perl

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";

use DBI;
use Data::Dumper;
use XML::Simple;
use Getopt::Long qw(GetOptions);
use ApiCommonData::Load::TuningConfig::Utils;
use ApiCommonShared::Model::DataSourceAttributions;
use ApiCommonShared::Model::DataSourceAttribution;
use ApiCommonShared::Model::DataSourceWdkReferences;
use ApiCommonShared::Model::DataSourceList;
use CBIL::Util::PropertySet;

BEGIN {
  # This variable is declared inside a BEGIN block, to make it behave
  # like a Java "static" variable, whose state persists from one invocation to
  # another.
  my $errorFlag;

  sub setErrorFlag {
    $errorFlag = 1;
  }

  sub getErrorFlag {
    return $errorFlag;
  }
}

my ($propfile, $instance, $schema, $password, $suffix, $subversionDir, $debug, $svnBranch);
GetOptions("propfile=s" => \$propfile,
           "instance=s" => \$instance,
           "schema=s" => \$schema,
           "password=s" => \$password,
           "suffix=s" => \$suffix,
           "subversionDir=s" => \$subversionDir,
           "branch=s" => \$svnBranch,
           "debug!" => \$debug,
	  );

($instance, $schema, $password) = ApiCommonData::Load::TuningConfig::Utils::getDbLoginInfo($instance, $propfile, $schema, $password);
my $dbh = ApiCommonData::Load::TuningConfig::Utils::getDbHandle($instance, $schema, $password);

$|=1;

createTables($dbh, $suffix);


my $projectQuery = $dbh->prepare(<<SQL);
  select project_id, lower(project_id) as lower_project_id
  from (select distinct project_id from apidbtuning.SequenceAttributes)
SQL

my $TEMPDIR = "/tmp";

my $dataSourceWdkReferencesXmlFile = "dataSourceWdkReferences.xml";

my $dsWdkRefXmlPath = "$TEMPDIR/$dataSourceWdkReferencesXmlFile";

system("svn export --non-interactive --trust-server-cert https://www.cbil.upenn.edu/svn/apidb/ApiCommonShared/${svnBranch}/Model/lib/xml/dataSourceAttributions/$dataSourceWdkReferencesXmlFile $dsWdkRefXmlPath");
my $dataSourceWdkReferences = ApiCommonShared::Model::DataSourceWdkReferences->new($dsWdkRefXmlPath);


my $globalXmlFile = "global.xml";
my $globalXmlPath = "$TEMPDIR/$globalXmlFile";

system("svn export --non-interactive --trust-server-cert https://www.cbil.upenn.edu/svn/apidb/ApiCommonShared/${svnBranch}/Model/lib/xml/dataSourceAttributions/$globalXmlFile $globalXmlPath");
loadDataSources($dbh, $globalXmlPath, $suffix, $dataSourceWdkReferences, $debug);


$projectQuery->execute() or die "getting a list of project IDs";

while (my ($project, $lowerProject) = $projectQuery->fetchrow_array()) {
  my $projectXmlFile = "${project}.xml";
  my $projectXmlPath = "$TEMPDIR/$projectXmlFile";

  system("svn export --non-interactive --trust-server-cert https://www.cbil.upenn.edu/svn/apidb/ApiCommonShared/${svnBranch}/Model/lib/xml/dataSourceAttributions/${projectXmlFile} $projectXmlPath");

  if(-e $projectXmlPath) {
    loadDataSources($dbh, $projectXmlPath, $suffix, $dataSourceWdkReferences, $debug);
  } else {
    print "Data Source Attributions file $projectXmlPath could not be found.\n";
    exit; 
    #The die below for file-exists will be enforced once all components fall under workflow.
    #die "Data Source Attributions file $projectXmlPath could not be found.\n";  
  }
  unlink($projectXmlPath);
}


unlink($dsWdkRefXmlPath, $globalXmlPath);
die if getErrorFlag();

################################################################################

sub loadDataSources {
    my ($dbh, $infile, $suffix, $wdkReferenceCategories, $debug) = @_;

    #list of db data source names from ApiDB.DataSource 
    my $dbDataSourcesList = ApiCommonShared::Model::DataSourceList->new($dbh); 

   #transform xml to a collection of attributions
    print STDERR "loading $infile\n";
    my $dataSourceAttributions = ApiCommonShared::Model::DataSourceAttributions->new($infile, $dataSourceWdkReferences,$dbDataSourcesList);

    if($debug){
	print STDERR "DATA SOURCE ATTRIBUTION:  ";
	print STDERR Dumper $dataSourceAttributions;
    }

    my $displayCategories = $dataSourceAttributions->getDisplayCategories();
  
    my $insertDsAttrib = $dbh->prepare(<<SQL);
      insert into ApiDBTuning.DataSourceAttribution$suffix
                  (data_source_id, display_name, description,summary,
                   protocol, caveat, acknowledgement, releasepolicy,display_category)
                   values (?, ?, ?, ?, ?, ?, ?, ?, ?)
SQL

    my $insertDsCntct = $dbh->prepare(<<SQL);
      insert into ApiDBTuning.DataSourceContact$suffix
                  (data_source_contact_id, data_source_id, is_primary_contact, name, email, affiliation, city, state, country, address, zip)
      select DataSourceCntct_sq$suffix.nextval, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
      from dual
SQL

     my $insertDsURL = $dbh->prepare(<<SQL);
      insert into ApiDBTuning.DataSourceAttributionURL$suffix
                  (ext_link_id,data_source_id,URL_Type,URL_Description,URL)
      select DataSourceAttrUrl_sq$suffix.nextval, ?, ?, ?, ?
      from dual
SQL
 
      my $insertDsp = $dbh->prepare(<<SQL);
      insert into ApiDBTuning.DataSourceAttrPublication$suffix
                  (data_source_publication_id, data_source_id, pmid, doi, citation, abstract)
      select DataSourceAttrPub_sq$suffix.nextval, ?, ?, ?, ?, ?
      from dual
SQL

    my $insertDsr = $dbh->prepare(<<SQL);
      insert into ApiDBTuning.DataSourceWdkReference$suffix
                  (data_source_reference_id, data_source_id, record_type, target_type, target_name)
      select DataSourceWdkRef_sq$suffix.nextval, ?, ?, ?, ?
      from dual
SQL

    my $insertDsrText = $dbh->prepare(<<SQL);
      insert into ApiDBTuning.DataSourceWdkRefText$suffix
                  (data_source_reference_text_id, data_source_id, name, value)
      select DataSourceWdkRefText_sq$suffix.nextval, ?, ?, ?
      from dual
SQL
 

    foreach my $dsName ($dataSourceAttributions->getDataSourceAttributionNames()) {

      chomp($dsName);

      #read individual attribution objects
      my $ds = $dataSourceAttributions->getDataSourceAttribution($dsName);
      print STDERR "data source: \"$dsName\"" if $debug;

      my @dbDataSourceName;
      my $nameIsRegEx = $dataSourceAttributions->checkIfRegEx($dsName);

      #if regex, load one representative of the matching attributions. except dbxrefs, where all the matches are to be loaded.
      if ($nameIsRegEx eq "true") {
         $dsName = qq($dsName);
         my $dsType = $ds->getOverridingType();

         if ($dsType eq 'dbxref') {
           @dbDataSourceName = grep {/$dsName/} ($dbDataSourcesList->getDbDataSourceNames());
         } else {
           my ($dbDataSourceName) = grep {$_ =~ /$dsName/} ($dbDataSourcesList->getDbDataSourceNames());
           push (@dbDataSourceName, $dbDataSourceName);
         }
      } else {
         push (@dbDataSourceName, $dsName);
      }

     
      #validate and load the attribution 
      foreach my $dataSource (@dbDataSourceName) {

        my $displayCategory =  $ds->getDisplayCategory() ?  $ds->getDisplayCategory() :  $displayCategories->{$dataSource}; 
        $displayCategory =~ s/:(.*)$//;

        #Set this when we decide to ignore attributions (we dont now). 
        #my $ignore = $ds->checkIgnore();
        #next if ($ignore eq "true");

         my $dbDataSource = $dbDataSourcesList->dataSourceHashByName($dataSource);
         my $dataSourceId = $dbDataSource->{ID};
         chomp($dataSourceId);

         if ($dataSourceId eq '') {
	   print  "skipping [$dataSource] because $dataSource does not exist in apidb.DataSource\n" if $debug;
	    next;
         }

         #Fail if no display category is found
         #die "No Display Category found for $dsName. Display Category is a required field and will be used to organize the attributions" if $displayCategory eq ''; 

        # Insert Attribution only if it is names
        if($ds->getDisplayName()) {
          $insertDsAttrib->execute($dataSourceId, $ds->getDisplayName(),
                                   $ds->getDescription(), $ds->getSummary(), $ds->getProtocol(),
                                   $ds->getCaveat(), $ds->getAcknowledgement(), $ds->getReleasePolicy(), $displayCategory)
              or die "inserting a DataSourceAttribution record";
        }

         foreach my $linkObj ($ds->getAssociatedLinks()) {
           next unless ($linkObj);
	   print STDERR "Dumping External Links:\n" . Dumper($linkObj) if $debug;
	   foreach my $extLink (@$linkObj) {
              next unless ($extLink->{url} ne '');
              $insertDsURL->execute($dataSourceId, $extLink->{type}, $extLink->{linkDescription}, $extLink->{url})
              or die "inserting a DataSetExternalLinks record"; 	  
	   }
         }

    

         foreach my $contactObj ($ds->getContacts()) {
            next unless ($contactObj);
            print STDERR "Dumping contacts:\n" . Dumper($contactObj) if $debug;
            foreach my $contact (@$contactObj) {
              $insertDsCntct->execute($dataSourceId,$contact->{isPrimaryContact},$contact->{name},$contact->{email},$contact->{institution},$contact->{city},$contact->{state},$contact->{country},$contact->{address},$contact->{zip})
              or die "inserting a DataSourceContact record";
            }
         }


         foreach my $publicationList ($ds->getPublications()) {
           next unless ($publicationList);
	   print STDERR "Dumping publication:\n" . Dumper($publicationList) if $debug;
	   foreach my $publication (@$publicationList) {
             next unless ($publication->{pmid} ne '');
             $insertDsp->execute($dataSourceId, $publication->{pmid}, $publication->{doi}, $publication->{citation}, $publication->{abstract})
             or die "inserting a DataSetPublication record";
   	   }
         }


         foreach my $referenceList ($ds->getWdkReferences()) {
           next unless ($referenceList);
	   print STDERR "Dumping referenceList:\n" . Dumper($referenceList) if $debug;
	   foreach my $reference (@$referenceList) {
             next unless ($reference->{recordClass} ne '' && $reference->{type} ne '' && $reference->{name} ne '');
             my $refName = $reference->{name};my $refType = $reference->{type};
             $refName =~ s/://g;

       $insertDsr->execute($dataSourceId, $reference->{recordClass}, $refType, $refName)
       or die "inserting a DataSetReference record";

             if($refType eq 'gbrowse_track') {
               my $text = $reference->{text};
               foreach my $t ( @$text ) {
                $insertDsrText->execute($dataSourceId, $t->{name}, $t->{content})
                 or die "inserting a DataSetReferenceText record";
              }
            }
           }
         } #references

    }#$dataSource


  } #$dsName
} #loadDataSources



sub createTables {
    my ($dbh, $suffix) = @_;

    $dbh->do(<<SQL) or die "creating DataSourceAttribution table";
      create table ApiDBTuning.DataSourceAttribution$suffix (
        data_source_id               number(12),
        display_name                 varchar2(200),
        summary                   varchar2(2000),
        protocol                   varchar2(4000),
        description                  varchar2(4000),
        caveat                      varchar2(4000),
        acknowledgement                  varchar2(4000),
        releasepolicy                  varchar2(4000),
        display_category             varchar2(60),
        constraint DataSourceAttr_pk$suffix primary key (data_source_id)
      )
SQL

    $dbh->do(<<SQL) or die "creating DataSourceContact table";
      create table ApiDBTuning.DataSourceContact$suffix (
        data_source_id               number(12),
        data_source_contact_id       number(12),
        is_primary_contact           varchar2(20),
        name                         varchar2(255),
        email                        varchar2(255),
        affiliation                  varchar2(255),
        city                         varchar2(255),
        state                        varchar2(255),
        country                      varchar2(255),
        address                      varchar2(255),
        zip                          varchar2(25),
        constraint DataSourceContc_pk$suffix primary key (data_source_contact_id)
      )
SQL

    $dbh->do(<<SQL) or die "creating DataSourceUrl table";
      create table ApiDBTuning.DataSourceAttributionURL$suffix (
        data_source_id               number(12),
        ext_link_id                  number(12),
        url_type                     varchar2(20),
        url_description              varchar2(4000),
        url                          varchar2(2000),
        constraint DataSourceUrl_pk$suffix primary key (ext_link_id)
      )
SQL

    $dbh->do(<<SQL) or die "creating DataSourcePublication table";
      create table ApiDBTuning.DataSourceAttrPublication$suffix (
        data_source_publication_id   number(12),
        data_source_id               number(12),
        pmid                         varchar2(60),
        doi                          varchar2(60),
        citation                     varchar2(4000),
        abstract                     varchar2(4000),
        constraint DataSrcAttrPub_pk$suffix primary key (data_source_publication_id)
      )
SQL

    $dbh->do(<<SQL) or die "creating DataSourceReference table";
      create table ApiDBTuning.DataSourceWdkReference$suffix (
        data_source_reference_id     number(12),
        data_source_id               number(12),
        record_type                  varchar2(50),
        target_type                  varchar2(20),
        target_name                  varchar2(100),
        constraint DataSrcWdkRef_pk$suffix primary key (data_source_reference_id)
      )
SQL

    $dbh->do(<<SQL) or die "creating DataSourceWdkRefText table";
      create table ApiDBTuning.DataSourceWdkRefText$suffix (
        data_source_reference_text_id     number(12),
        data_source_id                    number(12),
        name                              varchar2(100),
        value                             varchar2(4000),
        constraint DataSrcWdkRefText_pk$suffix primary key (data_source_reference_text_id)
      )
SQL

    $dbh->do(<<SQL) or die "creating primary-key sequence for DataSourceContact table";
      create sequence ApiDBTuning.DataSourceCntct_sq$suffix
SQL

    $dbh->do(<<SQL) or die "creating primary-key sequence for DataSourceUrl table";
      create sequence ApiDBTuning.DataSourceAttrUrl_sq$suffix
SQL

    $dbh->do(<<SQL) or die "creating primary-key sequence for DataSourcePublication table";
      create sequence ApiDbTuning.DataSourceAttrPub_sq$suffix
SQL

    $dbh->do(<<SQL) or die "creating primary-key sequence for DataSourceReference table";
      create sequence ApiDBTuning.DataSourceWdkRef_sq$suffix
SQL

    $dbh->do(<<SQL) or die "creating primary-key sequence for DataSourceReferenceText table";
      create sequence ApiDBTuning.DataSourceWdkRefText_sq$suffix
SQL

}

sub createIndexes {
#if needed.
}

sub addFkeyConstraints {
     my ($dbh, $suffix) = @_;

    $dbh->do(<<SQL) or die "Adding foreign-key constraint from DataSourceContact table";
        alter table ApiDBTuning.DataSourceContact$suffix add constraint DataSrcContc_parent_fk$suffix
SQL

    $dbh->do(<<SQL) or die "Adding foreign-key constraint from DataSourceUrl table";
        alter table ApiDBTuning.DataSourceAttributionURL$suffix add constraint DataSrcUrl_parent_fk$suffix
SQL

    $dbh->do(<<SQL) or die "Adding foreign-key constraint from DataSourcePublication table";
        alter table ApiDBTuning.DataSourceAttrPublication$suffix add constraint DataSrcAttrPub_parent_fk$suffix
SQL

    $dbh->do(<<SQL) or die "Adding foreign-key constraint from DataSourceReference table";
        alter table ApiDBTuning.DataSourceWdkReference$suffix add constraint DataSrcWdkRef_parent_fk$suffix
SQL

    $dbh->do(<<SQL) or die "Adding foreign-key constraint from DataSourceWdkRefText table";
        alter table ApiDBTuning.DataSourceWdkRefText$suffix add constraint DataSrcWdkRefText_parent_fk$suffix
SQL
    

}


sub dropConstraints {
    my ($dbh, $suffix) = @_;

    $dbh->do(<<SQL) or die "dropping foreign-key constraint from DataSourceContact table";
        alter table ApiDBTuning.DataSourceContact$suffix drop constraint DataSrcContc_parent_fk$suffix
SQL

    $dbh->do(<<SQL) or die "dropping foreign-key constraint from DataSourceUrl table";
        alter table ApiDBTuning.DataSourceAttributionURL$suffix drop constraint DataSrcUrl_parent_fk$suffix
SQL

    $dbh->do(<<SQL) or die "dropping foreign-key constraint from DataSourcePublication table";
        alter table ApiDBTuning.DataSourceAttrPublication$suffix drop constraint DataSrcAttrPub_parent_fk$suffix
SQL

    $dbh->do(<<SQL) or die "dropping foreign-key constraint from DataSourceReference table";
        alter table ApiDBTuning.DataSourceWdkReference$suffix drop constraint DataSrcWdkRef_parent_fk$suffix
SQL

    $dbh->do(<<SQL) or die "dropping foreign-key constraint from DataSourceWdkRefText table";
        alter table ApiDBTuning.DataSourceWdkRefText$suffix drop constraint DataSrcWdkRefText_parent_fk$suffix
SQL
}

