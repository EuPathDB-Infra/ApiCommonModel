#!/usr/bin/perl

use strict;

use lib "$ENV{GUS_HOME}/lib/perl";

use DBI;
use Getopt::Long qw(GetOptions);
use Data::Dumper;
use ApiCommonShared::Model::tmUtils;
use ApiCommonShared::Model::Pubmed;

my ($help, $propfile, $instance, $schema, $suffix, $debug);

Getopt::Long::Configure("pass_through");
GetOptions("propfile=s" => \$propfile,
           "instance=s" => \$instance,
           "schema=s" => \$schema,
           "suffix=s" => \$suffix,
           "debug!" => \$debug,
           "help|h" => \$help,
          );

usage() if ($help);

die "required parameter missing" unless ($propfile && $instance && $suffix);

my $dbh = ApiCommonShared::Model::tmUtils::getDbHandle($instance, $schema, $propfile);

# create table
$dbh->do(<<SQL) or die "creating table";
   create table Pubmed$suffix (
      pubmed_id   number(10),
      title       varchar2(400),
      authors     varchar2(2000),
      doi         varchar2(100)
   ) nologging
SQL

# try getting wanted PMIDs from an existing version of the table
$dbh->{PrintError} = 0;
my $rtn = $dbh->do(<<SQL);
  insert into Pubmed$suffix (pubmed_id, title, authors, doi)
  select pubmed_id, title, authors, doi
  from Pubmed
  where to_char(pubmed_id) in (select primary_identifier
                               from sres.DbRef
                               where db_ref_id in (select db_ref_id from dots.DbRefNaFeature)
                                 and external_database_release_id
                                     in (select edd.external_database_release_id
                                         from ExternalDbDatasetPresenter edd
                                           where lower(edd.dataset_presenter_display_name) like '%pubmed%'))
SQL
  print STDERR "dbh->do returned $rtn on attempt to copy PMIDs from existing Pubmed table\n";
  $dbh->{PrintError} = 1;

# log starting state
my $countStmt = $dbh->prepare(<<SQL) or print STDERR $dbh->errstr;
  select count(*) from Pubmed$suffix
SQL

$countStmt->execute();
my ($startingCount) = $countStmt->fetchrow_array();
print STDERR "Already have citations for $startingCount PMIDs\n";

# prepare insert
my $insertStmt = $dbh->prepare(<<SQL);
   insert into Pubmed$suffix
   (pubmed_id, doi, title, authors)
   values (?, ?, ?, ?)
SQL

# get PubMed IDs
my $stmt = $dbh->prepare(<<SQL) or print STDERR $dbh->errstr;
     select distinct primary_identifier as pubmed_id
     from sres.DbRef
     where db_ref_id in (select db_ref_id from dots.DbRefNaFeature)
       and external_database_release_id
           in (select edd.external_database_release_id
               from ExternalDbDatasetPresenter edd
                 where lower(edd.dataset_presenter_display_name) like '%pubmed%')
   minus
     select to_char(pubmed_id) from Pubmed$suffix
   order by pubmed_id
SQL

$stmt->execute();
my @pmids;
my $pmidCount;
while (my ($pmid) = $stmt->fetchrow_array()) {
  my $fetchedPmid = $pmid;
  $pmid =~ s/\D//g; # strip out non-digits
  push(@pmids, $pmid);
  print STDERR "PubMed ID \"$fetchedPmid\" changed to \"$pmid\"\n"
    if $pmid ne $fetchedPmid;
  $pmidCount++;
}

print STDERR "Need citations for $pmidCount PMIDs\n";

# process PMIDs in chunks, so resulting XML is wieldy
my $CHUNKSIZE = 100;
my $insertCount;

while (@pmids) {
  my @chunkOfPmids;
  for (my $i=0; ($i < $CHUNKSIZE) && @pmids; $i++) {
    push(@chunkOfPmids, pop(@pmids));
  }

  # create Pubmed object (and query NCBI for data)
  print STDERR "getting PubMed data from NCBI\n";
  my $pubmed = ApiCommonShared::Model::Pubmed->new(\@chunkOfPmids);

  print STDERR "processing PubMed data\n";
  # iterate through list, match up PubMed data, and insert
  foreach my $pmid (@chunkOfPmids) {
    my $doi = $pubmed->getDoi($pmid);
    my $title = $pubmed->getTitle($pmid);
    my $authors = $pubmed->getAuthors($pmid);

    $insertStmt->execute($pmid, $doi, $title, $authors)
      or die "inserting record for PubMed ID \"$pmid\"";
    $insertCount++;
  }
  print STDERR "Inserted $insertCount PubMed records so far\n";
}

# create index
$dbh->do(<<SQL) or die "creating index";
   create index pmix$suffix
      on Pubmed$suffix (pubmed_id, title, authors, doi)
SQL

$dbh->disconnect();

sub usage {
  my $e = shift;
  if($e) {
    print STDERR $e . "\n";
  }
  print STDERR "
Build a table of PubMed records from PubMed IDs linked in the database.

usage:  buildPubmedTT -propfile prop_file -instance instance -schema schema -suffix suffix  [-debug] [-help]
";
  exit;
}

1;

