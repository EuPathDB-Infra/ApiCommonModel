#!/usr/bin/perl

use strict;

use lib "$ENV{GUS_HOME}/lib/perl";

use DBI;
use Getopt::Long qw(GetOptions);
use Data::Dumper;
use ApiCommonShared::Model::tmUtils;
use ApiCommonShared::Model::Pubmed;

my ($help, $propfile, $instance, $schema, $suffix, $debug);

Getopt::Long::Configure("pass_through");
GetOptions("propfile=s" => \$propfile,
           "instance=s" => \$instance,
           "schema=s" => \$schema,
           "suffix=s" => \$suffix,
           "debug!" => \$debug,
           "help|h" => \$help,
          );

usage() if ($help);

die "required parameter missing" unless ($propfile && $instance && $suffix);

my $dbh = ApiCommonShared::Model::tmUtils::getDbHandle($instance, $schema, $propfile);

# create table
$dbh->do(<<SQL) or die "creating table";
   create table Pubmed$suffix (
      pubmed_id   number(10),
      title       varchar2(400),
      authors     varchar2(1200),
      doi         varchar2(60)
   ) nologging
SQL

# prepare insert
my $insertStmt = $dbh->prepare(<<SQL);
   insert into Pubmed$suffix
   (pubmed_id, doi, title, authors)
   values (?, ?, ?, ?)
SQL

# get PubMed IDs
my $stmt = $dbh->prepare(<<SQL) or print STDERR $dbh->errstr;
   select distinct primary_identifier as pubmed_id
   from sres.DbRef
   where db_ref_id in (select db_ref_id from dots.DbRefNaFeature)
     and external_database_release_id
         in (select edr.external_database_release_id
             from sres.ExternalDatabaseRelease edr, sres.ExternalDatabase ed,
                  apidbTuning.DatasetPresenter dsa
             where ed.external_database_id = edr.external_database_id
               and (ed.name = dsa.name or ed.name like (dsa.dataset_name_pattern))
               and dsa.display_name = 'PubMed')
   order by primary_identifier
SQL

$stmt->execute();
my @pmids;
while (my ($pmid) = $stmt->fetchrow_array()) {
  $pmid =~ s/\D//g; # strip out non-digits
  push(@pmids, $pmid);
}

# create Pubmed object (and query NCBI for data)
print STDERR "getting PubMed data from NCBI\n";
my $pubmed = ApiCommonShared::Model::Pubmed->new(\@pmids);

print STDERR "processing PubMed data\n";
# iterate through list, match up PubMed data, and insert
foreach my $pmid (@pmids) {
  $insertStmt->execute($pmid, $pubmed->getDoi($pmid), $pubmed->getTitle($pmid),
		   $pubmed->getAuthors($pmid))
    or die "inserting record for PubMed ID \"$pmid\"";
}

# create index
$dbh->do(<<SQL) or die "creating index";
   create index pmix$suffix
      on Pubmed$suffix (pubmed_id, title, authors, doi)
SQL

$dbh->disconnect();

sub usage {
  my $e = shift;
  if($e) {
    print STDERR $e . "\n";
  }
  print STDERR "
Build a table of PubMed records from PubMed IDs linked in the database.

usage:  buildPubmedTT -propfile prop_file -instance instance -schema schema -suffix suffix  [-debug] [-help]
";
  exit;
}

1;

