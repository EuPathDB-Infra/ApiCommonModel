#!/usr/bin/perl

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";

use File::Temp qw/ tempdir /;

use Data::Dumper;

use Getopt::Long qw(GetOptions);

use ApiCommonData::Load::TuningConfig::Utils;
use CBIL::Util::PropertySet;

use DBI;


my ($propfile, $instance, $schema, $password, $suffix, $subversionDir, $debug, $svnBranch);
Getopt::Long::Configure("pass_through");
GetOptions("propfile=s" => \$propfile,
           "instance=s" => \$instance,
           "schema=s" => \$schema,
           "password=s" => \$password,
           "suffix=s" => \$suffix,
           "subversionDir=s" => \$subversionDir,
           "branch=s" => \$svnBranch,
           "debug!" => \$debug,
	  );


($instance, $schema, $password) = ApiCommonData::Load::TuningConfig::Utils::getDbLoginInfo($instance, $propfile, $schema, $password);


my $dbh = ApiCommonData::Load::TuningConfig::Utils::getDbHandle($instance, $schema, $password);

$|=1;

my $projectQuery = $dbh->prepare(<<SQL);
  select project_id, lower(project_id) as lower_project_id
  from (select distinct project_id from apidbtuning.SequenceAttributes)
SQL

my $TEMPDIR = tempdir( CLEANUP => 1 );


mkdir "$TEMPDIR/dsp";
mkdir "$TEMPDIR/etc";




my $contactsXmlFile = "contacts.xml";
my $contactsXmlPath = "$TEMPDIR/etc/$contactsXmlFile";
system("svn export --non-interactive --trust-server-cert https://www.cbil.upenn.edu/svn/apidb/EuPathPresenters/${svnBranch}/Model/lib/xml/datasetPresenters/contacts/$contactsXmlFile $contactsXmlPath");

my $globalXmlFile = "global.xml";
my $globalXmlPath = "$TEMPDIR/dsp/$globalXmlFile";
system("svn export --non-interactive --trust-server-cert https://www.cbil.upenn.edu/svn/apidb/ApiCommonShared/${svnBranch}/Model/lib/xml/datasetPresenters/$globalXmlFile $globalXmlPath");

my $dtdFile = "datasetPresenters.dtd";
my $dtdPath = "$TEMPDIR/dsp/$dtdFile";
system("svn export --non-interactive --trust-server-cert https://www.cbil.upenn.edu/svn/apidb/EuPathPresenters/${svnBranch}/Model/lib/xml/datasetPresenters/$dtdFile $dtdPath");

my $refFile = "datasetReferences.tab";
my $refPath = "$TEMPDIR/dsp/$refFile";
system("svn export --non-interactive --trust-server-cert https://www.cbil.upenn.edu/svn/apidb/ApiCommonShared/${svnBranch}/Model/lib/xml/datasetPresenters/$refFile $refPath");



$projectQuery->execute() or die "getting a list of project IDs";
my @presenterFiles;

while (my ($project, $lowerProject) = $projectQuery->fetchrow_array()) {
  if($instance=~m/^tvag.*/ && $lowerProject!~m/^trichdb$/) {
    next;
  }
  my $projectXmlFile = "${project}.xml";
  my $projectXmlPath = "$TEMPDIR/dsp/$projectXmlFile";

  system("svn export --non-interactive --trust-server-cert https://www.cbil.upenn.edu/svn/apidb/EuPathPresenters/${svnBranch}/Model/lib/xml/datasetPresenters/${projectXmlFile} $projectXmlPath");

  unless(-e $projectXmlPath) {
    die "Dataset Presenter file $projectXmlPath could not be found.\n";
  }
}

my $systemResult = system("presenterWriteToDb -presentersDir $TEMPDIR/dsp -contactsXmlFile $contactsXmlPath -tuningPropsXmlFile $propfile -instance $instance -suffix $suffix -defaultInjectorClassesFile $refPath");

unless($systemResult / 256 == 0) {
  die "Failed Running Program";
}




