#!/usr/bin/perl

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";

use File::Temp qw/ tempdir /;

use Data::Dumper;

use Getopt::Long qw(GetOptions);

use ApiCommonData::Load::TuningConfig::Utils;
use CBIL::Util::PropertySet;

use DBI;


my ($propfile, $instance, $schema, $password, $suffix, $subversionDir, $debug, $svnBranch, $report, $help);
Getopt::Long::Configure("pass_through");
GetOptions("propfile=s" => \$propfile,
           "instance=s" => \$instance,
           "schema=s" => \$schema,
           "password=s" => \$password,
           "suffix=s" => \$suffix,
           "subversionDir=s" => \$subversionDir,
           "branch=s" => \$svnBranch,
           "debug!" => \$debug,
           "report!" => \$report,
           "help|h" => \$help,
	  );

if($help) {
  print STDERR "REPORT usage:  buildDatasetPresentersTT --propFile <tuningManagerProp.xml> --instance=s --schema apidbtuning|apidb --report\n\n";
  print STDERR "You should ALWAYS run in 'report' mode unless you are the tuningManger\n";

  print STDERR "If you REALLY need to write the tables ...call like this\n";
  print STDERR "DANGER usage:  buildDatasetPresentersTT --propFile <tuningManagerProp.xml> --instance=s --schema apidbtuning|apidb --suffix=i --branch trunk|branches/api-build-XX\n\n";
  exit;
}


($instance, $schema, $password) = ApiCommonData::Load::TuningConfig::Utils::getDbLoginInfo($instance, $propfile, $schema, $password);


my $PROJECT_HOME = $ENV{PROJECT_HOME};

my $dbh = ApiCommonData::Load::TuningConfig::Utils::getDbHandle($instance, $schema, $password);

$|=1;

my $projectQuery = $dbh->prepare(<<SQL);
  select project_id, lower(project_id) as lower_project_id
  from (select distinct project_id from apidbtuning.SequenceAttributes)
SQL

my $TEMPDIR = tempdir( CLEANUP => 1 );


mkdir "$TEMPDIR/dsp";
mkdir "$TEMPDIR/etc";


my $presentersProjectBase = "EuPathPresenters";

my $globalXmlFile = "global.xml";
my $globalXmlPath = "$TEMPDIR/dsp/$globalXmlFile";

my $dtdFile = "datasetPresenters.dtd";
my $dtdPath = "$TEMPDIR/dsp/$dtdFile";

my $refFile = "datasetReferences.tab";
my $refPath = "$TEMPDIR/etc/$refFile";

my $linksFile = "datasetLinks.xml";
my $linksPath = "$TEMPDIR/etc/$linksFile";


if($report) {
    system("cp $PROJECT_HOME/ApiCommonShared/Model/lib/xml/datasetPresenters/$globalXmlFile $globalXmlPath");
    system("cp $PROJECT_HOME/$presentersProjectBase/Model/lib/xml/datasetPresenters/$dtdFile $dtdPath");
    system("cp $PROJECT_HOME/ApiCommonShared/Model/lib/xml/datasetPresenters/$refFile $refPath");
    system("cp $PROJECT_HOME/ApiCommonShared/Model/lib/xml/datasetPresenters/$linksFile $linksPath");
}
else {
  system("svn export --non-interactive --trust-server-cert https://www.cbil.upenn.edu/svn/apidb/ApiCommonShared/${svnBranch}/Model/lib/xml/datasetPresenters/$globalXmlFile $globalXmlPath");
  system("svn export --non-interactive --trust-server-cert https://www.cbil.upenn.edu/svn/apidb/$presentersProjectBase/${svnBranch}/Model/lib/xml/datasetPresenters/$dtdFile $dtdPath");
  system("svn export --non-interactive --trust-server-cert https://www.cbil.upenn.edu/svn/apidb/ApiCommonShared/${svnBranch}/Model/lib/xml/datasetPresenters/$refFile $refPath");
  system("svn export --non-interactive --trust-server-cert https://www.cbil.upenn.edu/svn/apidb/ApiCommonShared/${svnBranch}/Model/lib/xml/datasetPresenters/$linksFile $linksPath");
}


$projectQuery->execute() or die "getting a list of project IDs";
my @presenterFiles;

while (my ($project, $lowerProject) = $projectQuery->fetchrow_array()) {
  if($project eq "FungiDB") {
    $presentersProjectBase = "FungiDBPresenters";
  }

  my $projectXmlFile = "${project}.xml";
  my $projectXmlPath = "$TEMPDIR/dsp/$projectXmlFile";

  if($report) {
    system("cp $PROJECT_HOME/$presentersProjectBase/Model/lib/xml/datasetPresenters/${projectXmlFile} $projectXmlPath");
  }
  else {
    system("svn export --non-interactive --trust-server-cert https://www.cbil.upenn.edu/svn/apidb/$presentersProjectBase/${svnBranch}/Model/lib/xml/datasetPresenters/${projectXmlFile} $projectXmlPath");
  }

  unless(-e $projectXmlPath) {
    die "Dataset Presenter file $projectXmlPath could not be found.\n";
  }
}

$projectQuery->finish();


my $contactsXmlFile = "contacts.xml";
my $contactsXmlPath = "$TEMPDIR/etc/$contactsXmlFile";

if($report) {
  system("cp $PROJECT_HOME/$presentersProjectBase/Model/lib/xml/datasetPresenters/contacts/$contactsXmlFile $contactsXmlPath");
}
else {
  system("svn export --non-interactive --trust-server-cert https://www.cbil.upenn.edu/svn/apidb/$presentersProjectBase/${svnBranch}/Model/lib/xml/datasetPresenters/contacts/$contactsXmlFile $contactsXmlPath");
}

if($report) {
  $suffix = 1234;
}

my $command = "presenterWriteToDb -presentersDir $TEMPDIR/dsp -contactsXmlFile $contactsXmlPath -tuningPropsXmlFile $propfile -instance $instance -suffix $suffix -defaultInjectorClassesFile $refPath -defaultHyperLinksFile $linksPath";

if($report) {
  $command = $command . " -report";
}

my $systemResult = system($command);

$dbh->disconnect();

unless($systemResult / 256 == 0) {
  die "Failed Running Program";
}




