#!/usr/bin/perl

use strict;
use lib $ENV{GUS_HOME} . "/lib/perl";
use Getopt::Long;
use File::Temp qw/ tempfile /;
use CBIL::Util::Utils;
use CBIL::Util::PropertySet;
use JSON;
use DBI;
use DBD::Oracle;
use Data::Dumper;

my ($help,$dataDir,$searchFile);

&GetOptions('help|h' => \$help,
            'dataDir=s' => \$dataDir,
	    'searchFile=s' => \$searchFile
            );

foreach(($dataDir,$searchFile)) {
    unless(defined $_) {
	&usage();
	die "You need to input the required parameters\n";
    }
}

my $unidbSite = "markhick.veupathdb.org/eupathdb.markhick";

my $projects = &getProjects();
my $searches = &getSearches($searchFile);
$projects->{UniDB} = $unidbSite;
&printIntro($unidbSite);

my $numSearchesTotal = 0;
my $numSearchesError = 0;
#my $numSearchesNoUrl = 0;
#my $numSearchesDownloadError = 0;

foreach my $search (keys %$searches) {
    my (%componentKeys,%veupathKeys,%unidbKeys);
    $numSearchesTotal++;
    print "ORIGINAL SEARCH: $search\nNUMBER OF UNIQUE RESULTS:\n";
    foreach my $project (sort keys %$projects) {
	print "$project: ";
	my $projectSearch = &editSearch($search,$projects->{$project});
	next if ($projectSearch eq "0");
	my $results = &getResults($projectSearch);
	next if ($results eq "0");
	my $count=0;
	if ($project eq "UniDB") {
	    $count = &getKeys($results,\%unidbKeys);
	} elsif ($project eq "VEuPathDB") {
	    $count = &getKeys($results,\%veupathKeys);
	} else {
	    $count = &getKeys($results,\%componentKeys);
	}
	next if ($count == -1);
	print "$count\n";
    }
    $numSearchesError += &compareKeys(\%unidbKeys,\%veupathKeys,\%componentKeys);
}

&printSummary($numSearchesTotal,$numSearchesError);

exit;




sub printIntro {
    my ($unidbSite) = @_;
    print "\nComparing searches between all sites and UniDb site: $unidbSite\n";
    my $time = localtime();
    print "Started $time\n\n";
}

sub getSearches {
    my ($file) = @_;
    my %searches;
    open(IN, $file) or die "cannot open download file '$file': $!";
    while (my $line = <IN>) {
	if ($line =~ /^http/) {
	    &cleanHtml(\$line);
	    my $shortName = &getShortName($line);
	    $searches{$line} = $shortName;
	}   
    }
    close IN;
    return \%searches;
}

sub cleanHtml {
    my ($htmlRef) = @_;
    chomp($$htmlRef);
    $$htmlRef =~ s/\r//g;
    $$htmlRef =~ s/%7B/{/g;
    $$htmlRef =~ s/%7D/}/g;
    $$htmlRef =~ s/%22/"/g;
    $$htmlRef =~ s/%3A/:/g;
    $$htmlRef =~ s/%5B/[/g;
    $$htmlRef =~ s/%5D/]/g;
    $$htmlRef =~ s/%2C/,/g;
#    $$htmlRef =~ s/%20/ /g;
    $$htmlRef =~ s/%2F/\//g;
    $$htmlRef =~ s/%2F/%/g;
    $$htmlRef =~ s/%2B/+/g;
    $$htmlRef =~ s/\"numRecords\":[0-9]+,/\"numRecords\":-1,/;
}

sub getShortName {
    my ($name) = @_;
    if ($name =~ /searches\/([^\/]+)\/reports/) {
	return $1;
    } else {
	return $name;
    }
}

sub getResults {
    my ($search) = @_;
    my $cmd = "curl --max-time 600 --silent --show-error -g '$search'";
    my $json = eval {&runCmd($cmd)};
    if (! $json) {
	print "ERROR: Unable to access url.\n";
	return 0;
    }
    my $results = eval {decode_json($json)};
    if ($results) {
	return $results;
    } else {
	print "ERROR: $json\n";
	return 0;
    }
}

sub editSearch {
    my ($search,$site) = @_;
    if ($search =~ /^https?:\/\/([^\/]+\/[^\/]+)\//) {
	my $original = $1;
	$search =~ s/$original/$site/;
	return $search;
    } else {
	print "ERROR: Was not able to change url of this search\n";
	return 0;
    }
}

sub compareKeys {
    my ($unidbKeys,$veupathKeys,$componentKeys) = @_;
    my $numUni = keys %$unidbKeys;
    my $numVeu = keys %$veupathKeys;
    my $numComp = keys %$componentKeys;
    if ($numUni == 0 && $numComp == 0) {
	print "***FAIL: There are 0 results for UniDB and 0 for the component sites. Need to modify test to produce result.\n\n";
	return 1;
    } elsif ($numUni != $numComp) {
	print "***FAIL: There are $numUni unique results for UniDB but $numComp for the component sites.\n\n";
	return 1;
    } elsif ($numUni != $numVeu) {  
	print "***SUCCESS.  Warning: There are $numUni unique results for UniDB but $numVeu for the VEuPathDB site.\n\n";
	return 0;
    } else {
	print "***SUCCESS\n\n";
	return 0;
    }
}
 
sub getKeys {
    my ($results,$keys) = @_;
    my %unique;
    if (exists $results->{meta}->{totalCount}) {
	foreach my $record (@{$results->{records}}) {
	    $keys->{$record->{attributes}->{primary_key}}=1;
	    $unique{$record->{attributes}->{primary_key}}=1;
	}
	my $count = keys %unique;
	return $count;
    } else {
	print "ERROR: Cannot obtain results.\n";
	print Dumper $results;
	return -1;
    }
}

sub printSummary {
    my ($numSearchesTotal,$numSearchesError) = @_;
    print "\nSUMMARY\n";
    print "Total searches tested: $numSearchesTotal\n";
    print "Searches that failed on UniDB: $numSearchesError\n";
    my $time = localtime();
    print "Finished $time\n\n";
}

sub getProjects {
    my %projects = (
        MicrosporidiaDB => "microsporidiadb.org/micro",
        ToxoDB => "toxodb.org/toxo",
        AmoebaDB => "amoebadb.org/amoeba",
        CryptoDB => "cryptodb.org/cryptodb",
        FungiDB => "fungidb.org/fungidb",
        GiardiaDB => "giardiadb.org/giardiadb",
    	PiroplasmaDB => "piroplasmadb.org/piro",
    	PlasmoDB => "plasmodb.org/plasmo",
    	TrichDB => "trichdb.org/trichdb",
    	TriTrypDB => "tritrypdb.org/tritrypdb",
    	HostDB => "hostdb.org/hostdb",
    	SchistoDB => "schistodb.net/schisto",
    	VectorBase => "vectorbase.org/vectorbase",
	VEuPathDB => "veupathdb.org/veupathdb"
    );
    return \%projects;
}


sub getPostText {
    my ($type,$organismName) = @_;

    my $postText;
    if ($type eq "organism") {
	$postText = "'{\"searchConfig\": {\"parameters\": {},\"wdkWeight\": 10},\"reportConfig\": {\"attributes\": [\"primary_key\",\"name_for_filenames\",\"orthomcl_abbrev\"],\"includeHeader\": true,\"attachmentType\": \"text\"}}'";
    } elsif ($type eq 'ec') {
	$postText = "'{\"searchConfig\": {\"parameters\": {\"organism\": \"[\\\"$organismName\\\"]\"},\"wdkWeight\": 10},\"reportConfig\": {\"attributes\": [\"primary_key\",\"source_id\",\"ec_numbers\",\"ec_numbers_derived\"],\"includeHeader\": true,\"attachmentType\": \"text\",\"applyFilter\": false}}'";
    } else {
	die "Type must be 'organism' or 'ec' for getPostText.\n";
    }

    return $postText;
}


sub runOrganismWgetCmds {
    my ($baseUrls,$postText,$dataDir) = @_;

    # one file for each genomic project
    my %organismFiles;
    foreach my $project (keys %{$baseUrls}) {
	my $downloadFile = $dataDir."/".$project."_organisms.txt";
	$organismFiles{$project} = $downloadFile;
	my $logFile = $dataDir."/".$project."_organisms_wget.log";
	my $url = $baseUrls->{$project};
	my $cmd = "wget --output-file=$logFile --output-document=$downloadFile --post-data $postText --header 'content-type: application/json' \"$url\"";
	print "$cmd\n\n";
	system($cmd);
	die "The organism file $downloadFile obtained with wget is empty!\n" if (-s $downloadFile == 0 && $downloadFile !~ /SchistoDB/);
    }

    # one file for uniprot proteomes
    my $cmd = "wget --output-file='$dataDir/uniprot_wget.log' --output-document=$dataDir/UniprotProteomes \"ftp://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/reference_proteomes/README\"";
    print "$cmd\n\n";
    system($cmd);
    die "Download file $dataDir/UniprotProteomes obtained with wget is empty!\n" if (-s "$dataDir/UniprotProteomes" == 0);

    return \%organismFiles;
}

sub runEcWgetCmds {
    my ($ecBaseUrls,$organismFiles,$dataDir) = @_;

    my $numEcFiles = 0;
    foreach my $project (keys %{$ecBaseUrls}) {
	my $organisms = readOrganismFile($organismFiles->{$project});
	my $totalFileSize=0;
	foreach my $abbrev (keys %{$organisms} ) {
	    my $downloadFile = $dataDir."/".$abbrev."_ec.txt";
	    my $logFile = $dataDir."/".$abbrev."_ec_wget.log";
	    my $postText = getPostText("ec",$organisms->{$abbrev});
	    my $url = $ecBaseUrls->{$project};
	    my $cmd = "wget --output-file=$logFile --output-document=$downloadFile --post-data $postText --header 'content-type: application/json' \"$url\"";
	    print "$cmd\n\n";
	    system($cmd);
	    $totalFileSize += (-s $downloadFile);
	    $numEcFiles++;
	}
	die "All of the EC files downloaded from $project are empty! Directory: $dataDir\n" if ($totalFileSize == 0 && $project !~ /SchistoDB/);
    }
    return $numEcFiles;
}

sub readOrganismFile {
    my ($file) = @_;

    my %organisms;
    open(IN, $file) or die "cannot open download file '$file': $!";    
    while (my $line =<IN>) {
	chomp $line;
	$line =~ s/<i>//g;
	$line =~ s/<\/i>//g;
	next if ($line =~ /^Organism/);
	next unless ($line =~ /^[A-Za-z]/);
	my @fields = split("\t",$line); 
	$organisms{$fields[2]} = $fields[0];
    }

    close IN;
    return \%organisms;
}

sub usage {
  print "qaSearchesUniDb --dataDir=s --searchFile=s\n";
}

1;
