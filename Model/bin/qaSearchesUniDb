#!/usr/bin/perl

use strict;
use lib $ENV{GUS_HOME} . "/lib/perl";
use Getopt::Long;
use File::Temp qw/ tempfile /;
use CBIL::Util::Utils;
use CBIL::Util::PropertySet;
use JSON;
use DBI;
use DBD::Oracle;
use Data::Dumper;

my ($help,$searchFile,$reportFile,$reportFileDetailed);

&GetOptions('help|h' => \$help,
            'reportFile=s' => \$reportFile,
            'reportFileDetailed=s' => \$reportFileDetailed,
	    'searchFile=s' => \$searchFile
            );

foreach(($reportFile,$reportFileDetailed,$searchFile)) {
    unless(defined $_) {
	&usage();
	die "You need to input the required parameters\n";
    }
}

my $unidbSite = "beta.veupathdb.org/veupathdb.beta";

my $projects = &getProjects();
my $searches = &getSearches($searchFile);
$projects->{UniDB} = $unidbSite;
my ($logFh,$logMoreFh) = &printIntro($unidbSite,$reportFile,$reportFileDetailed);

my $numSearchesTotal = 0;
my $numSearchesError = 0;
#my $numSearchesNoUrl = 0;
#my $numSearchesDownloadError = 0;

foreach my $search (keys %$searches) {
    my (%componentKeys,%veupathKeys,%unidbKeys);
    $numSearchesTotal++;
    my $unidbRunTime = 0;
    &printLog("ORIGINAL SEARCH: $search\nNUMBER OF UNIQUE RESULTS:\n",$logFh,$logMoreFh);
    foreach my $project (sort keys %$projects) {
	&printLog("$project: ",$logFh,$logMoreFh);
	my $projectSearch = &editSearch($search,$projects->{$project});
	next if ($projectSearch eq "0");
	my ($results,$runTime) = &getResults($projectSearch,$logFh,$logMoreFh);
	next if ($results eq "0");

	my $count=0;
	if ($project eq "UniDB") {
	    $count = &getKeys($results,\%unidbKeys,$runTime,$logFh,$logMoreFh);
	    $unidbRunTime = $runTime;
	} elsif ($project eq "VEuPathDB") {
	    $count = &getKeys($results,\%veupathKeys,$runTime,$logFh,$logMoreFh);
	} else {
	    $count = &getKeys($results,\%componentKeys,$runTime,$logFh,$logMoreFh);
	}
	next if ($count == -1);
	&printLog("$count ($runTime seconds)\n",$logFh,$logMoreFh);
    }
    $numSearchesError += &testKeysAndTime(\%unidbKeys,\%veupathKeys,\%componentKeys,$unidbRunTime,$logFh,$logMoreFh);
}

&printSummary($numSearchesTotal,$numSearchesError,$logFh,$logMoreFh);

exit;




sub printIntro {
    my ($unidbSite,$reportFile,$reportFileDetailed) = @_;
    open(my $logFh,">",$reportFile) or die "cannot open for writing '$reportFile': $!";
    open(my $logMoreFh,">",$reportFileDetailed) or die "cannot open for writing '$reportFileDetailed': $!";
    my $time = localtime();
    &printLog("\nComparing searches between all sites and UniDb site: $unidbSite\n",$logFh,$logMoreFh);
    &printLog("Started $time\n\n",$logFh,$logMoreFh);
    return ($logFh,$logMoreFh);
}

sub printLog {
    my ($text,$logFh,$logMoreFh) = @_;
    print $logFh $text if ($logFh != 0);
    print $logMoreFh $text if ($logMoreFh != 0);
}

sub getSearches {
    my ($file) = @_;
    my %searches;
    open(IN, $file) or die "cannot open download file '$file': $!";
    while (my $line = <IN>) {
	if ($line =~ /^http/) {
	    &cleanHtml(\$line);
	    my $shortName = &getShortName($line);
	    $searches{$line} = $shortName;
	}   
    }
    close IN;
    return \%searches;
}

sub cleanHtml {
    my ($htmlRef) = @_;
    chomp($$htmlRef);
    $$htmlRef =~ s/\r//g;
#     $$htmlRef =~ s/%7B/{/g;
#     $$htmlRef =~ s/%7D/}/g;
#     $$htmlRef =~ s/%22/"/g;
#     $$htmlRef =~ s/%3A/:/g;
#     $$htmlRef =~ s/%5B/[/g;
#     $$htmlRef =~ s/%5D/]/g;
#     $$htmlRef =~ s/%2C/,/g;
# #    $$htmlRef =~ s/%20/ /g;
#     $$htmlRef =~ s/%2F/\//g;
#     $$htmlRef =~ s/%2F/%/g;
#     $$htmlRef =~ s/%2B/+/g;
     $$htmlRef =~ s/\"numRecords\":[0-9]+,/\"numRecords\":20,/;
}

sub getShortName {
    my ($name) = @_;
    if ($name =~ /searches\/([^\/]+)\/reports/) {
	return $1;
    } else {
	return $name;
    }
}

sub getResults {
    my ($search,$logFh,$logMoreFh) = @_;
    my $cmd = "curl --max-time 600 --silent --show-error -g '$search'";
    my $startTime = time();
    my $json = eval {&runCmd($cmd)};
    my $endTime = time();
    my $totalTime = $endTime - $startTime;
    if (! $json) {
	&printLog("0 ($totalTime seconds)\n",$logFh,0);
	&printLog("0 ($totalTime seconds) (ERROR: Unable to access url.)\n",0,$logMoreFh);
	return(0,0);
    }
    my $results = eval {decode_json($json)};
    if ($results) {
	return ($results,$totalTime);
    } else {
	&printLog("0 ($totalTime seconds)\n",$logFh,0);
	&printLog("0 ($totalTime seconds) (ERROR: $json)\n",0,$logMoreFh);
	return(0,0);
    }
}

sub editSearch {
    my ($search,$site) = @_;
    if ($search =~ /^https?:\/\/([^\/]+\/[^\/]+)\//) {
	my $original = $1;
	$search =~ s/$original/$site/;
	return $search;
    } else {
	print "ERROR: Was not able to change url of this search\n";
	return 0;
    }
}

sub testKeysAndTime {
    my ($unidbKeys,$veupathKeys,$componentKeys,$unidbRunTime,$logFh,$logMoreFh) = @_;
    my $secondsLimit = 15;
    my $numUni = keys %$unidbKeys;
    my $numVeu = keys %$veupathKeys;
    my $numComp = keys %$componentKeys;
    if ($numUni != $numVeu) {
	&printLog("(Warning: There are $numUni unique results for UniDB but $numVeu for the VEuPathDB site.)\n",$logFh,$logMoreFh);
    }
    if ($numUni == 0 && $numComp == 0) {
	&printLog("***FAIL: There are 0 results for UniDB and 0 for the component sites. Need to modify test to produce result.\n\n",$logFh,$logMoreFh);
	return 1;
    } elsif ($numUni != $numComp) {
	&printLog("***FAIL: There are $numUni unique results for UniDB but $numComp for the component sites.\n\n",$logFh,$logMoreFh);
	return 1;
    } elsif ($unidbRunTime > $secondsLimit) {
	&printLog("***FAIL: The UniDB search ran in $unidbRunTime seconds, which is greater than the $secondsLimit second limit.\n\n",$logFh,$logMoreFh);
	return 1;
    } else {
	&printLog("***SUCCESS\n\n",$logFh,$logMoreFh);
	return 0;
    }
}
 
sub getKeys {
    my ($results,$keys,$runTime,$logFh,$logMoreFh) = @_;
    my %unique;
    if (exists $results->{meta}->{totalCount}) {
	foreach my $record (@{$results->{records}}) {
	    $keys->{$record->{attributes}->{primary_key}}=1;
	    $unique{$record->{attributes}->{primary_key}}=1;
	}
	my $count = keys %unique;
	return $count;
    } else {
	&printLog("0 ($runTime seconds)\n",$logFh,0);
	&printLog("0 ($runTime seconds) (ERROR: Cannot obtain results.)\n",0,$logMoreFh);
	print $logMoreFh Dumper $results;
	&printLog("\n",0,$logMoreFh);
	return -1;
    }
}

sub printSummary {
    my ($numSearchesTotal,$numSearchesError,$logFh,$logMoreFh) = @_;
    &printLog("\nSUMMARY\n",$logFh,$logMoreFh);
    &printLog("Total searches tested: $numSearchesTotal\n",$logFh,$logMoreFh);
    &printLog("Searches that failed on UniDB: $numSearchesError\n",$logFh,$logMoreFh);
    my $time = localtime();
    &printLog("Finished $time\n\n",$logFh,$logMoreFh);
    close $logFh;
    close $logMoreFh;
}

sub getProjects {
    my %projects = (
        MicrosporidiaDB => "microsporidiadb.org/micro",
        ToxoDB => "toxodb.org/toxo",
        AmoebaDB => "amoebadb.org/amoeba",
        CryptoDB => "cryptodb.org/cryptodb",
        FungiDB => "fungidb.org/fungidb",
        GiardiaDB => "giardiadb.org/giardiadb",
    	PiroplasmaDB => "piroplasmadb.org/piro",
    	PlasmoDB => "plasmodb.org/plasmo",
    	TrichDB => "trichdb.org/trichdb",
    	TriTrypDB => "tritrypdb.org/tritrypdb",
    	HostDB => "hostdb.org/hostdb",
    	SchistoDB => "schistodb.net/schisto",
    	VectorBase => "vectorbase.org/vectorbase",
	VEuPathDB => "veupathdb.org/veupathdb"
    );
    return \%projects;
}

sub usage {
  print "qaSearchesUniDb --dataDir=s --searchFile=s --reportFile=s --reportFileDetailed=s\n";
}

1;
