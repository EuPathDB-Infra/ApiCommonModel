#!/usr/bin/perl

use strict;
use lib $ENV{GUS_HOME} . "/lib/perl";
use JSON;
use ApiCommonModel::Model::JBrowseUtil;
use Data::Dumper;

my ($organismAbbrev, $projectName) = @ARGV;

my $jbrowseUtil = ApiCommonModel::Model::JBrowseUtil->new({projectName => $projectName});
my $dbh = $jbrowseUtil->getDbh();   

my $nffSh = $dbh->prepare("select name_for_filenames from apidb.organism where abbrev = '$organismAbbrev'");
$nffSh->execute();
my ($publicAbbrev) = $nffSh->fetchrow_array();
$nffSh->finish();

my $result = {"tracks" => [] };

my %datasets;
my $dsSh = $dbh->prepare("select dsp.display_name, dsp.name , dp.value as hasCnvData
from apidbtuning.datasetpresenter dsp, apidbtuning.datasetproperty dp
where dsp.name like '${organismAbbrev}_HTS_SNP_%_RSRC'
and dsp.DATASET_PRESENTER_ID = dp.DATASET_PRESENTER_ID
and dp.property = 'hasCNVData'");

$dsSh->execute();
while(my ($studyDisplayName, $dsName, $hasCnvData) = $dsSh->fetchrow_array()) {
  my ($study) = $dsName =~ /${organismAbbrev}_HTS_SNP_(.+)_RSRC$/;

  my $sql = "select ds.name 
             from apidb.datasource ds
             where ds.name like '${organismAbbrev}_${study}%HTS_SNPSample_RSRC'";

  my $sh = $dbh->prepare($sql);
  $sh->execute();

  while(my ($sampleDataset) = $sh->fetchrow_array()) {

    my ($sampleName) = $sampleDataset =~ /${study}_(.+)_HTS_SNPSample_RSRC$/;

    my $bamUrl = "/a/service/jbrowse/store?data=$publicAbbrev/bam/$study/$sampleName/result.bam"; 

    my $copyNumberDataset = "${organismAbbrev}_copyNumberVariations_${study}_RSRC";
    my $cnvBWUrl = "/a/service/jbrowse/store?data=$publicAbbrev/bigwig/$copyNumberDataset/$sampleName.bw"; 

    my $bigwigUrl = "/a/service/jbrowse/store?data=$publicAbbrev/bigwig/${study}/${sampleName}/result.bw";

    my $alignment = {storeClass => "JBrowse/Store/SeqFeature/BAM",
                     urlTemplate => $bamUrl,
                     key => "$sampleName Coverage and Alignments",
                     label => "$sampleName Coverage and Alignments",
                     type => "JBrowse/View/Track/Alignments2",
                     category => "Genetic Variation",
                     yScalePosition => "left",
                     histograms => {storeClass => "JBrowse/Store/SeqFeature/BigWig",
                                    urlTemplate => $bigwigUrl, 
                                    color => "black",
                                    min => 0,
                                    max => 500,
                     },
                     metadata => {
                       subcategory => 'DNASeq',
                       dataset => $studyDisplayName,
                       track => 'Coverage (Read Alignments zoomed)',
                     },
    };
    
    
    my $cnvCoverage = {storeClass => "JBrowse/Store/SeqFeature/BigWig",
                       urlTemplate => $cnvBWUrl,
                       yScalePosition => "left",
                       key => "$sampleName Coverage normalised to chromosome copy number (ploidy)",
                       label => "$sampleName Coverage normalised to chromosome copy number (ploidy)",
                       type => "JBrowse/View/Track/Wiggle/XYPlot",
                       category => "Genetic Variation",
                       min_score => 0,
                       autoscale => "local",
                       style => {
                         "pos_color"         => "black",
                         "clip_marker_color" =>  "red",
                       },
                       metadata => {
                         subcategory => 'DNASeq',
                         dataset => $studyDisplayName,
                         track => 'Coverage (ploidy Normalized)',
                       },
    };
    
    push @{$result->{tracks}}, $alignment;
    push @{$result->{tracks}}, $cnvCoverage if(lc $hasCnvData eq "true");;
  }

}
$dsSh->finish();


print encode_json($result);

$dbh->disconnect();

1;

