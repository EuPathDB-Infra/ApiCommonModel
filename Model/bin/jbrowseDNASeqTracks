#!/usr/bin/perl

use strict;
use lib $ENV{GUS_HOME} . "/lib/perl";
use JSON;
use ApiCommonModel::Model::JBrowseUtil;
use Data::Dumper;
use URI::Escape;


my ($organismAbbrev, $projectName) = @ARGV;

my $jbrowseUtil = ApiCommonModel::Model::JBrowseUtil->new({projectName => $projectName, organismAbbrev => $organismAbbrev, fileName => "_dnaSeqCache.json"});

# we're done if we can get from cache file
if($jbrowseUtil->printFromCache()) {
  exit 0;
}
open(CACHE, "> " . $jbrowseUtil->getCacheFile()) or die "Cannot open file " . $jbrowseUtil->getCacheFile() . " for writing: $!";

my $dbh = $jbrowseUtil->getDbh();   

my $nffSh = $dbh->prepare("select name_for_filenames from apidb.organism where abbrev = '$organismAbbrev'");
$nffSh->execute();
my ($publicAbbrev) = $nffSh->fetchrow_array();
$nffSh->finish();

my $result = {"tracks" => [] };

my %datasets;
my $dsSh = $dbh->prepare("select dsp.display_name, dsp.name , dp.value as hasCnvData, dsp.short_attribution, dsp.summary
from apidbtuning.datasetpresenter dsp, apidbtuning.datasetproperty dp
where dsp.name like '${organismAbbrev}_HTS_SNP_%_RSRC'
and dsp.DATASET_PRESENTER_ID = dp.DATASET_PRESENTER_ID
and dp.property = 'hasCNVData'");

$dsSh->execute();
while(my ($studyDisplayName, $dsName, $hasCnvData, $shortAttribution, $summary) = $dsSh->fetchrow_array()) {
  $summary =~ s/\n/ /g;
  my ($study) = $dsName =~ /${organismAbbrev}_HTS_SNP_(.+)_RSRC$/;

  my $sql = "select ds.name 
             from apidb.datasource ds
             where ds.name like '${organismAbbrev}_${study}%HTS_SNPSample_RSRC'";

  my $sh = $dbh->prepare($sql);
  $sh->execute();

  while(my ($sampleDataset) = $sh->fetchrow_array()) {

    my ($sampleName) = $sampleDataset =~ /${study}_(.+)_HTS_SNPSample_RSRC$/;


    my $baseUrl = "/a/service/jbrowse/store?data=";


    my $bamUrl = $baseUrl . uri_escape_utf8("$publicAbbrev/bam/$study/$sampleName/result.bam"); 

    my $copyNumberDataset = "${organismAbbrev}_copyNumberVariations_${study}_RSRC";
    my $cnvBWUrl = $baseUrl . uri_escape_utf8("$publicAbbrev/bigwig/$copyNumberDataset/$sampleName.bw"); 

    my $bigwigUrl = $baseUrl . uri_escape_utf8("$publicAbbrev/bigwig/${study}/${sampleName}/result.bw");

    my $alignment = {storeClass => "JBrowse/Store/SeqFeature/BAM",
                     urlTemplate => $bamUrl,
                     chunkSizeLimit => 50000000,
                     key => "$sampleName Coverage and Alignments",
                     label => "$sampleName Coverage and Alignments",
                     type => "JBrowse/View/Track/Alignments2",
                     category => "Genetic Variation",
                     yScalePosition => "left",
                     histograms => {storeClass => "JBrowse/Store/SeqFeature/BigWig",
                                    urlTemplate => $bigwigUrl, 
                                    color => "black",
                                    min => 0,
                                    max => 500,
                     },
                     metadata => {
                       subcategory => 'DNA-Seq',
                       dataset => $studyDisplayName,
                       trackType => 'Coverage (Read Alignments zoomed)',
                       attribution => $shortAttribution,
                       description => $summary,
                     },
                     fmtMetaValue_Dataset => "function() { return datasetLinkByDatasetName('${dsName}', '${studyDisplayName}'); }",
                     fmtMetaValue_Description => "function() { return datasetDescription('${summary}', ''); }"
    };
    
    
    my $cnvCoverage = {storeClass => "JBrowse/Store/SeqFeature/BigWig",
                       urlTemplate => $cnvBWUrl,
                       yScalePosition => "left",
                       key => "$sampleName Coverage normalised to chromosome copy number (ploidy)",
                       label => "$sampleName Coverage normalised to chromosome copy number (ploidy)",
                       type => "JBrowse/View/Track/Wiggle/XYPlot",
                       category => "Genetic Variation",
                       min_score => 0,
                       autoscale => "local",
                       style => {
                         "pos_color"         => "black",
                         "clip_marker_color" =>  "red",
                       },
                       metadata => {
                         subcategory => 'DNA-Seq',
                         dataset => $studyDisplayName,
                         trackType => 'Coverage (ploidy Normalized)',
                         attribution => $shortAttribution,
                         description => $summary,
                       },
                       fmtMetaValue_Dataset => "function() { return datasetLinkByDatasetName('${dsName}', '${studyDisplayName}'); }",
                       fmtMetaValue_Description => "function() { return datasetDescription('${summary}', ''); }"

    };
    
    push @{$result->{tracks}}, $alignment;
    push @{$result->{tracks}}, $cnvCoverage if(lc $hasCnvData eq "true");;
  }

}
$dsSh->finish();


$dbh->disconnect();

print encode_json($result);
print CACHE encode_json($result);
close CACHE;

1;

