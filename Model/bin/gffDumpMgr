#! /usr/bin/perl
use lib "$ENV{GUS_HOME}/lib/perl";
use Getopt::Long;
use strict;

my ($config,$restartOrg,$verbose);
&GetOptions("configFile=s" => \$config,
	    "restartOrg=s" => \$restartOrg,
	    "verbose!" => \$verbose);

$| = 1;



&usage unless ($config);

die ("The config file $config doesn't exist or is empty") unless (-s $config);

#config Ex:
#project=TriTrypDB  workflowVersion=l8
#org=LinfantumJPCM5|Leishmania infantum JPCM5
#org=TbruceiTREU927|Trypanosoma brucei TREU927
#//


&parseConfig;

sub parseConfig {

  open (CONFIG,$config) || die "Can't open $config for reading\n";

  my $date = `date`; chomp($date);

  print STDERR "$date\tParsing config file,$config.\n\n";

  my $startTime = time;

  my $project;

  my %config;

  my @confArr;

  my %orgHsh;

  my $organism;

  my $restartFlag = 0;

  while(<CONFIG>) {

    chomp;
    next if ($_ =~ /^\s*$/);

    s/\s*=\s*/=/g;

    s/\s*$//g;

    if ($_ =~ /project=(\S+)/){

      $project = $1;

      if ($_ =~ /workflowVersion=(\S+)/){$config{$project}{'workflowVersion'}=$1;}

    }
    elsif ($_ =~ /org=(.+)/) {

      $organism = $1;

      if ($restartOrg && $organism !~ /$restartOrg/ && !$restartFlag) {

	$organism = "";
	next;
      }
      if ($restartOrg && $organism =~ /$restartOrg/) {

	$restartFlag = 1;
      }

      push (@{$config{$project}{'organisms'}}, $organism);

    }
    elsif ($_ =~ /\/\//){

      my %copy = %config;

      push (@confArr,\%copy);

      %config = ();

      $organism = "";
    }
    else {
      die "There is an unacceptable line in the config file:\n $_\n";
    }
  }

  my $endTime = time;

  my $totTime = $endTime - $startTime;

  print STDERR "DONE:\tParse config file $config\t$totTime sec\n\n";

  &validate(\@confArr, \%orgHsh);

  &processConfig(\@confArr, \%orgHsh);

  $endTime = time;

  $totTime = $endTime - $startTime;

  print STDERR "DONE: Total run time\t$totTime sec\n";

}


sub validate {
  my ($confArr, $orgHsh ) = @_;

  my $startTime = time;

  my @errors;

  foreach my $projectHsh ( @{$confArr}) {

    foreach my $project (keys %{$projectHsh}) {

      push (@errors, "$project : project name") if ($project !~ /\w+DB/);
      push (@errors, "$project : workflowVersion") if ($projectHsh->{$project}->{'workflowVersion'} !~ /[\d]+/);
      foreach my $org (@{$projectHsh->{$project}->{'organisms'}}) {
	push(@errors,"$project : orgs : $org") if ($org != /\w+\s*\|\s*[\w\s]+/);
      }
    }
  }

  my $endTime = time;

  my $totTime = $endTime - $startTime;

  print STDERR "DONE: Validate\t$totTime sec\n\n";

  if (scalar @errors >= 1) {

    foreach my $error (@errors) {
      print STDERR "ERROR - $error\n";
    }

    die "Please fix the config file error(s) before running\n";
  }

}


sub processConfig {

  my ($confArr,$orgHsh) = @_;

  foreach my $projectHsh (@{$confArr}) {

    foreach my $project (keys %{$projectHsh}) {

    my $cmd = "wdkCache -model $project -recreate";

    print STDERR "Running cmd:\t$cmd\n\n";

    `$cmd`;

    my $retCode = $?>>8;

    die("Failed with status $retCode running") if ($retCode);

      foreach my $org (@{$projectHsh->{$project}->{'organisms'}}) {

         &runGffDump($project, $org, $projectHsh->{$project}->{'workflowVersion'});
      }
    }
  }
}


sub runGffDump{

  my ($project,$org,$workflowVersion) = @_;

    my $startTime = time;

    my ($organism,$taxonName) = split(/\|/,$org);

    my $dir = "/eupath/data/apiSiteFilesStaging/${project}/${workflowVersion}/real/downloadSite/${project}/release-CURRENT/${organism}/gff/data/";

    my $cmd = "gffDump -model $project -organism '$taxonName' -dir $dir >> ${project}_GffDump.err 2>> ${project}_GffDump.log";

    print STDERR "Running cmd:\t$cmd\n\n";

    `$cmd`;

    my $retCode = $?>>8;

    die("Failed with status $retCode running") if ($retCode);

    my $endTime = time;

    my $totTime = $endTime - $startTime;

    print STDERR "DONE:\t${project} ${organism} File\t$totTime sec\n\n"; 


}


sub usage {

  print "gffDumpMgr --configFile  --restartOrg --verbose\n
         config file = file with the following key/value pairs in the following arrangement of lines:\n
         #config Ex:
         #project=TriTrypDB  workflowVersion=l8
         #org=LinfantumJPCM5|Leishmania infantum JPCM5
         #org=TbruceiTREU927|Trypanosoma brucei TREU927
         #//";

  exit(1);
}

