#!/usr/bin/perl

use strict;
use lib $ENV{GUS_HOME} . "/lib/perl";
use JSON;
use ApiCommonModel::Model::JBrowseUtil;
use Data::Dumper;

my $metadataBase = "metadata_unlogged";

# TODO: remove gusHome from command line arg
my ($gusHome, $organismAbbrev, $study, $projectName, $buildNumber, $webservicesDir, $hasJunctions, $intronSizeLimit) = @ARGV;

my $jbrowseUtil = ApiCommonModel::Model::JBrowseUtil->new({projectName => $projectName});
my $dbh = $jbrowseUtil->getDbh();   

my $datasetName = "${organismAbbrev}_${study}_rnaSeq_RSRC";

my $sql = "select prop.property, prop.value
from apidbtuning.datasetpresenter dsp
   , apidbtuning.datasetproperty prop
where dsp.name = '$datasetName'
and dsp.dataset_presenter_id = prop.dataset_presenter_id
union
select 'nameForFileNames', name_for_filenames from apidb.organism where abbrev = '$organismAbbrev'
";

my $sh = $dbh->prepare($sql);
$sh->execute();


my (%studyProperties);
while(my ($prop, $val) = $sh->fetchrow_array()) {
  $studyProperties{$prop} = $val;
}
$sh->finish();

my $nameForFileNames = $studyProperties{nameForFileNames};

if(lc $studyProperties{switchStrandsGBrowse} eq 'true') {
  $metadataBase = $metadataBase . "_alt";
}

# EXAMPLE:
#/var/www/Common/apiSiteFilesMirror/webServices/PlasmoDB/build-42/Pfalciparum3D7/bigwig/pfal3D7_Caro_ribosome_profiling_rnaSeq_RSRC/metadata_unlogged

my $bigWigRelativePath = "$projectName/build-$buildNumber/$nameForFileNames/bigwig/$datasetName";

my $metadataFile = "$webservicesDir/$bigWigRelativePath/$metadataBase";

open(FILE, $metadataFile) or die "Cannot open file $metadataFile for reading: $!";

my $result = {"tracks" => [] };

my ($start, $file, $displayName, $strand, $alignment);;

my @multiUrls;

while(<FILE>) {
  chomp;
  if(/^\[(.+)\]$/) {
    &addConfiguration($result, $file, $displayName, $strand, $alignment, \%studyProperties, $datasetName, $nameForFileNames, $bigWigRelativePath, \@multiUrls) if($start);
    $file = $1;
    $start = 1;
  }
  if(/^display_name\s*=\s*(.+)$/) {
    $displayName = $1;
    $displayName =~ s/^\S+ - //; #remove everything to the first " - "
  }
  if(/^alignment\s*=\s*(.+)$/) {
    $alignment = $1;
  }
  if(/^strand\s*=\s*(.+)$/) {
    $strand = $1;
  }

}
&addConfiguration($result, $file, $displayName, $strand, $alignment, \%studyProperties, $datasetName, $nameForFileNames, $bigWigRelativePath, \@multiUrls);


my @uniqueOnlyUrls = grep { $_->{alignment} eq 'unique' } @multiUrls;

my $studyDisplayName = $studyProperties{datasetDisplayName};
my $multiBigWig = {storeClass => "MultiBigWig/Store/SeqFeature/MultiBigWig",
                   urlTemplates => \@multiUrls,
                   showTooltips => "true",
                   category => "Transcriptomics",
                   key => $studyProperties{datasetDisplayName} . " Density",
                   label => $studyProperties{datasetDisplayName} . " Density",
                   type => "MultiBigWig/View/Track/MultiWiggle/MultiDensity",
                   style => {
                     pos_color => "black"
                   },
                   scale => "log",
                   metadata => {
                     subcategory => 'RNASeq',
                     dataset => $studyDisplayName,
                     track => 'Multi-Density'
                   },

};

my $uniqueMultiBigWig = {storeClass => "MultiBigWig/Store/SeqFeature/MultiBigWig",
                         urlTemplates => \@uniqueOnlyUrls,
                         showTooltips => "true",
                         category => "Transcriptomics",
                         key => $studyProperties{datasetDisplayName} . " Density - Unique",
                         label => $studyProperties{datasetDisplayName} . " Density - Unique",
                         type => "MultiBigWig/View/Track/MultiWiggle/MultiDensity",
                         style => {
                           pos_color => "black"
                         },
                         scale => "log",
                         metadata => {
                           subcategory => 'RNASeq',
                           dataset => $studyDisplayName,
                           track => 'Multi-Density'
                         },

};




push @{$result->{tracks}}, $multiBigWig;
push @{$result->{tracks}}, $uniqueMultiBigWig;

if(lc($hasJunctions) eq 'true') {
  my $junctions = {storeClass => "JBrowse/Store/SeqFeature/REST",
                   baseUrl => "/a/service/jbrowse",
                   glyph => "JBrowse/View/FeatureGlyph/Segments",
                   type => "JBrowse/View/Track/CanvasFeatures",
                   key => "$studyDisplayName Intron Junctions",
                   label => "$studyDisplayName Intron Junctions",
                   category => "Transcriptomics",
                   metadata => {
                     subcategory => 'RNASeq',
                     dataset => $studyDisplayName,
                     track => 'Predicted Intron Junctions',
                   },
                   query => {
                     feature => "gsnap:unifiedintronjunction",
                     intronSizeLimit => $intronSizeLimit,
                     minIntronPercent => .05,
                     minNonContainedRatio => .02,
                     minContainedRatio => .2,
                     minContainedScore => 4,
                     minNonContainedScore => 20,
                     maxIsrpmMult => 50,
                     isrpmRatio => .05,
                     externalDatabaseName => $datasetName,
                     minReadsMaxSample => 3,
                   }
  };

  push @{$result->{tracks}}, $junctions;
}

print encode_json($result);

$dbh->disconnect();

sub addConfiguration {
  my ($result, $file, $displayName, $strand, $alignemnt, $properties, $datasetName, $nameForFileNames, $bigWigRelativePath, $multiUrls) = @_;

  $strand = 'not strand specific' unless($strand);

  my $studyDisplayName = $properties->{datasetDisplayName};

# TODO:  Waiting for Ryan to switch these
  my $bwUrl = "/a/jbrowse/eupath_data/webServices/$bigWigRelativePath/$file";
#  my $bwUrl = "/a/service/jbrowse/rnaseq/bigwig/$nameForFileNames/$datasetName/$file"; 


  my $color = &color($strand, $alignment);

  my $coverage = {storeClass => "JBrowse/Store/SeqFeature/BigWig",
                  urlTemplate => $bwUrl,
                  key => "$displayName Coverage",
                  label => "$displayName Coverage",
                  type => "JBrowse/View/Track/Wiggle/XYPlot",
                  category => "Transcriptomics",
                  min_score => 0,
                  max_score => 2000,
#                  autoscale => "local",
                  style => {
                    "pos_color"         => $color,
                    "clip_marker_color" =>  "black",
                  },
                  metadata => {
                    'strand' => $strand,
                    'alignment' => $alignment,
                    subcategory => 'RNASeq',
                    dataset => $studyDisplayName,
                    track => 'Coverage'
                  },
  };

  my $multiUrlHash = {url => $bwUrl, name => $displayName, color => $color, alignment => $alignment};
  push @{$result->{tracks}}, $coverage;
  push @multiUrls, $multiUrlHash;
}


sub color {
  my ($strand, $alignment) = @_;

  if($alignment eq 'unique') {
    if($strand eq 'reverse') {
      return 'red';
    }
    else {
      return 'blue';
    }
  }

  return 'grey';;
}

1;

