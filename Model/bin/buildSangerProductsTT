#!/usr/bin/perl

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";

$| = 1; # don't buffer stdout

use DBI;
use Data::Dumper;
use Getopt::Long qw(GetOptions);
use LWP::UserAgent;
use HTTP::Request;
use HTTP::Response;
use XML::Simple;
use EbrcModelCommon::Model::tmUtils;
use File::Path 'rmtree';

# To check that no genome of interest has a null release_date in sres.ExternalDatabaseRelease,
# we will use nvl() to set an impossibly early date in the case of a null. If this
# value appears in the result set then nvl() must have done its work. So we'll die.
my $sentinelDate = '1918-08-13';

my $annotationInsert;
my $commentsInsert;
my $changesInsert;
my $productsInsert;

my ($propfile, $instance, $schema, $suffix, $prefix, $filterValue, $debug);
GetOptions("propfile=s" => \$propfile,
           "instance=s" => \$instance,
           "schema=s" => \$schema,
           "suffix=s" => \$suffix,
           "prefix=s" => \$prefix,
           "filterValue=s" => \$filterValue,
           "debug!" => \$debug,
	  );
die "required parameter missing" unless ($propfile && $instance && $suffix);

my $dbh = EbrcModelCommon::Model::tmUtils::getDbHandle($instance, $schema, $propfile);

createTables($dbh, $suffix);
loadRawData($dbh, $suffix);

$dbh->commit() or print STDERR $dbh->errstr;


sub getCommentsInsert {

    my ($dbh, $suffix) = @_;
    if (!$commentsInsert) {
    $commentsInsert = $dbh->prepare(<<SQL) or die "preparing comments insert";
      insert into SangerUcTags$suffix (mrnaid, geneid, tag, orgid)
      values (?, ?, ?, ?)
SQL
  }

  return $commentsInsert;
}

sub getChangesInsert {

    my ($dbh, $suffix) = @_;
    if (!$changesInsert) {
    $changesInsert = $dbh->prepare(<<SQL) or die "preparing changesInsert";
      insert into GenesWithChanges$suffix (mrnaid, geneid, annotationid, annotationvalue, type_id)
      values (?, ?, ?, ?, ?)
SQL
  }

  return $changesInsert;
}

sub getProductsInsert {

    my ($dbh, $suffix) = @_;
    if (!$productsInsert) {
    $productsInsert = $dbh->prepare(<<SQL) or die "preparing products insert";
      insert into SangerProducts$suffix (mrnaid, geneid, genename, product, rankalternative, organismid)
      values (?, ?, ?, ?, ?, ?)
SQL
  }

  return $productsInsert;
}

sub createTables {
    my ($dbh, $suffix) = @_;

    $dbh->do(<<SQL) or die "creating GenesWithChanges table";
       create table GenesWithChanges$suffix (
          mrnaid          varchar2(80),
          geneid          varchar2(60),
          annotationid    varchar2(20),
          annotationvalue varchar2(400),
          type_id         varchar2(20)
       ) nologging
SQL

    $dbh->do(<<SQL) or die "creating SangerUcTags table";
       create table SangerUcTags$suffix (
          mrnaid varchar2(80),
          geneid varchar2(60),
          tag    varchar2(60),
          orgid  number
       ) nologging
SQL

    $dbh->do(<<SQL) or die "creating SangerProducts table";
       create table SangerProducts$suffix (
          mrnaid          varchar2(80),
          geneid          varchar2(60),
          genename        varchar2(60),
          product         varchar2(400),
          rankalternative number,
          organismid      number
       ) nologging
SQL

}

sub loadRawData {
  my ($dbh, $suffix) = @_;

  my $TMPDIR = "/tmp/sangerfeed.$$";
  # my $TMPDIR = "/home/iodice/genedbFtp/";
  my @WGET_COMMAND = qw( wget ftp://ftp.sanger.ac.uk/pub/project/pathogens/fs10/eupathdb_genedb_updates/* );

  mkdir $TMPDIR;
  chdir $TMPDIR;
  system(@WGET_COMMAND) == 0
      or die "attempting wget from Sanger FTP site with the URL \"" . $WGET_COMMAND[1] . "\"";

  # "genes with changes" files, e.g.Pfalciparum3D7_genes_with_changes.tsv 
  open (my $changes_fh, "-|", "cat *_genes_with_changes.tsv | grep -v '^mrnaid'")
    or die "opening changes pipeline";

  my $changesInsert = getChangesInsert($dbh, $suffix);
  my $changeCount = 0;
  while (<$changes_fh>) {
    $changeCount++;
    chomp();
    my ($mrnaId, $geneId, $annotationId, $annotationValue, $typeId) = split /\t/;
    $changesInsert->execute($mrnaId, $geneId, $annotationId, $annotationValue, $typeId)
      or die "inserting changes, record #$changeCount, values \"$_\"";
  }

  # user-comment tag files, e.g. Pfalciparum3D7_eupathdb_uc_tags.tsv
  open (my $comments_fh, "-|", "cat *_eupathdb_uc_tags.tsv | grep -v '^mrnaid'")
    or die "opening user-comments pipeline";

  my $commentsInsert = getCommentsInsert($dbh, $suffix);
  my $commentCount = 0;
  while (<$comments_fh>) {
    $commentCount++;
    chomp();
    my ($mrnaId, $geneId, $tag, $orgid) = split /\t/;
    $commentsInsert->execute($mrnaId, $geneId, $tag, $orgid)
      or die "inserting comments, record #$commentCount, values \"$_\"";
  }

  # gene product files, e.g. GeneDB_products.tsv
  open (my $products_fh, "-|", "cat *_products.tsv | grep -v '^mrnaid'")
    or die "opening products pipeline";

  my $productsInsert = getProductsInsert($dbh, $suffix);
  my $productCount = 0;
  while (<$products_fh>) {
    $productCount++;
    chomp();
    my ($mrnaId, $geneId, $genename, $product, $rankalternative, $organismid) = split /\t/;

    $productsInsert->execute($mrnaId, $geneId, $genename, $product, $rankalternative, $organismid)
      or die "inserting products, record #$productCount, values \"$_\"";
  }

  chdir; # so we can remove the temporary directory
  rmtree($TMPDIR);

 }

