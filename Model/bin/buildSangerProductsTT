#!/usr/bin/perl

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";

$| = 1; # don't buffer stdout

use DBI;
use Data::Dumper;
use Getopt::Long qw(GetOptions);
use LWP::UserAgent;
use HTTP::Request;
use HTTP::Response;
use XML::Simple;
use EbrcModelCommon::Model::tmUtils;
use File::Path 'rmtree';

my $annotationInsert;
my $changesInsert;
my $productsInsert;

my ($propfile, $instance, $schema, $suffix, $prefix, $filterValue, $debug);
GetOptions("propfile=s" => \$propfile,
           "instance=s" => \$instance,
           "schema=s" => \$schema,
           "suffix=s" => \$suffix,
           "prefix=s" => \$prefix,
           "filterValue=s" => \$filterValue,
           "debug!" => \$debug,
	  );
die "required parameter missing" unless ($propfile && $instance && $suffix);

my $dbh = EbrcModelCommon::Model::tmUtils::getDbHandle($instance, $schema, $propfile);

createTables($dbh, $suffix);
loadRawData($dbh, $suffix);

$dbh->commit() or print STDERR $dbh->errstr;


sub getChangesInsert {

    my ($dbh, $suffix) = @_;
    if (!$changesInsert) {
    $changesInsert = $dbh->prepare(<<SQL) or die "preparing changesInsert";
      insert into GenesWithChanges$suffix (organismName, transcriptId, geneId, changeDate, annotation)
      values (?, ?, ?, ?, ?)
SQL
  }

  return $changesInsert;
}

sub getProductsInsert {

    my ($dbh, $suffix) = @_;
    if (!$productsInsert) {
    $productsInsert = $dbh->prepare(<<SQL) or die "preparing products insert";
      insert into SangerProducts$suffix (organismName, transcriptId, geneId, geneName, product, rankalternative)
      values (?, ?, ?, ?, ?, ?)
SQL
  }

  return $productsInsert;
}

sub createTables {
    my ($dbh, $suffix) = @_;

    $dbh->do(<<SQL) or die "creating GenesWithChanges table";
       create table GenesWithChanges$suffix (
          organismName varchar2(50),
          transcriptid varchar2(80),
          geneid       varchar2(60),
          changeDate   varchar2(20),
          annotation   varchar2(400)
       ) nologging
SQL

    $dbh->do(<<SQL) or die "creating SangerProducts table";
       create table SangerProducts$suffix (
          organismName    varchar2(50),
          transcriptid    varchar2(80),
          geneid          varchar2(60),
          genename        varchar2(60),
          product         varchar2(800),
          rankalternative number
       ) nologging
SQL

}

sub loadRawData {
  my ($dbh, $suffix) = @_;

  my $TMPDIR = "/tmp/sangerfeed.$$";
  # my $TMPDIR = "/home/iodice/genedbFtp/";
  my @WGET_COMMAND = qw( wget ftp://ftp.sanger.ac.uk/pub/genedb/genedb_products/* );

  mkdir $TMPDIR;
  chdir $TMPDIR;
  system(@WGET_COMMAND) == 0
    or die "attempting wget from Sanger FTP site with the URL \"" . $WGET_COMMAND[1] . "\"";

  @WGET_COMMAND = qw( wget ftp://ftp.sanger.ac.uk/pub/genedb/annotation_updates/* );
  system(@WGET_COMMAND) == 0
    or die "attempting wget from Sanger FTP site with the URL \"" . $WGET_COMMAND[1] . "\"";

  # "genes with changes" files, e.g.Pfalciparum3D7_genes_with_changes.tsv 
  open (my $changes_fh, "-|", "cat *_updates_* | grep -v '^organism_name'")
    or die "opening changes pipeline";

  my $changesInsert = getChangesInsert($dbh, $suffix);
  my $changeCount = 0;
  while (<$changes_fh>) {
    $changeCount++;
    chomp();
    my ($organismName, $transcriptId, $geneId, $date, $annotation) = split /\t/;

    $changesInsert->execute($organismName, $transcriptId, $geneId, $date, $annotation)
      or die "inserting changes, record #$changeCount, values \"$_\"";
  }

  # gene product files, e.g. pathogens_genedb_products_20181008.tsv
  my $filenamePattern =  (lc($instance) =~ /fung/)
    ? "fungi_genedb_products_*.tsv"
      : "pathogens_genedb_products_*.tsv";
  open (my $filenames_fh, "-|", "ls $filenamePattern")
    or die "opening filename pipeline";

  my $productFilename;
  while (<$filenames_fh>) {
    chomp();
    $productFilename = $_;
  }

  open (my $products_fh, "-|", "cat $productFilename | grep -v rankalternative")
    or die "opening products pipeline";

  my $productsInsert = getProductsInsert($dbh, $suffix);
  my $productCount = 0;
  while (<$products_fh>) {
    $productCount++;
    chomp();
    my ($organismName, $transcriptId, $geneId, $genename, $product, $rankalternative) = split /\t/;

    $productsInsert->execute($organismName, $transcriptId, $geneId, $genename, $product, $rankalternative)
      or die "inserting products, record #$productCount, values \"$_\"";
  }

  chdir; # so we can remove the temporary directory
  rmtree($TMPDIR);

 }

