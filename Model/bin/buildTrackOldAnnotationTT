#!/usr/bin/perl

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";

use DBI;
use Data::Dumper;
use XML::Simple;
use Getopt::Long qw(GetOptions);
use EbrcModelCommon::Model::tmUtils;

my ($propfile, $instance, $schema, $suffix, $debug);
Getopt::Long::Configure("pass_through");
GetOptions("propfile=s" => \$propfile,
           "instance=s" => \$instance,
           "schema=s" => \$schema,
           "suffix=s" => \$suffix,
           "debug!" => \$debug,
	  );

my $dbh = EbrcModelCommon::Model::tmUtils::getDbHandle($instance, $schema, $propfile);

$|=1;

createTable($dbh, $suffix);
doInsert($dbh, $suffix);
updateForEc($dbh, $suffix);
updateForGo($dbh, $suffix);
updateForProduct($dbh, $suffix);
updateForCds($dbh, $suffix);

$dbh->commit();


sub createTable {
  my ($dbh, $suffix) = @_;

  $dbh->do(<<SQL) or die "creating TrackOldAnnotation table";
      create table TrackOldAnnotation$suffix (
        old_source_id         varchar2(80),
        new_source_id         varchar2(80),
        altered_product       number(1),
        altered_go            number(1),
        altered_ec            number(1),
        altered_cds           number(1)
      )
SQL
}

sub doInsert {
  my ($dbh, $suffix) = @_;

  $dbh->do(<<SQL) or die "doing initial inserts in TrackOldAnnotation table";
    INSERT INTO TrackOldAnnotation$suffix (old_source_id, new_source_id)  
      ( SELECT DISTINCT oa.source_id, gi.gene
        FROM apidb.oldannotation oa, geneId gi
	WHERE oa.source_id = gi.id )
SQL
}



sub updateForEc {
  my ($dbh, $suffix) = @_;

  my $updateStmt = $dbh->prepare(<<SQL);
UPDATE TrackOldAnnotation$suffix trackerT 
SET altered_ec =
(SELECT  case when (count(DISTINCT oa.value)  = ecCounts.ct) then 0 else 1 end as altered_ec
 FROM apidb.oldannotation oa, geneId gi,
  ( SELECT  count(DISTINCT ec2.ec_number) as ct, oa2.source_id as oldid, ga2.source_id as newId
    FROM dots.aaSequenceEnzymeClass asec2, sres.enzymeClass ec2, geneattributes ga2, 
          apidb.oldannotation oa2, geneId gi2
   WHERE oa2.type = 'EC'
   AND ec2.enzyme_class_id = asec2.enzyme_class_id
   AND asec2.aa_sequence_id = ga2.aa_sequence_id
   AND ec2.ec_number = oa2.value
  AND gi2.gene = ga2.source_id
  AND gi2.id = oa2.source_id
   group by oa2.source_id, ga2.source_id
  ) ecCounts
 WHERE oa.type='EC'
 AND gi.id = oa.source_id
 AND oa.source_id = ecCounts.oldid
 AND trackerT.old_source_id = oa.source_id
 AND trackerT.new_source_id = ecCounts.newId
 group by ecCounts.ct, ecCounts.oldid, ecCounts.newId
 )
SQL
  $updateStmt->execute() or die "FAILED updating altered_ec when EC values exist for both old and new genes.";

  $updateStmt = $dbh->prepare(<<SQL);
  UPDATE TrackOldAnnotation$suffix SET altered_ec =-1
    WHERE new_source_id in 
      ( SELECT ga.source_id
	FROM geneattributes ga, geneId gi, APIDB.oldcodingsequence ocs
	WHERE ga.ec_numbers is not  null
	AND ga.source_id = gi.gene
	AND gi.id =ocs.source_id
	AND ocs.source_id not in (SELECT DISTINCT source_id FROM  apidb.oldannotation WHERE type='EC' )  )
	AND altered_ec is null
SQL
  $updateStmt->execute() or die "FAILED updating altered_ec when EC values exist for NEW but not for OLD genes.";


  $updateStmt = $dbh->prepare(<<SQL);
  UPDATE TrackOldAnnotation$suffix SET altered_ec = 2
    WHERE old_source_id in
      ( SELECT DISTINCT oa.source_id
	FROM geneattributes ga, apidb.oldannotation oa, geneId gi
	WHERE ga.ec_numbers is  null
	AND ga.source_id = gi.gene
	AND gi.id = oa.source_id
	AND oa.type='EC' )
	AND altered_ec is null
SQL
  $updateStmt->execute() or die "FAILED updating altered_ec when EC values exist for OLD but not for NEW genes.";
}

sub updateForGo {
  my ($dbh, $suffix) = @_;

  my $updateStmt = $dbh->prepare(<<SQL);
UPDATE TrackOldAnnotation$suffix trackerT 
SET altered_go = 
(SELECT  case when (count(DISTINCT oa.value) = goCounts.ct) then 0 else 1 end as altered_go 
 FROM apidb.oldannotation oa, geneId gi,
   (SELECT count(DISTINCT oa2.value) as ct, oa2.source_id as oldid, gts2.source_id as newId
  FROM gotermsummary gts2,  apidb.oldannotation oa2, geneId gi2
  WHERE oa2.type='GO' 
  AND oa2.value = gts2.go_id
  AND gts2.source_id = gi2.gene 
  AND gi2.id = oa2.source_id
   group by oa2.source_id, gts2.source_id
  ) goCounts
WHERE oa.type='GO'  
 AND gi.id = oa.source_id
 AND oa.source_id = goCounts.oldid
AND trackerT.old_source_id = oa.source_id
AND trackerT.new_source_id = goCounts.newId
 group by goCounts.ct, goCounts.oldid
 )
SQL
  $updateStmt->execute() or die "FAILED updating altered_go when GO ids exist for both old and new genes.";

  $updateStmt = $dbh->prepare(<<SQL);
UPDATE TrackOldAnnotation$suffix SET altered_go =-1
WHERE new_source_id in 
( SELECT  DISTINCT gts.source_id FROM  APIDB.oldcodingsequence ocs, gotermsummary gts, geneId gi
WHERE ocs.source_id = gi.id  AND gi.gene = gts.source_id
AND ocs.source_id not in (SELECT DISTINCT source_id FROM APIDB.oldannotation WHERE type='GO')  )
AND altered_go is null
SQL
  $updateStmt->execute() or die "FAILED updating altered_go when GO ids exist for exist for NEW but not for OLD genes.";


  $updateStmt = $dbh->prepare(<<SQL);
UPDATE TrackOldAnnotation$suffix SET altered_go = 2
WHERE old_source_id in
 (SELECT DISTINCT  oa.source_id FROM  apidb.oldannotation oa, geneattributes ga, geneId gi
  WHERE oa.source_id = gi.id  AND gi.gene = ga.source_id
  AND oa.type='GO'
  AND ga.source_id not in  (SELECT source_id FROM  gotermsummary)  )
AND altered_go is null
SQL
  $updateStmt->execute() or die "FAILED updating altered_go when GO ids exist for exist for OLD but not for NEW genes.";

}

sub updateForProduct {
  my ($dbh, $suffix) = @_;

  my $updateStmt = $dbh->prepare(<<SQL);
UPDATE TrackOldAnnotation$suffix trackerT 
SET altered_product = 
(SELECT CASE WHEN (
    ( SUBSTR(COALESCE(preferred_product.product, any_product.product, gf.product, 'unspecified product'), 1, 300) )  = oa.value )
   THEN 0 ELSE 1 END AS altered_product
  FROM apidb.oldannotation oa, geneId gi, geneattributes ga, dots.genefeature gf,
   (SELECT na_feature_id, max(product) as product
      FROM apidb.GeneFeatureProduct
      WHERE is_preferred = 1
      group by na_feature_id
     ) preferred_product,
     (SELECT na_feature_id, max(product) as product
      FROM apidb.GeneFeatureProduct
      group by na_feature_id
     ) any_product
 WHERE oa.type='product'
 AND oa.source_id = gi.id
 AND gi.gene = ga.source_id
 AND gf.na_feature_id = ga.na_feature_id
 AND any_product.na_feature_id = gf.na_feature_id
 AND preferred_product.na_feature_id = gf.na_feature_id
 AND trackerT.old_source_id = oa.source_id
 AND trackerT.new_source_id = ga.source_id
)
SQL
  $updateStmt->execute() or die "FAILED updating altered_product when product exists for both old and new genes.";

# no rows for product existing for NEW genes but not for OLD genes

  $updateStmt = $dbh->prepare(<<SQL);
UPDATE TrackOldAnnotation$suffix SET altered_product = 2
WHERE old_source_id in
( SELECT oa.source_id 
 FROM geneattributes ga, TrackOldAnnotation$suffix t, APIDB.oldannotation oa
 WHERE ga.source_id = t.new_source_id 
 AND t.altered_product is null
 AND oa.source_id = t.old_source_id AND oa.type='product' )
AND altered_product  is null
SQL
  $updateStmt->execute() or die "FAILED updating altered_product exists for OLD but not for NEW genes.";
}


sub updateForCds {
  my ($dbh, $suffix) = @_;

  my $updateStmt = $dbh->prepare(<<SQL);
UPDATE TrackOldAnnotation$suffix trackerT 
SET altered_cds =
(SELECT  case when dbms_lob.compare(ocs.coding_sequence,cs.sequence) = 0 then 0 else 1 end as altered_sequence 
 FROM APIDB.oldcodingsequence ocs, geneId gi, proteinsequence cs
 WHERE ocs.source_id = gi.id
 AND gi.gene = cs.source_id
 AND trackerT.old_source_id = ocs.source_id
 AND trackerT.new_source_id = cs.source_id
 )
SQL
  $updateStmt->execute() or die "FAILED updating altered_sequence.";
}

