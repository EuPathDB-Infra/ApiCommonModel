#!/usr/bin/perl

use strict;
use lib $ENV{GUS_HOME} . "/lib/perl";
use JSON;
use ApiCommonModel::Model::JBrowseUtil;
use Data::Dumper;
use URI::Escape;
use Storable 'dclone';

my ($organismAbbrev, $projectName) = @ARGV;

my $jbrowseUtil = ApiCommonModel::Model::JBrowseUtil->new({projectName => $projectName});

my $dbh = $jbrowseUtil->getDbh();   

my $result = {"tracks" => [] };


&addScaffolds($dbh, $result);
&addUnifiedMassSpec($dbh, $result);
&addUnifiedSnp($dbh, $result);
&addSynteny($dbh, $result);

my $datasetProperties = &datasetProperties($dbh);

&addChipChipTracks($dbh, $result, $datasetProperties);
&addSmallNcRnaSeq($dbh, $result, $datasetProperties);

print encode_json($result);


sub datasetProperties {
  my ($dbh) = @_;

  my $sql = "select dsp.name, prop.property, prop.value
from apidbtuning.datasetpresenter dsp
   , apidbtuning.datasetproperty prop
where dsp.name like '${organismAbbrev}%_chipChipExper%_RSRC'
and dsp.dataset_presenter_id = prop.dataset_presenter_id
UNION
select dsp.name, prop.property, prop.value
from apidbtuning.datasetpresenter dsp
   , apidbtuning.datasetproperty prop
where dsp.name like '${organismAbbrev}%_smallNcRna_%_RSRC'
and dsp.dataset_presenter_id = prop.dataset_presenter_id";

  my $sh = $dbh->prepare($sql);
  $sh->execute();

  my %datasetProperties;
  while(my ($datasetName, $prop, $val) = $sh->fetchrow_array()) {
    $datasetProperties{$datasetName}->{$prop} = $val;
  }
  $sh->finish();

  return \%datasetProperties;
}


sub addSmallNcRnaSeq {
  my ($dbh, $result, $datasetProperties) = @_;

  foreach my $dataset (keys %$datasetProperties) {
    next unless($dataset =~ /smallNcRna/);

    my $experimentName = $datasetProperties->{$dataset}->{experimentName};
    my $datasetDisplayName = $datasetProperties->{$dataset}->{datasetDisplayName};
    my $summary = $datasetProperties->{$dataset}->{summary};
    $summary =~ s/\n/ /g;
    my $shortAttribution = $datasetProperties->{$dataset}->{shortAttribution};

    my $sql = "select o.NAME_FOR_FILENAMES, ds.name from apidb.datasource ds, apidb.organism o where ds.taxon_id = o.taxon_id and ds.name like '${organismAbbrev}%_smallNcRnaSample_RSRC'";

    my $sh = $dbh->prepare($sql);
    $sh->execute();

    while(my ($nameForFileNames, $sampleDataset) = $sh->fetchrow_array()) {
      my ($sampleName) = $sampleDataset =~ /${organismAbbrev}_${experimentName}_(.+)_smallNcRnaSample_RSRC/;

      # Example: EhistolyticaHM1IMSS/bam/Singh_Small_RNA/Rahman/Rahman.bam
      my $bamUrl = "/a/service/jbrowse/store?data=" . uri_escape_utf8("${nameForFileNames}/bam/$experimentName/${sampleName}/${sampleName}.bam");

      my $alignment = {storeClass => "JBrowse/Store/SeqFeature/BAM",
                       urlTemplate => $bamUrl,
                           key => "${sampleName} Small Non-coding RNAs",
                           label => "${sampleName} Small Non-coding RNAs",
                           type => "SmallRNAPlugin/View/Track/smAlignments",
                           category => "Transcriptomics",
                           yScalePosition => "left",
                           metadata => {
                             subcategory => 'small non-coding RNA',
                             dataset => $datasetDisplayName,
                             trackType => 'Small RNA',
                             attribution => $shortAttribution,
                             description => $summary,
                           },
                          fmtMetaValue_Dataset => "function() { return datasetLink('${dataset}', '${datasetDisplayName}'); }",
                          fmtMetaValue_Description => "function() { return datasetDescription('${summary}', ''); }",
      };

      push @{$result->{tracks}}, $alignment;
    }
  }
}

sub addScaffolds {
  my ($dbh, $result) = @_;

  my $sql = "select count(*) from dots.virtualsequence vs, apidb.organism o where o.TAXON_ID = vs.taxon_id and public_abbrev = '${organismAbbrev}'";

  my $sh = $dbh->prepare($sql);
  $sh->execute();
  my $count = $sh->fetchrow_array();
  $sh->finish();
  if($count > 0) {

    my $track = {storeClass => "JBrowse/Store/SeqFeature/REST",
                 baseUrl => "/a/service/jbrowse",
                 type => "JBrowse/View/Track/CanvasFeatures",
                 glyph => "function(feature){ return changeScaffoldType(feature)}",
                 key => "Scaffolds",
                 label => "Scaffolds",
                 category => "Sequence Analysis",
                 displayMode => "normal",
                 subParts => "gap",
                    style => {
                      connectorColor => 'white',
                      connectorThickness => '0',
                      color => "function(feature){ return scaffoldColor(feature)}",
                      height => "function(feature){ return scaffoldHeight(feature)}",
                    },
                    metadata => {
                      subcategory => "Sequence assembly",
                      trackType => 'Segments',
                    },
                    query => {'feature' => "scaffold:genome",
                    },
                     onClick => {
                       content => "function(track, feature){ return scaffoldDetails(track, feature)}",
                     },
                     menuTemplate => [
                       {label => "View Details", 
                        content => "{massSpecDetails}",
                       },
                         ],
    };

    push @{$result->{tracks}}, $track;


  }
}

sub addSynteny {
  my ($dbh, $result) = @_;

  my $sql = "select otr.organism, otr.public_abbrev, otr.phylum, otr.genus, otr.species, otr.kingdom, otr.class, gt.gtracks
            from APIDBTUNING.ORGANISMSELECTTAXONRANK otr
               , APIDBTUNING.ORGANISMATTRIBUTES oa
               , (select * from APIDBTUNING.GBROWSETRACKSORGANISM where type = 'synteny' ) gt
            where oa.ORGANISM_NAME = otr.organism 
            and oa.IS_ANNOTATED_GENOME = 1
            and oa.PROJECT_ID = '${projectName}'
            and oa.ORGANISM_NAME = gt.organism (+)";

  my $hasSyntenyTracks = 0;

  my $orgGTracks;
  my %subtracks;
  my %defaults;

  my $sh = $dbh->prepare($sql);
  $sh->execute();
  while(my ($organism, $publicAbbrev, $phylum, $genus, $species, $kingdom, $class, $gTracks) = $sh->fetchrow_array()) {
    if($publicAbbrev eq $organismAbbrev) {
      $hasSyntenyTracks = 1;
      $gTracks =~ s/^.+Synteny\///;
      %defaults = map { $_ => 1 } split(/\+/, $gTracks);
    }

    $subtracks{$publicAbbrev} = {"featureFilters" => { "Taxon" => $organism},
                                 "metadata" => {"Kingdom" => $kingdom,
                                                "Phylum" => $phylum,
                                                "Class" => $class,
                                                "Genus" => $genus,
                                                "Species" => $species 
                                 },
    };
  }
  $sh->finish();

  if($hasSyntenyTracks) {
    my $subtracksAr = [];
    foreach my $key (keys %subtracks) {
      foreach my $type ("gene", "span") {
        my $clone = dclone $subtracks{$key};
        $clone->{"featureFilters"}->{"SynType"} = $type;
        $clone->{"label"} = "$key $type";
        $clone->{"visible"} = $key eq $organismAbbrev || $defaults{"${key}_${type}"} ? 'true' : 'false';
        push @$subtracksAr, $clone;
      }
    }

    my $syntenyTrack = {storeClass => "JBrowse/Store/SeqFeature/REST",
                        baseUrl => "/a/service/jbrowse",
                        type => "EbrcTracks/View/Track/Synteny",
                        glyph => "JBrowse/View/FeatureGlyph/Segments",
                        key => "Syntenic Sequences and Genes (Shaded by Orthology)",
                        label => "Syntenic Sequences and Genes (Shaded by Orthology)",
                        region_feature_densities => "function(){return false}",
                        category => "Comparative Genomics",
                        geneGroupAttributeName => "orthomcl_name",
                        displayMode => "normal",
                        style => {
                          color => "{syntenyColorFxn}",
                          connectorColor => "{syntenyColorFxn}",
                          showLabels => "function(){return false}",
                          height => "function(f){return f.data['SynType'] === 'gene' ? 7 : 1; }",
                       },
                        metadata => {
                          subcategory => "Orthology and Synteny",
                          trackType => 'Segments',
                        },
                        query => {'feature' => "gene:syntenyJBrowse"
                        },
                        subtracks => $subtracksAr,
                        onClick => {
                          content => "{syntenyTitleFxn}",
                        },
                        menuTemplate => [
                          {label => "View Details", 
                           content => "{syntenyTitleFxn}",
                          },
                          {label => "View Gene or Sequence Page",
                           title => "function(track,feature) { return feature.data['SynType'] == 'span' ? feature.data['Contig'] : feature.data['name']; }", 
                           iconClass => "dijitIconDatabase", 
                           action => "iframeDialog", 
                           url => "function(track,feature) { return feature.data['SynType'] == 'span' ? '/a/app/record/genomic-sequence/' + feature.data['Contig'] : '/a/app/record/gene/' + feature.data['name'] }"}
                            ],
    };
    
    push @{$result->{tracks}}, $syntenyTrack;


  }

}

sub addUnifiedSnp {
  my ($dbh, $result) = @_;

  my $sql = "select count(*) from apidbtuning.datasetpresenter where name like '${organismAbbrev}%HTS_SNP_%'";
  my $sh = $dbh->prepare($sql);
  $sh->execute();
  my $snpCount = $sh->fetchrow_array();
  $sh->finish();

  if($snpCount > 0) {
    my $snpTrack = {storeClass => "JBrowse/Store/SeqFeature/REST",
                    baseUrl => "/a/service/jbrowse",
                    type => "JBrowse/View/Track/CanvasFeatures",
                    glyph => "EbrcFeatureGlyphs/View/FeatureGlyph/Diamond",
                    key => "SNPs by coding potential",
                    label => "SNPs by coding potential",
                    maxFeatureScreenDensity => 0.01,
                    region_feature_densities => "function(){return true}",
                    category => "Genetic Variation",
                    displayMode => "normal",
                    style => {
                      color => "{snpColorFxn}",
                      strandArrow => "function(){return false}",
                      labelScale => 1000000000000000, #some really big number so labels are not shown; showLabels=false not working here or in hook TODO
                    },
                    metadata => {
                      subcategory => "DNA polymorphism",
                      trackType => 'Diamond',
                    },
                    query => {'feature' => "SNP:Population",
                              'edname' => 'InsertSnps.pm NGS SNPs INTERNAL'
                    },
                     onClick => {
                       content => "{snpTitleFxn}",
                     },
                     menuTemplate => [
                       {label => "View Details", 
                        content => "{snpTitleFxn}",
                       },
                         ],
    };

    push @{$result->{tracks}}, $snpTrack;

  }

}

sub addUnifiedMassSpec {
  my ($dbh, $result) = @_;

  my $sql = "select count(*) from apidbtuning.datasetpresenter where name like '${organismAbbrev}%massSpec%'";
  my $sh = $dbh->prepare($sql);
  $sh->execute();
  my $massSpecCount = $sh->fetchrow_array();
  $sh->finish();

  if($massSpecCount > 0) {
    my $unifiedMassSpecTrack = {storeClass => "JBrowse/Store/SeqFeature/REST",
                                baseUrl => "/a/service/jbrowse",
                                type => "JBrowse/View/Track/CanvasFeatures",
                                key => "All MS/MS Peptides",
                                label => "All MS/MS Peptides",
                                maxFeatureScreenDensity => 0.01,
                                region_feature_densities => "function(){return true}",
                                category => "Proteomics",
                                displayMode => "compact",
                                style => {
                                  color => "{massSpecColor}",
                                },
                                metadata => {
                                  subcategory => "Protein Expression",
                                  trackType => 'Segments',
                                },
                                query => {'feature' => "domain:UnifiedMassSpecPeptides",
                                },
                                onClick => {
                                  content => "{massSpecDetails}",
                                },
                                menuTemplate => [
                                  {label => "View Details", 
                                   content => "{massSpecDetails}",
                                  },
                                    ],
    };

    push @{$result->{tracks}}, $unifiedMassSpecTrack;

  }


}

sub addChipChipTracks {
  my ($dbh, $result, $datasetProperties) = @_;

  my $sql = "select d.name, s.name, pan.name, pan.protocol_app_node_id
from study.study s
   , SRES.EXTERNALDATABASERELEASE r
   , SRES.EXTERNALDATABASE d
   , study.protocolappnode pan
   , study.studylink sl
where d.name like '${organismAbbrev}%_chipChipExper_%'
and s.EXTERNAL_DATABASE_RELEASE_ID = r.EXTERNAL_DATABASE_RELEASE_ID
and r.EXTERNAL_DATABASE_ID = d.EXTERNAL_DATABASE_ID
and s.study_id = sl.study_id
and sl.protocol_app_node_id = pan.PROTOCOL_APP_NODE_ID";

  my $sh = $dbh->prepare($sql);
  $sh->execute();

  my %seenDataset;

  while(my ($dataset, $study, $panName, $panId) = $sh->fetchrow_array()) {
    if(!$seenDataset{$dataset} && $panName =~ /_peaks \(ChIP-chip\)/) {
      my $peakTrack = &makeChipChipPeak($dataset, $study, $panName, $panId, $datasetProperties);
      push @{$result->{tracks}}, $peakTrack;
      $seenDataset{$dataset} = 1;
    }
    if($panName =~ /_smoothed \(ChIP-chip\)/) {
      my $track = &makeChipChipSmoothed($dataset, $study, $panName, $panId, $datasetProperties);
      push @{$result->{tracks}}, $track;
    }
  }
 
  $sh->finish();
}


sub makeChipChipPeak {
  my ($dataset, $study, $panName, $panId, $datasetProperties) = @_;

  my $datasetDisplayName = $datasetProperties->{$dataset}->{datasetDisplayName};
  my $summary = $datasetProperties->{$dataset}->{summary};
  $summary =~ s/\n/ /g;
  my $shortAttribution = $datasetProperties->{$dataset}->{shortAttribution};

  my $datasetKey = $datasetProperties->{$dataset}->{key};
  my $key = $datasetKey ? "${datasetDisplayName} Called Peaks ${datasetKey}" : "${datasetDisplayName} Called Peaks"; 

  my $subTrackAttr = $datasetProperties->{$dataset}->{subTrackAttr};

  my $cutoff = $datasetProperties->{$dataset}->{cutoff} || 0;
  
  my $colorFunction = $cutoff ? "colorSegmentByScoreFxn" : "chipColorFxn";

  my $peaks = {storeClass => "JBrowse/Store/SeqFeature/REST",
                  baseUrl => "/a/service/jbrowse",
                  type => "JBrowse/View/Track/CanvasFeatures",
                  key => $key,
                  label => $key,
                  category => "Epigenomics",
                  style => {
                    color => "{chipColorFxn}",
                  },
                  metadata => {
                    subcategory => "ChIP chip",
                    dataset => $datasetDisplayName,
                    trackType => 'Segments',
                    attribution => $shortAttribution,
                    description => $summary,
                   },
                   fmtMetaValue_Dataset => "function() { return datasetLink('${dataset}', '${datasetDisplayName}'); }",
                   fmtMetaValue_Description => "function() { return datasetDescription('${summary}', ''); }",
                  query => {'feature' => "ChIP:ChIPchip_peaks",
                            'exp' => $dataset,
                            'sub' => $subTrackAttr,
                            'cutoff' => $cutoff,
                  },
               onClick => {
                 content => "{peakTitleChipSeqFxn}",
               },
               menuTemplate => [
                 {label => "View Details", 
                  content => "{peakTitleChipSeqFxn}",
                 },
                   ],
    };


  return $peaks;


}

sub makeChipChipSmoothed {
  my ($dataset, $study, $panName, $panId, $datasetProperties) = @_;

  my $datasetDisplayName = $datasetProperties->{$dataset}->{datasetDisplayName};
  my $summary = $datasetProperties->{$dataset}->{summary};
  $summary =~ s/\n/ /g;
  my $shortAttribution = $datasetProperties->{$dataset}->{shortAttribution};

#  my $datasetKey = $datasetProperties->{$dataset}->{key};
#  my $key = $datasetKey ? "${panName} ${datasetKey}" : $panName; # no longer valid??
  my $key = $panName;
  my $subTrackAttr = $datasetProperties->{$dataset}->{subTrackAttr};

  my $smoothed = {storeClass => "JBrowse/Store/SeqFeature/REST",
                  baseUrl => "/a/service/jbrowse",
                  type => "JBrowse/View/Track/Wiggle/XYPlot",
                  key => $key,
                  label => $key,
                  category => "Epigenomics",
                  style => {
                    pos_color => "{chipColorFxn}",
                    neg_color => "{chipColorFxn}"
                  },
                  metadata => {
                    subcategory => "ChIP chip",
                    dataset => $datasetDisplayName,
                    trackType => 'XYPlot',
                    attribution => $shortAttribution,
                    description => $summary,
                   },
                   fmtMetaValue_Dataset => "function() { return datasetLink('${dataset}', '${datasetDisplayName}'); }",
                   fmtMetaValue_Description => "function() { return datasetDescription('${summary}', ''); }",
                  query => {'feature' => "ChIP:ChIPchip_smoothedjbrowse",
                            'exp' => $dataset,
                            'sub' => $subTrackAttr,
                            'panId' => $panId
                  },
                  max_score => 3,
                  min_score => -3,
    };


  return $smoothed;
}


