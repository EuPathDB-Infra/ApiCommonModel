#!/usr/bin/perl

use strict;
use lib $ENV{GUS_HOME} . "/lib/perl";
use Getopt::Long;
use File::Temp qw/ tempfile /;
use CBIL::Util::Utils;
use CBIL::Util::PropertySet;
use JSON;
use DBI;
use DBD::Oracle;
use Data::Dumper;
use Time::HiRes;

my ($help,$searchFile,$reportFile,$logFile,$site1,$site2,$numRecords,$organisms,$headerText);

&GetOptions('help|h' => \$help,
            'reportFile=s' => \$reportFile,
            'logFile=s' => \$logFile,
            'site1=s' => \$site1,
            'site2=s' => \$site2,
            'numRecords=s' => \$numRecords,
            'organisms=s' => \$organisms,
	    'searchFile=s' => \$searchFile,
	    'headerText=s' => \$headerText
            );

if ($help) {
    &usage();
    exit;
} else {
    foreach(($reportFile,$logFile,$site1,$site2,$numRecords,$organisms,$searchFile,$headerText)) {
	unless(defined $_) {
	    print STDERR "\nYou need to input the required parameters:\n";
	    &usage();
	    exit;
	}
    }
}

my $logFh = &printIntro($logFile,$site1,$site2,$numRecords,$organisms,$searchFile,$reportFile);
my $searches = &getSearches($searchFile,$logFh);
my %results;

foreach my $search (keys %$searches) {

#    next unless ($search eq 'GenesWithUserComments');

    my $siteNum = 1;
    &setNumRecords(\$searches->{$search}->{url},$numRecords);
    my $time = localtime();
    print $logFh "$time\n";
    print $logFh "SEARCH: $search\n";
    print $logFh "ORIGINAL URL: $searches->{$search}->{url}\n";
    foreach my $site (($site1,$site2)) {
	my $changedSearchUrl = &changeSearchSite($searches->{$search}->{url},$site);
	$changedSearchUrl = &changeOrganisms($changedSearchUrl,$search,$searches->{$search},$site,$organisms,$logFh);
	if ($changedSearchUrl eq "0") {
	    print $logFh "Skipping test. You cannot select multiple organisms for this search.\n";
	    $siteNum++;
	    next;
	}
	print $logFh "TESTING URL $siteNum: $changedSearchUrl\n";
	&testSearch(\%results,$search,&cleanDotSlash($site),$changedSearchUrl,$numRecords,$headerText,$logFh);
	$siteNum++;
    }
    print $logFh "\n";
}

&printReportFile($site1,$site2,\%results,$logFh,$reportFile);

exit;




sub printIntro {
    my ($logFile,$site1,$site2,$numRecords,$organisms,$searchFile,$reportFile) = @_;
    open(my $logFh,">",$logFile) or die "cannot open for writing '$logFile': $!";
    my $time = localtime();
    print $logFh "\nTEST OF SEARCH PERFORMANCE\n";
    print $logFh "Comparing searches between $site1 and $site2\n";
    print $logFh "List of searches are in file $searchFile\n";
    print $logFh "Obtain $numRecords records. Organism selection: $organisms\n";
    print $logFh "Tabulated results are in file $reportFile\n";
    print $logFh "Started $time\n\n";
    return ($logFh);
}

sub getSearches {
    my ($file,$logFh) = @_;
    my %searches;
    open(IN, $file) or die "cannot open download file '$file': $!";
    while (my $line = <IN>) {
	if ($line =~ /^http/) {
	    &cleanHtml(\$line);
	    my $shortName = &getShortName($line);
	    my $recordType = &getRecordType($line);
	    my $organismParam = &getOrganismParam($line,$logFh);
	    $searches{$shortName}->{url} = $line;
	    $searches{$shortName}->{recordType} = $recordType;
	    $searches{$shortName}->{organismParam} = $organismParam if ($organismParam);
	}   
    }
    close IN;
    return \%searches;
}

sub cleanDotSlash {
    my ($text) = @_;
    $text =~ s/\//_/g;
    $text =~ s/\./_/g;
    return $text;
}

sub cleanHtml {
    my ($htmlRef) = @_;
    chomp($$htmlRef);
    $$htmlRef =~ s/\r//g;
#     $$htmlRef =~ s/%7B/{/g;
#     $$htmlRef =~ s/%7D/}/g;
#     $$htmlRef =~ s/%22/"/g;
#     $$htmlRef =~ s/%3A/:/g;
#     $$htmlRef =~ s/%5B/[/g;
#     $$htmlRef =~ s/%5D/]/g;
#     $$htmlRef =~ s/%2C/,/g;
#     $$htmlRef =~ s/%20/ /g;
#     $$htmlRef =~ s/%2F/\//g;
#     $$htmlRef =~ s/%2F/%/g;
#     $$htmlRef =~ s/%2B/+/g;
}

sub setNumRecords {
    my ($htmlRef,$numRecords) = @_;
    $$htmlRef =~ s/\"numRecords\":-?[0-9]+,/\"numRecords\":$numRecords,/;
}

sub getShortName {
    my ($name) = @_;
    if ($name =~ /searches\/([^\/]+)\/reports/) {
	return $1;
    } else {
	die "Cannot find short name: $name]n";;
    }
}

sub getRecordType {
    my ($name) = @_;
    if ($name =~ /record-types\/([^\/]+)\//) {
	return $1;
    } else {
	die "Cannot find record type: $name\n";
    }
}

sub getOrganismParam {
    my ($url,$logFh) = @_;
    if ($url =~ /(motif_org\w+|text_search_org\w+|org\w+|BlastDatabaseOrganism)=/) {
	my $orgParam = $1;
#	print $logFh "$url\nThis is the organism parameter: $orgParam\n";
	return $orgParam;
    } else {
#	print $logFh "$url\nThere is no organism parameter for this search.\n";
	return;
    }
}

sub getAllOrganismsForSearch {
    my ($search,$searchRef,$site,$logFh) = @_;
    my $html = "https://".$site."/service/record-types/".$searchRef->{recordType}."/searches/".$search;
    my $cmd = "curl --max-time 600 --silent --show-error -g '$html'";
    print $logFh "Getting organisms for search: $cmd\n";
    my $json = eval {&runCmd($cmd)};
    if (! $json) {
	print $logFh "ERROR: Unable to access url.\n";
	return (0,0);
    }
    my $results = eval {decode_json($json)};
    if (! $results) {
	print $logFh "ERROR decoding json: $json)\n";
    }

    my %organisms;
    my $orgParam;
    foreach my $key1 (@{$results->{searchData}->{parameters}}) {
#	print "SEARCH: $search    SITE: $site\n";
	next if ($key1->{name} !~ /org/i && $key1->{displayName} !~ /org/i);
	next if ($key1->{type} ne "multi-pick-vocabulary");
	$orgParam = $key1->{name};
#	print "         ORG parameter: name '$key1->{name}'   displayName '$key1->{displayName}'\n";
	&getLeaves($key1->{vocabulary},\%organisms);
    }
    return (0,0) if (keys %organisms == 0);
    my @orgs =  map { $_ } keys %organisms;
    return (\@orgs,$orgParam);
}

sub getLeaves {
    my ($tree,$organisms) = @_;
    if (scalar @{$tree->{children}} == 0) {
	$organisms->{$tree->{data}->{term}} = 1;
    } else {
	foreach my $node (@{$tree->{children}}) {
	    &getLeaves($node,$organisms);
	}
    }
}

sub testSearch {
    my ($results,$search,$site,$changedSearchUrl,$numRecords,$headerText,$logFh) = @_;
    my $header = $headerText eq "n" ? "" : "--header '$headerText' ";
    my $cmd = "curl ".$header."--max-time 600 --silent --show-error -g '$changedSearchUrl'";
    my $startTime = Time::HiRes::time();
    $results->{$search}->{$site}->{start} = localtime();
    my $json = eval {&runCmd($cmd)};
    my $endTime = Time::HiRes::time();
    $results->{$search}->{$site}->{end} = localtime();
    $results->{$search}->{$site}->{seconds} = sprintf("%.2f",($endTime - $startTime));
    print $logFh "Number of seconds: $results->{$search}->{$site}->{seconds}\n";
    if (! $json) {
	print $logFh "ERROR:  Unable to access url.\n";
	$results->{$search}->{$site}->{num} = -1;
	return;
    }
    my $searchResults = eval {decode_json($json)};
    if ($searchResults) {
	$results->{$search}->{$site}->{num} = &getCount($searchResults,$numRecords,$logFh);
    } else {
	print $logFh "ERROR:  $json\n";
	$results->{$search}->{$site}->{num} = -1;
    }
}

sub changeOrganisms {
    my ($url,$search,$searchRef,$site,$organisms,$logFh) = @_;
    my ($allOrganisms,$orgParam);
    if ($organisms eq "preset") {
    } elsif ($organisms eq "all") {
	($allOrganisms,$orgParam) = &getAllOrganismsForSearch($search,$searchRef,$site,$logFh);
	return "0" if ($allOrganisms == 0);
	print $logFh "Here are all the organisms for the search:\n";
	print $logFh join(",",@{$allOrganisms}),"\n";
	$url = &updateOrgsInUrl($url,$orgParam,$allOrganisms);
    } else {         # comma-delimited list of organisms
	# need to test whether the provided organisms can be used in this search
	my @names = split(/,/,$organisms);
	s/^\s+|\s+$//g foreach @names;
	$url = &updateOrgsInUrl($url,$orgParam,\@names); 
    }
    return $url;
}

sub updateOrgsInUrl {
    my ($url,$orgParam,$organismsForSearch) = @_;
    my ($old,$new);
    if ($url =~ /($orgParam=%5B.+?%5D)/) {
	$old = $1;
    } elsif ($url =~ /($orgParam=.+?)&/) {
	$old = $1;
    }
    $new = $orgParam."=%5B%22".join("%22%2C%22",@{$organismsForSearch})."%22%5D";
    $new =~ s/ /%20/g;
    $url =~ s/$old/$new/;
    return $url;
}

sub changeSearchSite {
    my ($search,$site) = @_;
    if ($search =~ /^https?:\/\/([^\/]+\/[^\/]+)\//) {
	my $original = $1;
	$search =~ s/$original/$site/;
	return $search;
    } else {
	die "ERROR: Was not able to change url of this search: $search\n";
    }
}
 
sub getCount {
    my ($searchResults,$numRecords,$logFh) = @_;
    my %unique;
    foreach my $record (@{$searchResults->{records}}) {
	$unique{$record->{attributes}->{primary_key}}=1;
    }
    my $count = keys %unique;
    if (! exists $searchResults->{meta}->{totalCount}) {
	print $logFh "ERROR:  The totalCount variable does not exist in the json. There are $count unique primary keys.\n";
	return 0;
    }
    if ($numRecords == -1 && $searchResults->{meta}->{totalCount} != $count) {
	print $logFh "ERROR:  The desired number of records is set to -1 (to obtain all records), but the totalCount variable in the json ($searchResults->{meta}->{totalCount}) does not match the number of displayed unique primary keys ($count)\n";
    } elsif ($searchResults->{meta}->{totalCount} <= $numRecords && $count != $searchResults->{meta}->{totalCount}) {
	print $logFh "ERROR:  The totalCount variable in the json ($searchResults->{meta}->{totalCount}) is less than or equal to the desired number of records ($numRecords), but does not match the number of displayed unique primary keys ($count)\n";
    } elsif ($searchResults->{meta}->{totalCount} > $numRecords && $count != $numRecords) {
	print $logFh "ERROR:  The totalCount variable in the json ($searchResults->{meta}->{totalCount}) is greater than the desired number of records ($numRecords), but the desired number of records ($numRecords) does not match the number of displayed unique primary keys ($count)\n";
    } else {
	print $logFh "There are $searchResults->{meta}->{totalCount} total results and $count displayed unique primary keys.\n";
    }
    return $searchResults->{meta}->{totalCount};
}

sub printReportFile {
    my ($site1,$site2,$results,$logFh,$reportFile) = @_;
    print $logFh "Writing results out to report file: $reportFile\n";
    my $numSearches = keys %$results;
    print $logFh "Total searches tested: $numSearches\n";
    open(my $reportFh,">",$reportFile) or die "cannot open for writing '$reportFile': $!";
    print $reportFh "\t".$site1."\t\t\t\t".$site2."\n";
    print $reportFh "\ttotal\tseconds\tstart_time\tend_time\ttotal\tseconds\tstart_time\tend_time\n";
    foreach my $search (keys %results) {
	print $reportFh $search;
	foreach my $site ((&cleanDotSlash($site1),&cleanDotSlash($site2))) {
	    foreach my $field (("num","seconds","start","end")) {
		if (exists $results->{$search}->{$site}->{$field}) {
		    print $reportFh "\t".$results->{$search}->{$site}->{$field};
		} else {
		    print $reportFh "\t-1";
		}
	    }
	}
	print $reportFh "\n";
    }
    close $reportFh;
    my $time = localtime();
    print $logFh "\nFinished $time\n";
    close $logFh;
}

sub getProjects {
    my %projects = (
        MicrosporidiaDB => "microsporidiadb.org/micro",
        ToxoDB => "toxodb.org/toxo",
        AmoebaDB => "amoebadb.org/amoeba",
        CryptoDB => "cryptodb.org/cryptodb",
        FungiDB => "fungidb.org/fungidb",
        GiardiaDB => "giardiadb.org/giardiadb",
    	PiroplasmaDB => "piroplasmadb.org/piro",
    	PlasmoDB => "plasmodb.org/plasmo",
    	TrichDB => "trichdb.org/trichdb",
    	TriTrypDB => "tritrypdb.org/tritrypdb",
    	HostDB => "hostdb.org/hostdb",
    	SchistoDB => "schistodb.net/schisto",
    	VectorBase => "vectorbase.org/vectorbase",
	VEuPathDB => "veupathdb.org/veupathdb"
    );
    return \%projects;
}

sub clearCache {
    my ($site,$model,$logFh) = @_;
    $site =~ s/^.*\///;
    my $cmd = "wdkCache -model $model -reset && instance_manager manage $model reload /${site}";
    print $logFh "Resetting cache: $cmd\n\n";
    &runCmd($cmd);
}


sub usage {
    print STDERR "\nqaSearchesUniDb --help/-h --searchFile <file-with-webservices-urls> --reportFile <file-for-tab-results>  --logFile <file-for-detailed-log> --site1 <first-site-to-test>  --site2 <second-site-to-test> --numRecords <number-records-to-retrieve> --organisms <organisms-option> --headerText <text-for-curl-header>\n\n";
    print STDERR "This script tests webservices searches that are defined in the searchFile. The elapsed time and the total number of results are output into the reportFile. The numRecords option specifies how many results are shown. Two websites are tested by replacing the base urls that are defined in the searchFile.\n\n";
    print STDERR "Required options:\n";
    print STDERR "--searchFile <file-with-webservices-urls>  (e.g., service_reports/perf-table3-GET-tests-unidb.txt)\n";
    print STDERR "--reportFile <file-for-tab-results>   (e.g., report.txt)\n";
    print STDERR "--logFile <file-for-detailed-log>    (e.g., log.txt)\n";
    print STDERR "--site1 <first-site-to-test>   (e.g., w2.plasmodb.org/plasmo)\n";
    print STDERR "--site2 <first-site-to-test>   (e.g., beta.veupathdb.org/veupathdb.beta)\n";
    print STDERR "--numRecords <number_records-to-retrieve>   (e.g., 20)\n";
    print STDERR "--organisms <organisms-option>     (e.g., 'all' for all organisms on each site, 'preset' for organisms pre-defined in searchFile, or comma-delimited list of full organism names)\n";
    print STDERR "--headerText <text-for-curl-header>   (e.g., n or \"Content-Type: application/json\")\n\n";
    print STDERR "Example url in reportFile\n";
    print STDERR "https://plasmodb.org/plasmo/service/record-types/transcript/searches/GenesWithEpitopes/reports/standard?organism=%5B%22Plasmodium%20falciparum%203D7%22%2C%22Plasmodium%20falciparum%22%5D&epitope_confidence=%5B%22High%22%2C%22Medium%22%5D&reportConfig={\"pagination\":{\"numRecords\":20,\"offset\":0},\"attributes\":[\"primary_key\"],\"tables\":[]}\n\n";
    print STDERR "Example command lines:\n\n";
    print STDERR "performanceTestSearchesUniDb --searchFile service_reports/perf-table3-GET-tests-unidb.txt --reportFile report.txt --logFile log.txt --site1 w2.plasmodb.org/plasmo --site2 beta.veupathdb.org/veupathdb.beta --numRecords 20 --organisms all --headerText n\n\n";
    print STDERR "performanceTestSearchesUniDb --searchFile service_reports/perf-table3-GET-tests-unidb.txt --reportFile report.txt --logFile log.txt --site1 w2.veupathdb.org/veupathdb --site2 beta.veupathdb.org/veupathdb.beta --numRecords 20 --organisms preset --headerText \"Content-Type: application/json\"\n\n";
}

1;
