#!/usr/bin/perl

use strict;
use lib $ENV{GUS_HOME} . "/lib/perl";
use Getopt::Long;
use File::Temp qw/ tempfile /;
use CBIL::Util::Utils;
use CBIL::Util::PropertySet;
use JSON;
use DBI;
use DBD::Oracle;
use Data::Dumper;
use Time::HiRes;

my ($help,$searchFile,$reportFile,$logFile,$site1,$site2,$numRecords,$orgOption,$headerText);

&GetOptions('help|h' => \$help,
            'reportFile=s' => \$reportFile,
            'logFile=s' => \$logFile,
            'site1=s' => \$site1,
            'site2=s' => \$site2,
            'numRecords=s' => \$numRecords,
            'organisms=s' => \$orgOption,
	    'searchFile=s' => \$searchFile,
	    'headerText=s' => \$headerText
            );

if ($help) {
    &usage();
    exit;
} else {
    foreach(($reportFile,$logFile,$site1,$site2,$numRecords,$orgOption,$searchFile,$headerText)) {
	unless(defined $_) {
	    print STDERR "\nYou need to input the required parameters:\n";
	    &usage();
	    exit;
	}
    }
}

my $organismsFromFile;
$organismsFromFile = &readOrganismsFromFile($orgOption) if ($orgOption =~ /\//);
my $logFh = &printIntro($logFile,$site1,$site2,$numRecords,$orgOption,$organismsFromFile,$searchFile,$reportFile);
my $searches = &getSearches($searchFile,$site1,$site2,$logFh);

foreach my $search (keys %$searches) {

#    next unless ($search eq 'GenesByRNASeqpberANKA_Janse_Hoeijmakers_five_stages_ebi_rnaSeq_RSRCPercentile');
    my $jbrowse = $searches->{$search}->{recordType} eq "jbrowse" ? 1 : 0;

    my $siteNum = 1;
    &setNumRecords(\$searches->{$search}->{url},$numRecords) if (! $jbrowse);
    my $time = localtime();
    print $logFh "$time\n";
    print $logFh "SEARCH: $search\n";
    print $logFh "ORIGINAL URL: $searches->{$search}->{url}\n";
#    my $originalAllOrganisms = &getAllOrganismsForSearch($search,$searches->{$search},&getSite($searches->{$search}->{url}),$logFh);
    foreach my $site (($site1,$site2)) {
	print $logFh "TESTING URL $siteNum: $site\n";
	my $changedSearchUrl = &changeSearchSite($searches->{$search}->{url},$site);
	$changedSearchUrl = &updateOrganisms($changedSearchUrl,$search,$searches->{$search},$site,$orgOption,$organismsFromFile,$logFh) if (! $jbrowse);

	if ($changedSearchUrl) {
	    print $logFh "Changed URL for testing: $changedSearchUrl\n";
	    $searches->{$search}->{results}->{&cleanDotSlash($site)}->{testPerformed} = 1;
	    &testSearch($searches->{$search},$site,$changedSearchUrl,$numRecords,$headerText,$logFh);
	} else {
	    $searches->{$search}->{results}->{&cleanDotSlash($site)}->{notes} = "search skipped. error with organisms or url";
	    print $logFh "Skipping test because error with organisms or with url.\n";
	}
	$siteNum++;
    }
    print $logFh "\n";
}

&printReportFile($site1,$site2,$searches,$logFh,$reportFile);

exit;




sub printIntro {
    my ($logFile,$site1,$site2,$numRecords,$orgOption,$organisms,$searchFile,$reportFile) = @_;
    open(my $logFh,">",$logFile) or die "cannot open for writing '$logFile': $!";
    my $time = localtime();
    print $logFh "\nTEST OF SEARCH PERFORMANCE\n";
    print $logFh "Comparing searches between $site1 and $site2\n";
    print $logFh "List of searches are in file $searchFile\n";
    print $logFh "Obtain $numRecords records.\nOrganism option: $orgOption\n";
    if ($orgOption =~ /\//) {
	print $logFh "   Organisms in file:\n";
	print $logFh "       $_\n" foreach @{$organisms};
    }
    print $logFh "Tabulated results are in file $reportFile\n";
    print $logFh "Started $time\n\n";
    return ($logFh);
}

sub getSearches {
    my ($file,$site1,$site2,$logFh) = @_;
    my %searches;
    open(IN, $file) or die "cannot open download file '$file': $!";
    while (my $line = <IN>) {
	if ($line =~ /^http/) {
	    &cleanHtml(\$line);
	    my $shortName = &getShortName($line);
	    my $recordType = &getRecordType($line);
	    my $originalSite = &getSite($line);
	    $searches{$shortName}->{url} = $line;
	    $searches{$shortName}->{recordType} = $recordType;
	    foreach my $site (($originalSite,$site1,$site2)) {
		$searches{$shortName}->{results}->{&cleanDotSlash($site)}->{notes} = "";
		$searches{$shortName}->{results}->{&cleanDotSlash($site)}->{numAllOrgs} = 0;
		$searches{$shortName}->{results}->{&cleanDotSlash($site)}->{orgParam} = "-";
		$searches{$shortName}->{results}->{&cleanDotSlash($site)}->{orgParamType} = "-";
		$searches{$shortName}->{results}->{&cleanDotSlash($site)}->{searchParamsExist} = 0;
		$searches{$shortName}->{results}->{&cleanDotSlash($site)}->{numOrgsToTest} = 0;
		$searches{$shortName}->{results}->{&cleanDotSlash($site)}->{numOrgsTested} = 0;
		$searches{$shortName}->{results}->{&cleanDotSlash($site)}->{testPerformed} = 0;
		$searches{$shortName}->{results}->{&cleanDotSlash($site)}->{numResults} = 0;
		$searches{$shortName}->{results}->{&cleanDotSlash($site)}->{seconds} = 0;
		$searches{$shortName}->{results}->{&cleanDotSlash($site)}->{start} = 0;
		$searches{$shortName}->{results}->{&cleanDotSlash($site)}->{end} = 0;
	    }
	}   
    }
    close IN;
    return \%searches;
}

sub cleanDotSlash {
    my ($text) = @_;
    $text =~ s/\//_/g;
    $text =~ s/\./_/g;
    return $text;
}

sub cleanHtml {
    my ($htmlRef) = @_;
    chomp($$htmlRef);
    $$htmlRef =~ s/\r//g;
#     $$htmlRef =~ s/%7B/{/g;
#     $$htmlRef =~ s/%7D/}/g;
#     $$htmlRef =~ s/%22/"/g;
#     $$htmlRef =~ s/%3A/:/g;
#     $$htmlRef =~ s/%5B/[/g;
#     $$htmlRef =~ s/%5D/]/g;
#     $$htmlRef =~ s/%2C/,/g;
#     $$htmlRef =~ s/%20/ /g;
#     $$htmlRef =~ s/%2F/\//g;
#     $$htmlRef =~ s/%2F/%/g;
#     $$htmlRef =~ s/%2B/+/g;
}

sub setNumRecords {
    my ($htmlRef,$numRecords) = @_;
    $$htmlRef =~ s/\"numRecords\":-?[0-9]+,/\"numRecords\":$numRecords,/;
}

sub getShortName {
    my ($name) = @_;
    if ($name =~ /searches\/([^\/]+)\/reports/) {
	return $1;
    } elsif ($name =~ /jbrowse.*feature=([^&]+)&/i) {
	return "jbrowse_".$1;
    } else {
	die "Cannot find short name: $name]n";;
    }
}

sub getRecordType {
    my ($name) = @_;
    if ($name =~ /record-types\/([^\/]+)\//) {
	return $1;
    } elsif ($name =~ /jbrowse/i) {
	return "jbrowse";
    } else {
	die "Cannot find record type: $name\n";
    }
}

sub getOrganismParam {
    my ($url,$logFh) = @_;
    if ($url =~ /(motif_org\w+|text_search_org\w+|org\w+|BlastDatabaseOrganism)=/) {
	my $orgParam = $1;
#	print $logFh "$url\nThis is the organism parameter: $orgParam\n";
	return $orgParam;
    } else {
#	print $logFh "$url\nThere is no organism parameter for this search.\n";
	return;
    }
}

sub updateOrganisms {
    my ($url,$search,$searchRef,$site,$orgOption,$organismsFromFile,$logFh) = @_;

    my $allOrganisms = &getAllOrganismsForSearch($search,$searchRef,$site,$logFh);
    if ($searchRef->{results}->{&cleanDotSlash($site)}->{searchParamsExist} == 0) {
	print $logFh "ERROR:  The searchParams could not be obtained. The search may not be available on this site but let's try the search.\n";
    } else {
	$url = &changeOrgParam($url,$searchRef,$site,&getSite($searchRef->{url}),$logFh);
	$url = &changeOrganisms($url,$search,$searchRef,$site,$orgOption,$organismsFromFile,$allOrganisms,$logFh);
    }
    return $url;
}

sub getAllOrganismsForSearch {
    my ($search,$searchRef,$site,$logFh) = @_;
    my $html = "https://".$site."/service/record-types/".$searchRef->{recordType}."/searches/".$search;
    my $cmd = "curl --max-time 600 --silent --show-error -g '$html'";
    print $logFh "Getting organisms for search: $cmd\n";
    my $json = eval {&runCmd($cmd)};
    if (! $json) {
	print $logFh "ERROR: Unable to access url to obtain all organisms for search.\n";
	return;
    }
    my $results = eval {decode_json($json)};
    if (! $results) {
	print $logFh "ERROR decoding json to obtain all organisms for search:\n$json\n";
	return;
    }

    my %organisms;
    my ($orgParam,$orgParamType);
    foreach my $key1 (@{$results->{searchData}->{parameters}}) {
#	print "SEARCH: $search    SITE: $site\n";
	next if ($key1->{name} !~ /org/i && $key1->{displayName} !~ /org/i);
	$orgParam = $key1->{name};
	$orgParamType = $key1->{type};
	next if ($key1->{type} ne "multi-pick-vocabulary");
#	print "         ORG parameter: name '$key1->{name}'   displayName '$key1->{displayName}'  type '$key1->{type}'\n";
	&getLeaves($key1->{vocabulary},\%organisms);
	last;
    }
    my $numAllOrgs = keys %organisms;
    $searchRef->{results}->{&cleanDotSlash($site)}->{orgParamType} = $orgParamType ? $orgParamType : "not_found";
    $searchRef->{results}->{&cleanDotSlash($site)}->{searchParamsExist} = 1;
    $searchRef->{results}->{&cleanDotSlash($site)}->{numAllOrgs} = $numAllOrgs;
    $searchRef->{results}->{&cleanDotSlash($site)}->{orgParam} = $orgParam ? $orgParam : "not_found";
    print $logFh "Organism parameter for the search: $orgParam      Type: $orgParamType\n";
    return if ($numAllOrgs == 0);
    my @orgs =  map { $_ } keys %organisms;
    print $logFh "There are $numAllOrgs multi-pick organisms for the search:\n";
    print $logFh join(", ",@orgs)."\n";
    return (\@orgs);
}

sub getLeaves {
    my ($tree,$organisms) = @_;
    if (scalar @{$tree->{children}} == 0) {
	$organisms->{$tree->{data}->{term}} = 1;
    } else {
	foreach my $node (@{$tree->{children}}) {
	    &getLeaves($node,$organisms);
	}
    }
}

sub testSearch {
    my ($searchRef,$site,$changedSearchUrl,$numRecords,$headerText,$logFh) = @_;
    my $header = $headerText eq "n" ? "" : "--header '$headerText' ";
    my $cmd = "curl ".$header."--max-time 600 --silent --show-error -g '$changedSearchUrl'";
    my $startTime = Time::HiRes::time();
    $searchRef->{results}->{&cleanDotSlash($site)}->{start} = localtime();
    my $json = eval {&runCmd($cmd)};
    my $endTime = Time::HiRes::time();
    $searchRef->{results}->{&cleanDotSlash($site)}->{end} = localtime();
    $searchRef->{results}->{&cleanDotSlash($site)}->{seconds} = sprintf("%.2f",($endTime - $startTime));
    print $logFh "Number of seconds: $searchRef->{results}->{&cleanDotSlash($site)}->{seconds}\n";
    if (! $json) {
	print $logFh "ERROR:  Unable to access url.\n";
	$searchRef->{results}->{&cleanDotSlash($site)}->{notes} = "url_no_access";
	return;
    }
    my $searchResults = eval {decode_json($json)};
    if ($searchResults) {
	$searchRef->{results}->{&cleanDotSlash($site)}->{numResults} = &getCount($searchResults,$numRecords,$logFh);
    } else {
	print $logFh "ERROR:  $json\n";
	$searchRef->{results}->{&cleanDotSlash($site)}->{notes} = $json;
    }
}

sub changeOrgParam {
    my ($url,$searchRef,$site,$originalSite,$logFh) = @_;
    my $orgParam = $searchRef->{results}->{&cleanDotSlash($site)}->{orgParam};
    return $url if ($orgParam !~ /org/i);
    my $originalOrgParam = $searchRef->{results}->{&cleanDotSlash($originalSite)}->{orgParam};
    if ($orgParam ne $originalOrgParam) {
	$url =~ s/$originalOrgParam/$orgParam/;
	print $logFh "Changing organism parameter from $originalOrgParam to $orgParam\n";
    }
    return $url;
}

sub changeOrganisms {
    my ($url,$search,$searchRef,$site,$orgOption,$organismsFromFile,$allOrganisms,$logFh) = @_;
    if ($orgOption eq "preset") {
	$searchRef->{results}->{&cleanDotSlash($site)}->{numOrgsToTest} = &getNumOrgsInSearch($url,$searchRef->{results}->{&cleanDotSlash($site)}->{orgParam});
    } else {
	return if ( $searchRef->{results}->{&cleanDotSlash($site)}->{numAllOrgs} == 0 ||
	            $searchRef->{results}->{&cleanDotSlash($site)}->{orgParamType} ne "multi-pick-vocabulary" ||
	            $searchRef->{results}->{&cleanDotSlash($site)}->{orgParam} !~ /org/i );
	if ($orgOption eq "all") {
	    $searchRef->{results}->{&cleanDotSlash($site)}->{numOrgsToTest} = $searchRef->{results}->{&cleanDotSlash($site)}->{numAllOrgs};
	    $searchRef->{results}->{&cleanDotSlash($site)}->{numOrgsTested} = $searchRef->{results}->{&cleanDotSlash($site)}->{numAllOrgs};
	    $url = &updateOrgsInUrl($url,$searchRef->{results}->{&cleanDotSlash($site)}->{orgParam},$allOrganisms);
	} elsif ($orgOption =~ /\//) {         # full path for organism file
	    $searchRef->{results}->{&cleanDotSlash($site)}->{numOrgsToTest} = scalar @{$organismsFromFile};
	    my $orgsPossible = &orgsPossibleInSearch($organismsFromFile,$allOrganisms,$logFh);
	    $searchRef->{results}->{&cleanDotSlash($site)}->{numOrgsTested} = scalar @{$orgsPossible};
	    if (scalar @{$orgsPossible} == 0) {
		print $logFh "None of the desired organisms are available for this search.\n";
		return;
	    }
	    $url = &updateOrgsInUrl($url,$searchRef->{results}->{&cleanDotSlash($site)}->{orgParam},$orgsPossible); 
	}
    }
    return $url;
}

sub getNumOrgsInSearch {
    my ($url,$orgParam) = @_;
    return 0 if ($orgParam !~ /org/i);
    my $organismString;
    if ($url =~ /($orgParam=%5B.+?%5D)/) {
	$organismString = $1;
    } elsif ($url =~ /($orgParam=.+?)&/) {
	$organismString = $1;
    } else {
	return 0;
    }
    my @organisms = split("%2C",$organismString);
    return scalar @organisms;
}

sub orgsPossibleInSearch {
    my ($organisms,$allOrganisms,$logFh) = @_;
    my @present;
    foreach my $org (@{$organisms}) {
	my $found = 0;
	foreach my $allOrg (@{$allOrganisms}) {
	    if ($org eq $allOrg) {
		$found = 1;
		push @present, $org;
		last;
	    }
	}
	if ($found == 0) {
	    print $logFh "This organism is not available in this search so will not be included in the test:\n";
	    print $logFh "      $org\n";
	}
    }
    return \@present;
}

sub readOrganismsFromFile {
    my ($organismFile) = @_;
    my @names;
    open(IN, $organismFile) or die "cannot open organism file '$organismFile': $!";
    while (my $line = <IN>) {
	if ($line =~ /^\w/) {
	    chomp($line);
	    $line =~ s/^\s+|\s+$//g;
	    push @names, $line;
	}
    }
    close IN;
    return \@names;
}

sub updateOrgsInUrl {
    my ($url,$orgParam,$organismsForSearch) = @_;
    my ($old,$new);
    if ($url =~ /($orgParam=%5B.+?%5D)/) {
	$old = $1;
    } elsif ($url =~ /($orgParam=.+?)&/) {
	$old = $1;
    }
    $new = $orgParam."=%5B%22".join("%22%2C%22",@{$organismsForSearch})."%22%5D";
    $new =~ s/ /%20/g;
    $url =~ s/$old/$new/;
    return $url;
}

sub changeSearchSite {
    my ($search,$site) = @_;
    my $originalSite = &getSite($search);
    $search =~ s/$originalSite/$site/;
    return $search;
}

sub getSite {
    my ($fullUrl) = @_;
    if ($fullUrl =~ /^https?:\/\/([^\/]+\/[^\/]+)\//) {
	return $1;
    } else {
	die "ERROR: Was not able to find the site within this url: $fullUrl\n";
    }
}

sub getCount {
    my ($searchResults,$numRecords,$logFh) = @_;

    if (exists $searchResults->{features}) {   #jbrowse service
	my $numFeatures = 0;
	my $numSubFeatures = 0;
	foreach my $feature (@{$searchResults->{features}}) {
#	    print $logFh "feature: ".$feature->{name}."\n";
	    $numFeatures++;
	    $numSubFeatures += &getNumSubFeatures($feature);
	}
	print $logFh "For this JBrowse service call, there are $numFeatures features and $numSubFeatures sub-features.\n";
	return $numFeatures;
    } elsif (exists $searchResults->{records}) {   #regular search
	my %unique;
	foreach my $record (@{$searchResults->{records}}) {
	    $unique{$record->{attributes}->{primary_key}}=1;
	}

	my $count = keys %unique;
	if (! exists $searchResults->{meta}->{totalCount}) {
	    print $logFh "ERROR:  The totalCount variable does not exist in the json. There are $count unique primary keys.\n";
	    print $logFh "        Here is the json:\n";
	    print $logFh Dumper $searchResults;
	    return $count;
	} 
	if ($numRecords == -1 && $searchResults->{meta}->{totalCount} != $count) {
	    print $logFh "ERROR:  The desired number of records is set to -1 (to obtain all records), but the totalCount variable in the json ($searchResults->{meta}->{totalCount}) does not match the number of displayed unique primary keys ($count)\n";
	} elsif ($searchResults->{meta}->{totalCount} <= $numRecords && $count != $searchResults->{meta}->{totalCount}) {
	    print $logFh "ERROR:  The totalCount variable in the json ($searchResults->{meta}->{totalCount}) is less than or equal to the desired number of records ($numRecords), but does not match the number of displayed unique primary keys ($count)\n";
	} elsif ($searchResults->{meta}->{totalCount} > $numRecords && $count != $numRecords) {
	    print $logFh "ERROR:  The totalCount variable in the json ($searchResults->{meta}->{totalCount}) is greater than the desired number of records ($numRecords), but the desired number of records ($numRecords) does not match the number of displayed unique primary keys ($count)\n";
	} else {
	    print $logFh "There are $searchResults->{meta}->{totalCount} total results and $count displayed unique primary keys.\n";
	}
	return $searchResults->{meta}->{totalCount};
    } else {
	print $logFh "ERROR:  Could not find records or features to count.\n"; 
	return 0;
    }
}

sub getNumSubFeatures {
    my ($featureRef) = @_;
    my $num = 0;
    foreach my $subfeature (@{$featureRef->{subfeatures}}) {
#	print $logFh "     subfeature: ".$subfeature->{feature_id}."\n"; 
	$num++;
	$num += &getNumSubFeatures($subfeature);
    }
    return $num;
}




sub printReportFile {
    my ($site1,$site2,$searches,$logFh,$reportFile) = @_;
    print $logFh "Writing results out to report file: $reportFile\n";
    my $numSearches = keys %$searches;
    print $logFh "Total searches tested: $numSearches\n";

    open(my $reportFh,">",$reportFile) or die "cannot open for writing '$reportFile': $!";
    print $reportFh "\t".$site1;
    print $reportFh "\t" x 11;
    print $reportFh $site2."\n";
    my @fields = ("testPerformed","searchParamsExist","orgParam","orgParamType","numAllOrgs","numOrgsToTest","numOrgsTested","numResults","seconds","start","end");
    print $reportFh "searchName\t".join("\t",@fields)."\t".join("\t",@fields)."\n";
    foreach my $search (keys %{$searches}) {
	print $reportFh $search."\t";
	foreach my $site ((&cleanDotSlash($site1),&cleanDotSlash($site2))) {
	    foreach my $field (@fields) {
		if (exists $searches->{$search}->{results}->{$site}->{$field}) {
		    print $reportFh $searches->{$search}->{results}->{$site}->{$field}."\t";
		} else {
		    print $reportFh "-\t";
		}
	    }
	}
	print $reportFh "\n";
    }
    close $reportFh;
    my $time = localtime();
    print $logFh "\nFinished $time\n";
    close $logFh;
}

sub getProjects {
    my %projects = (
        MicrosporidiaDB => "microsporidiadb.org/micro",
        ToxoDB => "toxodb.org/toxo",
        AmoebaDB => "amoebadb.org/amoeba",
        CryptoDB => "cryptodb.org/cryptodb",
        FungiDB => "fungidb.org/fungidb",
        GiardiaDB => "giardiadb.org/giardiadb",
    	PiroplasmaDB => "piroplasmadb.org/piro",
    	PlasmoDB => "plasmodb.org/plasmo",
    	TrichDB => "trichdb.org/trichdb",
    	TriTrypDB => "tritrypdb.org/tritrypdb",
    	HostDB => "hostdb.org/hostdb",
    	SchistoDB => "schistodb.net/schisto",
    	VectorBase => "vectorbase.org/vectorbase",
	VEuPathDB => "veupathdb.org/veupathdb"
    );
    return \%projects;
}

sub clearCache {
    my ($site,$model,$logFh) = @_;
    $site =~ s/^.*\///;
    my $cmd = "wdkCache -model $model -reset && instance_manager manage $model reload /${site}";
    print $logFh "Resetting cache: $cmd\n\n";
    &runCmd($cmd);
}


sub usage {
    print STDERR "\nqaSearchesUniDb --help/-h --searchFile <file-with-webservices-urls> --reportFile <file-for-tab-results>  --logFile <file-for-detailed-log> --site1 <first-site-to-test>  --site2 <second-site-to-test> --numRecords <number-records-to-retrieve> --organisms <organisms-option> --headerText <text-for-curl-header>\n\n";
    print STDERR "This script tests webservices searches that are defined in the searchFile. The elapsed time and the total number of results are output into the reportFile. The numRecords option specifies how many results are shown. Two websites are tested by replacing the base urls that are defined in the searchFile.\n\n";
    print STDERR "Required options:\n";
    print STDERR "--searchFile <file-with-webservices-urls>  (e.g., service_reports/perf-table3-GET-tests-unidb.txt)\n";
    print STDERR "--reportFile <file-for-tab-results>   (e.g., report.txt)\n";
    print STDERR "--logFile <file-for-detailed-log>    (e.g., log.txt)\n";
    print STDERR "--site1 <first-site-to-test>   (e.g., w2.plasmodb.org/plasmo)\n";
    print STDERR "--site2 <first-site-to-test>   (e.g., beta.veupathdb.org/veupathdb.beta)\n";
    print STDERR "--numRecords <number_records-to-retrieve>   (e.g., 20)\n";
    print STDERR "--organisms <organisms-option>     (e.g., 'all' for all organisms on each site, 'preset' for organisms pre-defined in searchFile, or full path to file containing full organism names)\n";
    print STDERR "--headerText <text-for-curl-header>   (e.g., n or \"Content-Type: application/json\")\n\n";
    print STDERR "Example url in reportFile\n";
    print STDERR "https://plasmodb.org/plasmo/service/record-types/transcript/searches/GenesWithEpitopes/reports/standard?organism=%5B%22Plasmodium%20falciparum%203D7%22%2C%22Plasmodium%20falciparum%22%5D&epitope_confidence=%5B%22High%22%2C%22Medium%22%5D&reportConfig={\"pagination\":{\"numRecords\":20,\"offset\":0},\"attributes\":[\"primary_key\"],\"tables\":[]}\n\n";
    print STDERR "Example command lines:\n\n";
    print STDERR "performanceTestSearchesUniDb --searchFile service_reports/perf-table3-GET-tests-unidb.txt --reportFile report.txt --logFile log.txt --site1 w2.plasmodb.org/plasmo --site2 beta.veupathdb.org/veupathdb.beta --numRecords 20 --organisms all --headerText n\n\n";
    print STDERR "performanceTestSearchesUniDb --searchFile service_reports/perf-table3-GET-tests-unidb.txt --reportFile report.txt --logFile log.txt --site1 w2.veupathdb.org/veupathdb --site2 beta.veupathdb.org/veupathdb.beta --numRecords 20 --organisms preset --headerText \"Content-Type: application/json\"\n\n";
    print STDERR "performanceTestSearchesUniDb --searchFile service_reports/perf-table3-GET-tests-unidb.txt --reportFile report.txt --logFile log.txt --site1 w2.veupathdb.org/veupathdb --site2 beta.veupathdb.org/veupathdb.beta --numRecords 20 --organisms service_reports/organisms-tests.txt --headerText \"Content-Type: application/json\"\n\n";
}

1;
