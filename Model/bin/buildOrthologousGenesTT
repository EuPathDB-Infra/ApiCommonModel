#!/usr/bin/perl

use strict;

use lib "$ENV{GUS_HOME}/lib/perl";

use DBI;
use Getopt::Long qw(GetOptions);
use Data::Dumper;
use EbrcModelCommon::Model::tmUtils;
use POSIX; # for floor() function

my $startTime = time;
my ($help, $propfile, $instance, $schema, $suffix, $prefix, $filterValue, $debug);

Getopt::Long::Configure("pass_through");
GetOptions("propfile=s" => \$propfile,
           "instance=s" => \$instance,
           "schema=s" => \$schema,
           "suffix=s" => \$suffix,
           "prefix=s" => \$prefix,
           "filterValue=s" => \$filterValue,
           "debug!" => \$debug,
           "help|h" => \$help,
          );

usage() if ($help);

die "required parameter missing" unless ($propfile && $instance && $suffix);

my $dbh = EbrcModelCommon::Model::tmUtils::getDbHandle($instance, $schema, $propfile);

# create table
$dbh->do(<<SQL) or die "creating table";
   create table OrthologousGenes$suffix (
      source_id           varchar2(80),
      project_id          varchar2(20),
      na_feature_id       number(12),
      ortho_source_id     varchar2(80),
      ortho_na_feature_id number(12),
      ortho_product       varchar2(600),
      ortho_organism      varchar2(320),
      syntenic            varchar2(3)
   ) nologging
SQL

# prepare insert
my $insertStmt = $dbh->prepare(<<SQL);
   insert into OrthologousGenes$suffix
          (source_id, project_id, na_feature_id, ortho_source_id,
           ortho_na_feature_id, ortho_product, ortho_organism, syntenic)
   values (?, ?, ?, ?, ?, ?, ?, ?)
SQL

# store synteny spans
my $syntenyStartTime = time;
my (@a_na_sequence_id, @a_start, @a_end, @b_na_sequence_id, @b_start, @b_end);
my $syntenyCount = 0;

# $sequenceFirstRecord{X} is the smallest $i such that $a_na_sequence_id[$i] = X
my %sequenceFirstRecord;

my $syntenyQ = $dbh->prepare(<<SQL) or print STDERR $dbh->errstr;
     select a_na_sequence_id, a_start, a_end, b_na_sequence_id, b_start, b_end
     from apidb.Synteny
     order by a_na_sequence_id, b_na_sequence_id
SQL

$syntenyQ->execute();
while (my ($a_na_sequence_id, $a_start, $a_end, $b_na_sequence_id, $b_start, $b_end)
          = $syntenyQ->fetchrow_array()) {
  $a_na_sequence_id[$syntenyCount] = $a_na_sequence_id;
  $a_start[$syntenyCount] = $a_start;
  $a_end[$syntenyCount] = $a_end;
  $b_na_sequence_id[$syntenyCount] = $b_na_sequence_id;
  $b_start[$syntenyCount] = $b_start;
  $b_end[$syntenyCount] = $b_end;

  if ($syntenyCount == 0) {
    $sequenceFirstRecord{$a_na_sequence_id} = $syntenyCount;
  } elsif ($a_na_sequence_id != $a_na_sequence_id[$syntenyCount -1]) {
    $sequenceFirstRecord{$a_na_sequence_id} = $syntenyCount;
  }

  $syntenyCount++;
}
$syntenyQ->finish();
print STDERR "Finished reading $syntenyCount Synteny records in " . (time - $syntenyStartTime) . " seconds\n";

# prepare (main) query against GeneAttributes
my $geneQ = $dbh->prepare(<<SQL) or print STDERR $dbh->errstr;
     select orthomcl_name, source_id, project_id, na_feature_id,
           na_sequence_id, start_min, end_max, organism, species,
           case
             when length(product) <= 600
               then product
             else substr(product, 1, 597) || '...'
           end as product
     from GeneAttributes
     order by orthomcl_name, source_id
SQL

$geneQ->execute();

my $insertCount; # of records writtten to tuning table
my $ortholog_count = 0; # of genes in current ortholog group
my $current_group = "no such group"; # so the very first record is seen as the start of a group

my (@source_ids, @na_feature_ids, @na_sequence_ids, @start_mins, @end_maxes,
    @organisms, @species, @products, @project_ids);

print STDERR "Iterating through gene records\n";
while (my ($orthomcl_name, $source_id, $project_id, $na_feature_id,
           $na_sequence_id, $start_min, $end_max, $organism, $species,
           $product)
          = $geneQ->fetchrow_array()) {

  if ($orthomcl_name ne $current_group) {
    # we have seen a whole ortholog group
    # insert a row for each pair of different genes
    for (my $i = 0; $i < $ortholog_count; $i++) {
      for (my $j = 0; $j < $ortholog_count; $j++) {
	next if $i == $j; # genes must differ

	# check for synteny by searching the ordered list of synteny spans
	# print STDERR "\nchecking for synteny between (" . $na_sequence_ids[$i] . ', '
	#   . $start_mins[$i] . ', ' . $end_maxes[$i] . ') and (' . $na_sequence_ids[$j]
	#   . ', ' . $start_mins[$j] . ', ' . $end_maxes[$j] . ")\n";
	my $syntenic = 0;

	if ($sequenceFirstRecord{$na_sequence_ids[$i]} # is there a (nonzero) index for this seq ID?
	    or $a_na_sequence_id[0] == $na_sequence_ids[$i]) { # is this the ID in the 0th span?
	  for (my $k=$sequenceFirstRecord{$na_sequence_ids[$i]}; $k < $syntenyCount; $k++) {
	    if ($a_na_sequence_id[$k] == $na_sequence_ids[$i]
		and $a_start[$k] <= $end_maxes[$i]
		and $a_end[$k] >= $start_mins[$i]
		and $b_na_sequence_id[$k] == $na_sequence_ids[$j]
		and $b_start[$k] <= $end_maxes[$j]
		and $b_end[$k] >= $start_mins[$j]) {
	      # print STDERR "FOUND in Synteny span (" . $a_na_sequence_id[$k] . ", "
	      #   . $a_start[$k] . ", " . $a_end[$k] . ") - (" . $a_na_sequence_id[$k]
	      # . ", " . $a_start[$k] . ", " . $a_end[$k] . ")\n";
	      $syntenic = 1;
	      last;
	    }

	    # print STDERR "GIVING UP at Synteny span (" . $a_na_sequence_id[$k] . ", "
	    #   . $a_start[$k] . ", " . $a_end[$k] . ") - (" . $a_na_sequence_id[$k] . ", "
	    #     . $a_start[$k] . ", " . $a_end[$k] . ")\n";

	    last if $a_na_sequence_id[$k] > $na_sequence_ids[$i];
	  }
	}

	# insert OrthologousGenes row
	$insertStmt->execute($source_ids[$i], $project_ids[$i], $na_feature_ids[$i],
                             $source_ids[$j], $na_feature_ids[$j], $products[$j], $organisms[$j],
                             $syntenic ? "yes" : "no")
	  or die "executing insert statement";

	$insertCount++;
	print STDERR "Inserted $insertCount records in " . (time - $startTime) . " seconds ("
	  . floor($insertCount / (time - $startTime) + 0.5) . " records/second)\n"
	  unless ($insertCount % 1000000);
	$dbh->commit()
	  unless ($insertCount % 100000);
      } # for $i
    } # for $j

    # reset for next ortholog group
    $ortholog_count = 0;
    $current_group = $orthomcl_name;
  } # if ($orthomcl_name ne $current_group) (fetched whole group)

  # push this gene onto its group's info
  $source_ids[$ortholog_count] = $source_id;
  $na_feature_ids[$ortholog_count] = $na_feature_id;
  $na_sequence_ids[$ortholog_count] = $na_sequence_id;
  $start_mins[$ortholog_count] = $start_min;
  $end_maxes[$ortholog_count] = $end_max;
  $organisms[$ortholog_count] = $organism;
  $species[$ortholog_count] = $species;
  $products[$ortholog_count] = $product;
  $project_ids[$ortholog_count] = $project_id;
  $ortholog_count++;
} # while fetchrow of gene query

$geneQ->finish();

# process last group
for (my $i = 0; $i < $ortholog_count; $i++) {
  for (my $j = 0; $j < $ortholog_count; $j++) {
    next if $i == $j; # genes must differ

    # check for synteny
    my $syntenic = 0;
    for (my $k=0; $k < $syntenyCount; $k++) {
      if ($a_na_sequence_id[$k] == $na_sequence_ids[$i]
	  and $a_start[$k] <= $end_maxes[$i]
	  and $a_end[$k] >= $start_mins[$i]
	  and $b_na_sequence_id[$k] == $na_sequence_ids[$j]
	  and $b_start[$k] <= $end_maxes[$j]
	  and $b_end[$k] >= $start_mins[$j]) {
	$syntenic = 1;
	last;
      }

      last if $a_na_sequence_id[$k] > $na_sequence_ids[$i];
    }

    # insert OrthologousGenes row
    $insertStmt->execute($source_ids[$i], $project_ids[$i], $na_feature_ids[$i],
			 $source_ids[$j], $na_feature_ids[$j], $products[$j], $organisms[$j],
			 $syntenic ? "yes" : "no")
      or die "executing insert statement";
    $insertCount++;
  } # for $i
} # for $j

print STDERR "Inserted $insertCount records in " . (time - $startTime) . " seconds\n"
  if $insertCount;
$dbh->commit();

# create index
$dbh->do(<<SQL) or die "creating index";
    create index ogix$suffix
        on OrthologousGenes$suffix
        (source_id, syntenic desc, ortho_source_id, ortho_product, ortho_organism)
        tablespace indx
SQL

$dbh->disconnect();

sub usage {
  my $e = shift;
  if($e) {
    print STDERR $e . "\n";
  }
  print STDERR "
Build a table of pairs of different genes that share an OrthoMCL ID

usage:  buildOrthologousGenesTT -propfile prop_file -instance instance -schema schema -suffix suffix  [-debug] [-help]
";
  exit;
}

1;

