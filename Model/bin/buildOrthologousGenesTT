#!/usr/bin/perl

use strict;

use lib "$ENV{GUS_HOME}/lib/perl";

use DBI;
use Getopt::Long qw(GetOptions);
use Data::Dumper;
use EbrcModelCommon::Model::tmUtils;
use POSIX; # for floor() function
use File::Temp qw/ tempfile /;

my $LOG_INTERVAL = 10000000; # how many records to write between printing a status message

my $startTime = time;
my ($help, $propfile, $instance, $schema, $suffix, $prefix, $filterValue, $debug);

my $END_OF_RECORD_DELIMITER = "#EOR#\n";
my $END_OF_COLUMN_DELIMITER = "#EOC#\t";
my @_active_forked_processes;

Getopt::Long::Configure("pass_through");
GetOptions("propfile=s" => \$propfile,
           "instance=s" => \$instance,
           "schema=s" => \$schema,
           "suffix=s" => \$suffix,
           "prefix=s" => \$prefix,
           "filterValue=s" => \$filterValue,
           "debug!" => \$debug,
           "help|h" => \$help,
          );

usage() if ($help);

die "required parameter missing" unless ($propfile && $instance && $suffix);

my $dbh = EbrcModelCommon::Model::tmUtils::getDbHandle($instance, $schema, $propfile);
my ($rtnInstance, $rtnSchema, $password) = EbrcModelCommon::Model::tmUtils::getDbLoginInfo($instance, $schema, $propfile);

# create table
$dbh->do(<<SQL) or die "creating table";
   create table OrthologousGenes$suffix (
      source_id           varchar2(80),
      project_id          varchar2(20),
      na_feature_id       number(12),
      ortho_source_id     varchar2(80),
      ortho_na_feature_id number(12),
      ortho_product       varchar2(600),
      ortho_organism      varchar2(320),
      syntenic            varchar2(3)
   ) nologging
SQL

# start sqlldr
my ($sqlldrFh, $sqlldrFn, $dataFh, $dataFn, $sqlldrProcess, $sqlldrProcessString);
($sqlldrFh, $sqlldrFn) = tempfile("sqlldrXXXX", UNLINK => 0, SUFFIX => '.ctl');
$dataFn = "OrthologousGenes." . $suffix . "." . $instance . ".dat";
writeConfigFile($sqlldrFh, $dataFn, $schema, $suffix);
error("Could not create named pipe for sqlloader map file") unless(mkfifo($dataFn, 0700));
$sqlldrProcessString = "sqlldr $schema/$password\@$instance control=$sqlldrFn bindsize=512000 direct=TRUE log=${sqlldrFn}.log discardmax=0 errors=0 >/dev/null 2>&1 |";
my $pid = open($sqlldrProcess, $sqlldrProcessString) or die "Cannot open pipe for sqlldr process:  $!";
addActiveForkedProcess($pid);
open($dataFh, ">$dataFn") or die "Could not open named pipe $dataFn for writing: $!";

# store synteny spans
my $syntenyStartTime = time;
my (@a_na_sequence_id, @a_start, @a_end, @b_na_sequence_id, @b_start, @b_end);
my $syntenyCount = 0;

# $sequenceFirstRecord{X} is the smallest $i such that $a_na_sequence_id[$i] = X
my %sequenceFirstRecord;

my $syntenyQ = $dbh->prepare(<<SQL) or print STDERR $dbh->errstr;
     select a_na_sequence_id, a_start, a_end, b_na_sequence_id, b_start, b_end
     from apidb.Synteny
     order by a_na_sequence_id, b_na_sequence_id
SQL

$syntenyQ->execute();
while (my ($a_na_sequence_id, $a_start, $a_end, $b_na_sequence_id, $b_start, $b_end)
          = $syntenyQ->fetchrow_array()) {
  $a_na_sequence_id[$syntenyCount] = $a_na_sequence_id;
  $a_start[$syntenyCount] = $a_start;
  $a_end[$syntenyCount] = $a_end;
  $b_na_sequence_id[$syntenyCount] = $b_na_sequence_id;
  $b_start[$syntenyCount] = $b_start;
  $b_end[$syntenyCount] = $b_end;

  if ($syntenyCount == 0) {
    $sequenceFirstRecord{$a_na_sequence_id} = $syntenyCount;
  } elsif ($a_na_sequence_id != $a_na_sequence_id[$syntenyCount -1]) {
    $sequenceFirstRecord{$a_na_sequence_id} = $syntenyCount;
  }

  $syntenyCount++;
}
$syntenyQ->finish();
print STDERR "Finished reading $syntenyCount Synteny records in " . (time - $syntenyStartTime) . " seconds\n";

# prepare (main) query against GeneAttributes
my $geneQ = $dbh->prepare(<<SQL) or print STDERR $dbh->errstr;
     select orthomcl_name, source_id, project_id, na_feature_id,
           na_sequence_id, start_min, end_max, organism, species,
           case
             when length(product) <= 600
               then product
             else substr(product, 1, 597) || '...'
           end as product
     from GeneAttributes
     order by orthomcl_name, source_id
SQL

$geneQ->execute();

my $insertCount; # of records writtten to tuning table
my $ortholog_count = 0; # of genes in current ortholog group
my $current_group = "no such group"; # so the very first record is seen as the start of a group

my (@source_ids, @na_feature_ids, @na_sequence_ids, @start_mins, @end_maxes,
    @organisms, @species, @products, @project_ids);

print STDERR "Iterating through gene records\n";
while (my ($orthomcl_name, $source_id, $project_id, $na_feature_id,
           $na_sequence_id, $start_min, $end_max, $organism, $species,
           $product)
          = $geneQ->fetchrow_array()) {

  if ($orthomcl_name ne $current_group) {
    # we have seen a whole ortholog group

    # start of sub
    storeGroup($ortholog_count, \@source_ids, \@project_ids, \@na_sequence_ids, \@start_mins, \@end_maxes, \@na_feature_ids, \@products, \@organisms, $syntenyCount, \@a_na_sequence_id, \@a_start, \@a_end, \@b_na_sequence_id, \@b_start, \@b_end, \%sequenceFirstRecord, \$insertCount);
  # end of sub

    # reset for next ortholog group
    $ortholog_count = 0;
    $current_group = $orthomcl_name;

  } # if ($orthomcl_name ne $current_group) (fetched whole group)


  # push this gene onto its group's info
  $source_ids[$ortholog_count] = $source_id;
  $na_feature_ids[$ortholog_count] = $na_feature_id;
  $na_sequence_ids[$ortholog_count] = $na_sequence_id;
  $start_mins[$ortholog_count] = $start_min;
  $end_maxes[$ortholog_count] = $end_max;
  $organisms[$ortholog_count] = $organism;
  $species[$ortholog_count] = $species;
  $products[$ortholog_count] = $product;
  $project_ids[$ortholog_count] = $project_id;
  $ortholog_count++;
} # while fetchrow of gene query

$geneQ->finish();

# process last group
storeGroup($ortholog_count, \@source_ids, \@project_ids, \@na_sequence_ids, \@start_mins, \@end_maxes, \@na_feature_ids, \@products, \@organisms, $syntenyCount, \@a_na_sequence_id, \@a_start, \@a_end, \@b_na_sequence_id, \@b_start, \@b_end, \%sequenceFirstRecord, \$insertCount);

print STDERR "Inserted $insertCount records in " . (time - $startTime) . " seconds\n"
  if $insertCount;
close $dataFh;
close $sqlldrProcess;

# create index
$dbh->do(<<SQL) or die "creating index";
    create index ogix$suffix
        on OrthologousGenes$suffix
        (source_id, syntenic desc, ortho_source_id, ortho_product, ortho_organism)
        tablespace indx
SQL

$dbh->disconnect();

sub storeGroup {
  my ($ortholog_count, $source_ids_ref, $project_ids_ref, $na_sequence_ids_ref, $start_mins_ref, $end_maxes_ref, $na_feature_ids_ref, $products_ref, $organisms_ref, $syntenyCount, $a_na_sequence_id_ref, $a_start_ref, $a_end_ref, $b_na_sequence_id_ref, $b_start_ref, $b_end_ref, $sequenceFirstRecord_ref, $insertCount_ref) = @_;

    # insert a row for each pair of different genes
    for (my $i = 0; $i < $ortholog_count; $i++) {
      for (my $j = 0; $j < $ortholog_count; $j++) {
	next if $i == $j; # genes must differ

	# check for synteny by searching the ordered list of synteny spans
	# print STDERR "\nchecking for synteny between (" . ${$na_sequence_ids_ref}[$i] . ', '
	#   . ${$start_mins_ref}[$i] . ', ' . ${$end_maxes_ref}[$i] . ') and (' . ${$na_sequence_ids_ref}[$j]
	#   . ', ' . ${$start_mins_ref}[$j] . ', ' . ${$end_maxes_ref}[$j] . ")\n";
	my $syntenic = 0;

	if (${$sequenceFirstRecord_ref}{${$na_sequence_ids_ref}[$i]} # is there a (nonzero) index for this seq ID?
	    or ${$a_na_sequence_id_ref}[0] == ${$na_sequence_ids_ref}[$i]) { # is this the ID in the 0th span?
	  for (my $k=${$sequenceFirstRecord_ref}{${$na_sequence_ids_ref}[$i]}; $k < $syntenyCount; $k++) {
	    if (${$a_na_sequence_id_ref}[$k] == ${$na_sequence_ids_ref}[$i]
		and ${$a_start_ref}[$k] <= ${$end_maxes_ref}[$i]
		and ${$a_end_ref}[$k] >= ${$start_mins_ref}[$i]
		and ${$b_na_sequence_id_ref}[$k] == ${$na_sequence_ids_ref}[$j]
		and ${$b_start_ref}[$k] <= ${$end_maxes_ref}[$j]
		and ${$b_end_ref}[$k] >= ${$start_mins_ref}[$j]) {
	      # print STDERR "FOUND in Synteny span (" . ${$a_na_sequence_id_ref}[$k] . ", "
	      #   . ${$a_start_ref}[$k] . ", " . ${$a_end_ref}[$k] . ") - (" . ${$a_na_sequence_id_ref}[$k]
	      # . ", " . ${$a_start_ref}[$k] . ", " . ${$a_end_ref}[$k] . ")\n";
	      $syntenic = 1;
	      last;
	    }

	    # print STDERR "GIVING UP at Synteny span (" . ${$a_na_sequence_id_ref}[$k] . ", "
	    #   . ${$a_start_ref}[$k] . ", " . ${$a_end_ref}[$k] . ") - (" . ${$a_na_sequence_id_ref}[$k] . ", "
	    #     . ${$a_start_ref}[$k] . ", " . ${$a_end_ref}[$k] . ")\n";

	    last if ${$a_na_sequence_id_ref}[$k] > ${$na_sequence_ids_ref}[$i];
	  }
	}

	# insert OrthologousGenes row
	my @ogRow = (${$source_ids_ref}[$i], ${$project_ids_ref}[$i], ${$na_feature_ids_ref}[$i],
			  ${$source_ids_ref}[$j], ${$na_feature_ids_ref}[$j], ${$products_ref}[$j], ${$organisms_ref}[$j],
			  $syntenic ? "yes" : "no");

	print $dataFh join($END_OF_COLUMN_DELIMITER, @ogRow) . $END_OF_RECORD_DELIMITER;


	${$insertCount_ref}++;
	my $elapsedTime = time - $startTime;
	my $rateMessage;
	$rateMessage = " (" . floor( 0.5 + (${$insertCount_ref} / $elapsedTime) ) . " records/second)"
	  if $elapsedTime;
	print STDERR "Inserted ${$insertCount_ref} records in " . $elapsedTime . " seconds $rateMessage\n"
	  unless (${$insertCount_ref} % $LOG_INTERVAL);
      } # for $i
    } # for $j
}

sub usage {
  my $e = shift;
  if($e) {
    print STDERR $e . "\n";
  }
  print STDERR "
Build a table of pairs of different genes that share an OrthoMCL ID

usage:  buildOrthologousGenesTT -propfile prop_file -instance instance -schema schema -suffix suffix  [-debug] [-help]
";
  exit;
}

sub getActiveForkedProcesses {

  return @_active_forked_processes || [];
}

sub addActiveForkedProcess {
  my ($pid) = @_;

  push @_active_forked_processes, $pid;
}

sub resetActiveForkedProcesses {

  @_active_forked_processes = [];
}

sub error {
  my ($msg) = @_;
  print STDERR "\nERROR: $msg\n";

  foreach my $pid (@{getActiveForkedProcesses()}) {
    kill(9, $pid);
  }
}

sub writeConfigFile {
  my ($sqlldrFh, $dataFn, $schema, $suffix) = @_;

  my $ctlText = <<CTL;
UNRECOVERABLE
LOAD DATA
CHARACTERSET UTF8 LENGTH SEMANTICS CHAR
INFILE '$dataFn' "str '#EOR#\\n'"
APPEND
INTO TABLE $schema.OrthologousGenes$suffix
FIELDS TERMINATED BY '#EOC#\\t'
TRAILING NULLCOLS
(source_id char(80),
 project_id char(20),
 na_feature_id char(12),
 ortho_source_id char(80),
 ortho_na_feature_id char(12),
 ortho_product char(600),
 ortho_organism char(320),
 syntenic char(3)
)
CTL

  print $sqlldrFh $ctlText;
  close $sqlldrFh;
}

1;

