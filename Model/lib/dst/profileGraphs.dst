[templateStart] 
name=genePageGraphDescriptions
anchorFile=ApiCommonModel/Model/lib/wdk/model/records/geneTableQueries.xml
prop=datasetName
prop=datasetNamePattern
prop=graphModule
prop=graphXAxisSamplesDescription
prop=graphYAxisDescription
prop=graphPriorityOrderGrouping
prop=isGraphCustom
>templateTextStart<
      UNION
      select '${datasetName}' as dataset,
       '${graphModule}' as module,
       '${graphXAxisSamplesDescription}' as x_axis,
       '${graphYAxisDescription}' as y_axis,
       '${isGraphCustom}' as is_graph_custom,
       ${graphPriorityOrderGrouping} as order_num
       from dual
>templateTextEnd<


[templateStart] 
name=antibodyArrayGraphDescriptions
anchorFile=ApiCommonModel/Model/lib/wdk/model/records/geneTableQueries.xml
prop=datasetName
prop=datasetNamePattern
prop=datasetDisplayName 
prop=datasetDescrip
prop=graphModule
prop=graphXAxisSamplesDescription
prop=graphYAxisDescription
prop=graphVisibleParts
prop=graphGenePageSection
prop=graphPriorityOrderGrouping
prop=isGraphCustom
prop=defaultGraphCategory
>templateTextStart<
      UNION
      select '${datasetName}' as dataset,
       '${graphModule}' as module,
       '${graphXAxisSamplesDescription}' as x_axis,
       '${graphYAxisDescription}' as y_axis,
       '${isGraphCustom}' as is_graph_custom,
       ${graphPriorityOrderGrouping} as order_num
       from dual
>templateTextEnd<

[templateStart] 
name=pathwayGraphs
anchorFile=ApiCommonModel/Model/lib/wdk/model/records/pathwayTableQueries.xml
prop=presenterId
prop=datasetDisplayName 
prop=graphModule
prop=projectName
prop=isGraphCustom
prop=graphXAxisSamplesDescription
>templateTextStart<
      UNION
      select '${datasetDisplayName}' as display_name,
                  'type=${graphModule}&project_id=${projectName}&datasetId=${presenterId}&default=1' as internal,
                  '${isGraphCustom}' as is_graph_custom,
                  '${graphXAxisSamplesDescription}' as xaxis_description,
                  '${projectName}' as project_id
       from dual
>templateTextEnd<

[templateStart] 
name=microarrayGraphDescriptions
anchorFile=ApiCommonModel/Model/lib/wdk/model/records/geneTableQueries.xml
prop=datasetName
prop=datasetNamePattern
prop=graphModule
prop=graphXAxisSamplesDescription
prop=graphYAxisDescription
prop=graphPriorityOrderGrouping
prop=isGraphCustom
>templateTextStart<
      UNION
      select '${datasetName}' as dataset,
       '${graphModule}' as module,
       '${graphXAxisSamplesDescription}' as x_axis,
       '${graphYAxisDescription}' as y_axis,
       '${isGraphCustom}' as is_graph_custom,
       ${graphPriorityOrderGrouping} as order_num
       from dual
>templateTextEnd<


[templateStart] 
name=phenotypeGraphDescriptions
anchorFile=ApiCommonModel/Model/lib/wdk/model/records/geneTableQueries.xml
prop=datasetName
prop=datasetNamePattern
prop=graphModule
prop=graphXAxisSamplesDescription
prop=graphYAxisDescription
prop=graphPriorityOrderGrouping
prop=isGraphCustom
>templateTextStart<
      UNION
      select '${datasetName}' as dataset,
       '${graphModule}' as module,
       '${graphXAxisSamplesDescription}' as x_axis,
       '${graphYAxisDescription}' as y_axis,
       '${isGraphCustom}' as is_graph_custom,
       ${graphPriorityOrderGrouping} as order_num
       from dual
>templateTextEnd<




[templateStart] 
name=proteomicsGraphDescriptions
anchorFile=ApiCommonModel/Model/lib/wdk/model/records/geneTableQueries.xml
prop=datasetName
prop=datasetNamePattern
prop=graphModule
prop=graphXAxisSamplesDescription
prop=graphYAxisDescription
prop=graphPriorityOrderGrouping
prop=isGraphCustom
>templateTextStart<
      UNION
select '${datasetName}'as dataset,
       '${graphModule}' as module,
       '${graphXAxisSamplesDescription}' as x_axis,
       '${graphYAxisDescription}' as y_axis,
       '${isGraphCustom}' as is_graph_custom,
       ${graphPriorityOrderGrouping} as order_num
       from dual
>templateTextEnd<



[templateStart] 
name=compoundPageGraphDescriptions
anchorFile=ApiCommonModel/Model/lib/wdk/model/records/compoundTableQueries.xml
prop=datasetName
prop=graphModule
prop=graphXAxisSamplesDescription
prop=graphYAxisDescription
prop=graphPriorityOrderGrouping
prop=isGraphCustom
>templateTextStart<
      UNION
      select '${datasetName}' as dataset_name
      , '${graphModule}' as module
      , '${graphXAxisSamplesDescription}' as x_axis
      , '${graphYAxisDescription}' as y_axis
      , '${isGraphCustom}' as is_graph_custom
      , ${graphPriorityOrderGrouping} as order_num
      from dual
>templateTextEnd<

[templateStart] 
name=datasetExampleGraphDescriptions
anchorFile=ApiCommonModel/Model/lib/wdk/model/records/datasetRecords.xml
prop=datasetName
prop=datasetDisplayName 
prop=datasetDescrip
prop=graphModule
prop=graphXAxisSamplesDescription
prop=graphYAxisDescription
prop=graphPriorityOrderGrouping
prop=isGraphCustom
>templateTextStart<
      UNION
      select '${datasetName}' as dataset,
       '${datasetDisplayName}' as display_name,
       '${datasetDescrip}' as description,
       '${graphModule}' as module,
       '${graphXAxisSamplesDescription}' as x_axis,
       '${graphYAxisDescription}' as y_axis,
       '${isGraphCustom}' as is_graph_custom,
       ${graphPriorityOrderGrouping} as order_num
       from dual
>templateTextEnd<


[templateStart] 
name=profileAttributeQueries
anchorFile=ApiCommonModel/Model/lib/wdk/model/records/transcriptAttributeQueries.xml
prop=datasetName
prop=projectName
>templateTextStart<
        <sqlQuery name="ProfileSamples${datasetName}" doNotTest="true" attributeMetaQueryRef="TranscriptAttributes.MetaProfileSamples${datasetName}"  includeProjects="${projectName}">
            <column name="source_id"/>
            <column name="gene_source_id"/>
            <column name="project_id"/>
            <sql>
              <![CDATA[
                       select ta.source_id, ta.project_id, ta.gene_source_id, p.*
                       from apidbtuning.transcriptattributes ta
                       , (select * from table (apidb.pivot('SELect * from (SELECT ga.source_id as profile_source_id, ''pan_'' || to_char(nfe.protocol_app_node_id) as protocol_app_node, to_number(round(nfe.value, 2)) as value FROM results.nafeatureexpression nfe, apidbtuning.profilesamples ps, apidbtuning.geneattributes ga WHERE nfe.PROTOCOL_APP_NODE_ID = ps.PROTOCOL_APP_NODE_ID and ps.DATASET_NAME = ''${datasetName}'' and ps.profile_type = ''values'' and nfe.NA_FEATURE_ID = ga.NA_FEATURE_ID)'))) p
                       where ta.gene_source_id = p.profile_source_id (+)
              ]]>
            </sql>
        </sqlQuery>

       <sqlQuery name="MetaProfileSamples${datasetName}" includeProjects="${projectName}">
          <column name="name" />
          <column name="display_name" />
          <column name="help" />
          <sql excludeProjects="EuPathDB">
            <![CDATA[
           select 'pan_' || ps.PROTOCOL_APP_NODE_ID as name
                , CASE WHEN ct.ct > 1
                        THEN nvl(ps.profile_set_suffix, ps.study_name) || ' - ' || ps.protocol_app_node_name 
                       WHEN ct.ct = 1 and ps.profile_set_suffix is not null
                        THEN ps.profile_set_suffix || ' - ' || ps.protocol_app_node_name 
                       ELSE ps.protocol_app_node_name 
                  END as display_name,
                  dp.value as help
                     from apidbtuning.profilesamples ps,
                      (select DATASET_NAME, count(*) as ct from apidbtuning.profiletype where profile_type = 'values' group by dataset_name) ct
                    , APIDBTUNING.DATASETPROPERTY dp 
                    , APIDBTUNING.datasetnametaxon dnt
                     where ps.DATASET_NAME = '${datasetName}'
                      and ps.profile_type = 'values'
                      and ps.dataset_name = ct.dataset_name
                      and ps.dataset_name = dnt.name
                      and dnt.dataset_presenter_id = dp.dataset_presenter_id
                      and dp.property = 'profileSamplesHelp'
                      ORDER BY ps.study_id, ps.NODE_ORDER_NUM
            ]]>
          </sql>  
          <sql includeProjects="EuPathDB">
            <![CDATA[
            select '${datasetName}' as name, '${datasetName}' from dual
            ]]>
          </sql>  

       </sqlQuery>
>templateTextEnd<



[templateStart] 
name=profileAttributeQueriesStrandSpecificRNASeq
anchorFile=ApiCommonModel/Model/lib/wdk/model/records/transcriptAttributeQueries.xml
prop=datasetName
prop=projectName
prop=sense
prop=antisense
>templateTextStart<
        <sqlQuery name="ProfileSamples${datasetName}" doNotTest="true" attributeMetaQueryRef="TranscriptAttributes.MetaProfileSamples${datasetName}"  includeProjects="${projectName}">
            <column name="source_id"/>
            <column name="gene_source_id"/>
            <column name="project_id"/>
            <sql>
              <![CDATA[
                       select ta.source_id, ta.project_id, ta.gene_source_id, p.*
                       from apidbtuning.transcriptattributes ta
                       , (select * from table (apidb.pivot('SELect * from (SELECT ga.source_id as profile_source_id, ''pan_'' || to_char(nfe.protocol_app_node_id) as protocol_app_node, to_number(round(nfe.value, 2)) as value FROM results.nafeatureexpression nfe, apidbtuning.profilesamples ps, apidbtuning.geneattributes ga WHERE nfe.PROTOCOL_APP_NODE_ID = ps.PROTOCOL_APP_NODE_ID and ps.DATASET_NAME = ''${datasetName}'' and ps.profile_type = ''values'' and nfe.NA_FEATURE_ID = ga.NA_FEATURE_ID)'))) p
                       where ta.gene_source_id = p.profile_source_id (+)
              ]]>
            </sql>
        </sqlQuery>

       <sqlQuery name="MetaProfileSamples${datasetName}" includeProjects="${projectName}">
          <column name="name" />
          <column name="display_name" />
          <column name="help" />
          <sql excludeProjects="EuPathDB">
            <![CDATA[
SELECT 'pan_' || ps.PROTOCOL_APP_NODE_ID AS name, 
  CASE
    WHEN ps.profile_set_suffix IS NULL
    THEN ''
    ELSE ps.profile_set_suffix || ' '
  END
  ||
  CASE
    WHEN regexp_like(ps.study_name, '${sense}')
    THEN 'sense'
    WHEN regexp_like(ps.study_name, '${antisense}')
    THEN 'antisense'
    ELSE 'unstranded'
  END
  || ' - ' || ps.protocol_app_node_name AS display_name,
  dp.value as help
FROM apidbtuning.profilesamples ps
 , APIDBTUNING.DATASETPROPERTY dp 
 , APIDBTUNING.datasetnametaxon dnt
WHERE ps.DATASET_NAME = '${datasetName}'
AND ps.profile_type = 'values'
and ps.dataset_name = dnt.name
and dnt.dataset_presenter_id = dp.dataset_presenter_id
and dp.property = 'profileSamplesHelp'
ORDER BY ps.study_id, ps.NODE_ORDER_NUM
            ]]>
          </sql>  
          <sql includeProjects="EuPathDB">
            <![CDATA[
            select '${datasetName}' as name, '${datasetName}' from dual
            ]]>
          </sql>  
       </sqlQuery>
>templateTextEnd<



[templateStart] 
name=profileAttributeRef
anchorFile=ApiCommonModel/Model/lib/wdk/model/records/transcriptRecord.xml
prop=datasetName
prop=projectName
>templateTextStart<
              <attributeQueryRef ref="TranscriptAttributes.ProfileSamples${datasetName}" attributeMetaQueryRef="TranscriptAttributes.MetaProfileSamples${datasetName}" includeProjects="${projectName}">
              </attributeQueryRef>
>templateTextEnd<
