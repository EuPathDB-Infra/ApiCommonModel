processedTranscriptColor = function( featureObject, variableName, glyphObject, trackObject ) {
   return(featureObject.get("strand") == 1 ? "#000080" : "#aa3311" )
 }
nrdbColor = function( featureObject, variableName, glyphObject, trackObject ) {
   return(featureObject.get("strand") == 1 ? "mediumblue" :  "crimson")
 }
orfColor = function( featureObject, variableName, glyphObject, trackObject ) {
   return(featureObject.get("strand") == 1 ? "dodgerblue" :  "mediumvioletred")
 }
estColor = function( featureObject, variableName, glyphObject, trackObject ) {
   return(featureObject.get("strand") == 1 ? "deepskyblue" :  "pink")
 }
estBorderColor = function( featureObject, variableName, glyphObject, trackObject ) {
   return(featureObject.get("strand") == 1 ? "darkslateblue" :  "deeppink")
 }
popsetColor = function( featureObject, variableName, glyphObject, trackObject ) {
   return(featureObject.get("strand") == 1 ? "lightblue" :  "red")
 }
processedTranscriptDetails = function(track, feature, featureDiv) {
    var test = gene_title(null, "PlasmoDB", this.feature.get("name"), this.feature.get("contig"), this.feature.get("startm"), this.feature.get("soTerm"), this.feature.get("product"), this.feature.get("taxon"), null, null, this.feature.get("orthomcl_name"), this.feature.get("geneId"), "/TODO", "/a/app/record", this.feature.get("aaSeqId"));
   return(test);
 }
orfDetails = function(track, feature, featureDiv) {
    var rows = new Array();
    rows.push(twoColRow('Name:', feature.get("name")));
    rows.push(twoColRow('Position:', positionString(track.refSeq.name, feature.get("start"), feature.get("end"), feature.get("strand"))));
    rows.push(twoColRow('Length:', feature.get("Length") + "aa"));
    return table(rows);
 }
popsetDetails = function(track, feature, featureDiv) {
    var rows = new Array();
    rows.push(twoColRow('Name:', feature.get("name")));
    rows.push(twoColRow('Score:', feature.get("score")));
    rows.push(twoColRow('Expect:', feature.get("Expect")));
    rows.push(twoColRow('Match:', feature.get("MatchLen") + " nt"));
    rows.push(twoColRow('Note:', feature.get("Note")));
    return table(rows);
 }
estDetails = function(track, feature, featureDiv) {
    var rows = new Array();
    var name  = feature.get("name"); 
    var start = feature.get("start");
    var end = feature.get("end");
    var strand = feature.get("strand");
    var score = feature.get("score");
    var percent_identity = feature.get("PercentIdentity");
    var primer = feature.get("Primer");
    var library = feature.get("Library");
    var vector = feature.get("Vector");
    var stage = feature.get("Stage");
    rows.push(twoColRow('Name:', name));
    rows.push(twoColRow('Position:', positionString(track.refSeq.name, start, end, strand)));
    rows.push(twoColRow('Percent Identity:', percent_identity));
    rows.push(twoColRow('Length:', Math.abs(end-start) + " nt"));
    rows.push(twoColRow('Score:', score));
    rows.push(twoColRow('Library:', library));
    if(vector) rows.push(twoColRow('Vector:', vector));
    if(primer) rows.push(twoColRow('Primer:', primer));
    if(stage) rows.push(twoColRow('Stage:', stage));
    return table(rows);
 }
nrdbDetails = function(track, feature, featureDiv) {
    var rows = new Array();
    var name = feature.get("name");
    var score = feature.get("score");
    var pctI = feature.get("PercentIdentity");
    var desc = feature.get("Defline");
    desc.replace("\001", "");
    rows.push(twoColRow('GI number:', name));
    rows.push(twoColRow('Score:', score));
    rows.push(twoColRow('Position:', positionString(track.refSeq.name, feature.get("start"), feature.get("end"), feature.get("strand"))));
    rows.push(twoColRow('Identity:', round(pctI, 1)));
    if(desc) rows.push(twoColRow('Description:', desc));
    return table(rows);
 }
