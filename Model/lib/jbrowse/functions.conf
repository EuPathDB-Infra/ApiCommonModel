haplotypeColorFxn = function( feature, variableName, glyphObject, trackObject ) {
  return haplotypeColor(feature);
 }
snpColorFxn = function( feature, variableName, glyphObject, trackObject ) {
  return snpBgFromIsCodingAndNonSyn(feature);
 }
colorSpliceSiteFxn = function(feature, variableName, glyphObject, trackObject) {
  return colorSpliceSite(feature);
 }
interproColorFxn = function( feature, variableName, glyphObject, trackObject ) {
  return interproColors(feature);
 }
chipColorFxn = function( feature, variableName, glyphObject, trackObject ) {
  return chipColor(feature, variableName, glyphObject, trackObject);
 }
colorSegmentByScoreFxn = function( feature, variableName, glyphObject, trackObject ) {
  return colorSegmentByScore(feature, variableName, glyphObject, trackObject);
 }
massSpecColor = function( feature, variableName, glyphObject, trackObject ) {
  var color = feature.get("color");
  if(!color) {
    color = feature.parent().get("color");
  }  
  if(color) {
    var colors = color.split(';');
    return colors[0];
  }
  return 'yellow';
 }
massSpecLabel = function(track, feature, featureDiv) {
  return(feature.get("sample"));
 }
processedTranscriptColor = function( featureObject, variableName, glyphObject, trackObject ) {
   return(featureObject.get("strand") == 1 ? "#000080" : "#aa3311" )
 }
syntenyColorFxn = function( featureObject, variableName, glyphObject, trackObject ) {
   return syntenyColor(featureObject);
 }
alternateTranscriptColor = function( featureObject, variableName, glyphObject, trackObject ) {
   return(featureObject.get("strand") == 1 ? "dodgerblue" : "hotpink" )
 }
nrdbColor = function( featureObject, variableName, glyphObject, trackObject ) {
   return(featureObject.get("strand") == 1 ? "mediumblue" :  "crimson")
 }
orfColor = function( featureObject, variableName, glyphObject, trackObject ) {
   return(featureObject.get("strand") == 1 ? "dodgerblue" :  "mediumvioletred")
 }
piggyBacColor = function( featureObject, variableName, glyphObject, trackObject ) {
   return(featureObject.get("strand") == 1 ? "dodgerblue" :  "mediumvioletred")
 }
estColor = function( featureObject, variableName, glyphObject, trackObject ) {
   return(featureObject.get("strand") == 1 ? "deepskyblue" :  "pink")
 }
estBorderColor = function( featureObject, variableName, glyphObject, trackObject ) {
   return(featureObject.get("strand") == 1 ? "darkslateblue" :  "deeppink")
 }
popsetColor = function( featureObject, variableName, glyphObject, trackObject ) {
   return(featureObject.get("strand") == 1 ? "lightblue" :  "red")
 }
orfDetails = function(track, feature, featureDiv) {
    var rows = new Array();
    rows.push(twoColRow('Name:', feature.get("name")));
    rows.push(twoColRow('Position:', positionString(track.refSeq.name, feature.get("startm"), feature.get("end"), feature.get("strand"))));
    rows.push(twoColRow('Length:', feature.get("length") + "aa"));
    return table(rows);
 }
gffTssChabbertFxn = function(track, feature, featureDiv) {
    return gffTssChabbert(track, feature, featureDiv);
 }
interproTitleFxn = function(track, feature, featureDiv) {
    return interproTitle(track, feature, featureDiv);
 }
exportPredTitleFxn = function(track, feature, featureDiv) {
    return exportPredTitle(track, feature);
 }
interproLinkFxn = function(track, feature, featureDiv) {
    return interproLink(feature);
 }
lowcomplexitySegTitleFxn = function(track, feature, featureDiv) {
    return lowcomplexitySegTitle(track, feature, featureDiv);
 }
blastpTitleFxn = function(track, feature, featureDiv) {
    return blastpTitle(track, feature, featureDiv);
 }
tmhmmTitleFxn = function(track, feature, featureDiv) {
    return tmhmmTitle(track, feature, featureDiv);
 }
signalpTitleFxn = function(track, feature, featureDiv) {
    return signalpTitle(track, feature, featureDiv);
 }
piggyBacTitle = function(track, feature, featureDiv) {
    var rows = new Array();
    rows.push(twoColRow('Position:', positionString(track.refSeq.name, feature.get("startm"), feature.get("end"), feature.get("strand"))));
    return table(rows);
 }
positionTitle = function(track, feature, featureDiv) {
    var rows = new Array();
    rows.push(twoColRow('Position:', positionString(track.refSeq.name, feature.get("startm"), feature.get("end"), feature.get("strand"))));
    return table(rows);
 }
popsetDetails = function(track, feature, featureDiv) {
    var rows = new Array();
    rows.push(twoColRow('Name:', feature.get("name")));
    rows.push(twoColRow('Score:', feature.get("score")));
    rows.push(twoColRow('Expect:', feature.get("expect")));
    rows.push(twoColRow('Match:', feature.get("matchlen") + " nt"));
    rows.push(twoColRow('Note:', feature.get("note")));
    return table(rows);
 }
estDetails = function(track, feature, featureDiv) {
    var rows = new Array();
    var name  = feature.get("name"); 
    var start = feature.get("startm");
    var end = feature.get("end");
    var strand = feature.get("strand");
    var score = feature.get("score");
    var percent_identity = feature.get("percentidentity");
    var primer = feature.get("primer");
    var library = feature.get("library");
    var vector = feature.get("vector");
    var stage = feature.get("stage");
    rows.push(twoColRow('Name:', name));
    rows.push(twoColRow('Position:', positionString(track.refSeq.name, start, end, strand)));
    rows.push(twoColRow('Percent Identity:', percent_identity));
    rows.push(twoColRow('Length:', Math.abs(end-start) + " nt"));
    rows.push(twoColRow('Score:', score));
    rows.push(twoColRow('Library:', library));
    if(vector) rows.push(twoColRow('Vector:', vector));
    if(primer) rows.push(twoColRow('Primer:', primer));
    if(stage) rows.push(twoColRow('Stage:', stage));
    return table(rows);
 }
nrdbDetails = function(track, feature, featureDiv) {
    var rows = new Array();
    var name = feature.get("name");
    var score = feature.get("score");
    var pctI = feature.get("percentidentity");
    var desc = feature.get("defline");
    desc.replace("\001", "");
    rows.push(twoColRow('GI number:', name));
    rows.push(twoColRow('Score:', score));
    rows.push(twoColRow('Position:', positionString(track.refSeq.name, feature.get("startm"), feature.get("end"), feature.get("strand"))));
    rows.push(twoColRow('Identity:', round(pctI, 1)));
    if(desc) rows.push(twoColRow('Description:', desc));
    return table(rows);
 }
processedTranscriptDetails = function(track, feature, featureDiv) {
    var projectId = feature.get("projectid");                           
    var sourceId = feature.get("name");
    var chr = track.refSeq.name;
    var strand = feature.get("strand");
    var model = orientAndGetUtrsAndCDS(strand,feature.get("subfeatures"));
    var gene_id = feature.get("geneid");
    var soTerm = feature.get("soterm");
    var isPseudo = feature.get("ispseudo");
    var aaSeqId = feature.get("aaseqid");
    var orthomclName = feature.get("orthomcl_name");
    if(orthomclName === sourceId) orthomclName = "";
    soTerm = soTerm.replace(/_/g, " ");
    soTerm = titleCase(soTerm);
    if(isPseudo === 1) soTerm = soTerm + " (pseudogene)";
    var product = feature.get("product") ? feature.get("product") : feature.get("description");
    var taxon = feature.get("taxon");
    var window = 500;
    var linkStart = feature.get("startm") - window;
    var linkStop = feature.get("end") + window;
    var seqId = feature.get("contig");
    var loc = seqId + ":" + linkStart + ".." + linkStop;
    var baseRecordUrl = "/a/app/record";
    var dataRoot = track.browser.config.dataRoot;
    var baseUrl = track.browser.config.baseUrl;
    return gene_title(this, projectId, sourceId, chr, model[1], soTerm, product, taxon, model[0], model[2], loc, orthomclName, gene_id, dataRoot, baseUrl, baseRecordUrl, aaSeqId);
 }
massSpecDetails = function(track, feature, featureDiv) {
  var rows = new Array();
  var count = feature.get("count");
  var seq =  feature.get("pepseq");
  var extdbname = feature.get("extdbname");
  var experiment = feature.get("experiment");
  var sample = feature.get("sample");
  var phospho_site = feature.get("modsite");
  var ontology_names = feature.get("ontology");
  var tb = "<table><tr><th>Location</th><th>Modified Residue</th><th>Modification Type</th></tr>";
  var start = feature.get("startm");
  if(phospho_site && phospho_site != 'NA') {
    var residue = feature.get("residue");
    var locs =  phospho_site.split(';');
    var term = ontology_names.split(';');
    var residues = residue.split(';');
    for (i = 0; i < locs.length; i++) { 
       tb = tb + "<tr><td>" + locs[i] + "</td><td>" + residues[i] + "</td><td>" + term[i] + "</td></tr>";
    }
  tb = tb + "</table>"; 
  }
  rows.push(twoColRow('Experiment:', experiment));
  rows.push(twoColRow('Sample:', sample));
  rows.push(twoColRow('Sequence:', seq));
  rows.push(twoColRow('Spectrum Count:', count));
  return table(rows);
 }
gsnapUnifiedIntronJunctionTitleFxn = function(track, feature, featureDiv) {
  return gsnapUnifiedIntronJunctionTitle(track, feature, featureDiv);
 }
gsnapUnifiedIntronJunctionHooksModify = function(track, feature, div) {
   var height = gsnapIntronHeightFromPercent(feature);
   var postHeight = gsnapIntronWidthFromScore(feature);
   var color = gsnapIntronColorFromStrandAndScore(feature);
   div.style.height = height + "px";
   div.style.borderRightColor = color;
   div.style.borderLeftColor = color;
   div.style.backgroundColor = color;
   div.style.borderTopWidth = postHeight + "px";
   div.style.borderBottomWidth = postHeight + "px";
   div.style.borderRightWidth = 1 + "px";
   div.style.borderLeftWidth = 1 + "px";
   div.style.boxSizing = "border-box"; /** thanks Dave! without this the right edge of the glyph extends too far **/
   track.config.style.showLabels = false;
   track.showLabels = false;
 }
peakTitleChipSeqFxn = function(track, feature, featureDiv) {
  return peakTitleChipSeq(track, feature, featureDiv);
 }
sequenceTitleFxn = function(track, feature, featureDiv) {
  return sequenceTitle(track, feature, featureDiv);
 }
tandemRepeatDetailsFxn = function(track, feature, featureDiv) {
  return positionAndSequence(track, feature, featureDiv);
 }
positionAndSequenceFxn = function(track, feature, featureDiv) {
  return positionAndSequence(track, feature, featureDiv);
 }
lowComplexityDetailsFxn = function(track, feature, featureDiv) {
  return positionAndSequence(track, feature, featureDiv);
 }
snpTitleFxn = function(track, feature, featureDiv) {
  return snpTitle(track, feature, featureDiv);
 }
spliceSiteTitleFxn = function(track, feature, featureDiv) {
  return spliceSiteTitle(track, feature, featureDiv);
 }
gffKirklandFxn = function(track, feature, featureDiv) {
  return gffKirkland(track, feature, featureDiv)
 }
repeatFamilyFxn = function(track, feature, featureDiv) {
  return repeatFamily(track, feature, featureDiv)
 }
transposonFxn = function(track, feature, featureDiv) {
  return transposon(track, feature, featureDiv)
 }
bindingSitesFxn = function(track, feature, featureDiv) {
  return bindingSiteTitle(track, feature, featureDiv)
 }
unifiedPostTranslationalModColorFxn = function(feature) {
  return unifiedPostTranslationalModColor(feature);
 }
unifiedPostTranslationalModTitleFxn = function(track, feature, featureDiv) {
  return unifiedPostTranslationalModTitle(track, feature);
 }
colorForBindingSitesByPvalueFxn = function(feature) {
  return colorForBindingSitesByPvalue(feature)
 }
gffGeneFeatureTitleFxn = function(track, feature) {
  return gffGeneFeatureTitle(track,feature)
 }
microsatelliteTitleFxn = function(track, feature, featDiv) {
  return microsatelliteTitle(track, feature, featDiv);
 }
haplotypeTitleFxn = function(track, feature, featDiv) {
  return haplotypeTitle(track, feature, featDiv);
 }
jeffaresDescFxn = function() {
  return 'This diversity estimate is generated from thirteen low coverage strains as described in <a href="http://www.ncbi.nlm.nih.gov/pubmed/20838588">Nygaard et al. PLoS Genet (2010). PMID: 20838588</a> Estimates were calculated using Variscan 2.0 (Vilella 2005) over a 10 kb window, with a 100 bp step.  <br><br> The Variscan parameters used were runmode = 12, blockdatafile = none, slidingwindow = 1, windowtype = 3, widthsw = 10000, jumpsw = 100 fixnum = 1, numnuc = 4, startpos = first, endpos = last, refpos = 0, indivnames = REICH D10 D6 DD2 FCC_2 HB3 IT K1 PFCLIN R033 SANTA_LUCIA SEN3404 VS_1 i7G8 PFCLIN.2 IT.2, outgroup = first, refseq = 1, usemuts = 0, completedeletion = 0, useldsinglets = 1, seqchoice = all.';
 }
syntenyTitleFxn = function(track, feature, featDiv) {
  return syntenyTitle(track, feature, featDiv);
 }
