gsnapIntronWidthFromScore = function( feature, variableName, glyphObject, trackObject ) {
  var sum = feature.get('TotalScore'); 
  if(sum <= 4096) return 1;
  if(sum <= 16000) return 2;
  return 3;
 }
gsnapIntronHeightFromPercent = function( feature, variableName, glyphObject, trackObject ) {
  var perc = feature.get('IntronPercent'); 
  if(perc <= 5) return 4;
  if(perc <= 20) return 5;
  if(perc <= 60) return 6;
  if(perc <= 80) return 7;
  return 8;
 }
gsnapIntronColorFromStrandAndScore = function( feature, variableName, glyphObject, trackObject ) {
  var isReversed = feature.get('IsReversed'); 
  var sum = feature.get('TotalScore'); 
  if(isReversed == 1) {
   if(sum <= 4) return 'rgb(255,219,219)';
   if(sum <= 16) return 'rgb(255,182,182)';
   if(sum <= 64) return 'rgb(255,146,146)';
   if(sum <= 256) return 'rgb(255,109,109)';
   if(sum <= 1024) return 'rgb(255,73,73)';
    return 'rgb(255,36,36)';   
  }
  else {
    if(sum <= 4) return 'rgb(219,219,255)';
    if(sum <= 16) return 'rgb(182,182,255)';
    if(sum <= 64) return 'rgb(146,146,255)';
    if(sum <= 256) return 'rgb(109,109,255)';
    if(sum <= 1024) return 'rgb(73,73,255)';
    return 'rgb(36,36,255)';   
  }
 }
massSpecColor = function( feature, variableName, glyphObject, trackObject ) {
  var color = feature.get('Color');
  if(!color) {
    color = feature.parent().get("Color");
  }  
  if(color) {
    var colors = color.split(';');
    return colors[0];
  }
  return 'yellow';
 }
massSpecLabel = function(track, feature, featureDiv) {
  return(feature.get("Sample"));
 }
processedTranscriptColor = function( featureObject, variableName, glyphObject, trackObject ) {
   return(featureObject.get("strand") == 1 ? "#000080" : "#aa3311" )
 }
nrdbColor = function( featureObject, variableName, glyphObject, trackObject ) {
   return(featureObject.get("strand") == 1 ? "mediumblue" :  "crimson")
 }
orfColor = function( featureObject, variableName, glyphObject, trackObject ) {
   return(featureObject.get("strand") == 1 ? "dodgerblue" :  "mediumvioletred")
 }
estColor = function( featureObject, variableName, glyphObject, trackObject ) {
   return(featureObject.get("strand") == 1 ? "deepskyblue" :  "pink")
 }
estBorderColor = function( featureObject, variableName, glyphObject, trackObject ) {
   return(featureObject.get("strand") == 1 ? "darkslateblue" :  "deeppink")
 }
popsetColor = function( featureObject, variableName, glyphObject, trackObject ) {
   return(featureObject.get("strand") == 1 ? "lightblue" :  "red")
 }
orfDetails = function(track, feature, featureDiv) {
    var rows = new Array();
    rows.push(twoColRow('Name:', feature.get("name")));
    rows.push(twoColRow('Position:', positionString(track.refSeq.name, feature.get("start"), feature.get("end"), feature.get("strand"))));
    rows.push(twoColRow('Length:', feature.get("Length") + "aa"));
    return table(rows);
 }
popsetDetails = function(track, feature, featureDiv) {
    var rows = new Array();
    rows.push(twoColRow('Name:', feature.get("name")));
    rows.push(twoColRow('Score:', feature.get("score")));
    rows.push(twoColRow('Expect:', feature.get("Expect")));
    rows.push(twoColRow('Match:', feature.get("MatchLen") + " nt"));
    rows.push(twoColRow('Note:', feature.get("Note")));
    return table(rows);
 }
estDetails = function(track, feature, featureDiv) {
    var rows = new Array();
    var name  = feature.get("name"); 
    var start = feature.get("start");
    var end = feature.get("end");
    var strand = feature.get("strand");
    var score = feature.get("score");
    var percent_identity = feature.get("PercentIdentity");
    var primer = feature.get("Primer");
    var library = feature.get("Library");
    var vector = feature.get("Vector");
    var stage = feature.get("Stage");
    rows.push(twoColRow('Name:', name));
    rows.push(twoColRow('Position:', positionString(track.refSeq.name, start, end, strand)));
    rows.push(twoColRow('Percent Identity:', percent_identity));
    rows.push(twoColRow('Length:', Math.abs(end-start) + " nt"));
    rows.push(twoColRow('Score:', score));
    rows.push(twoColRow('Library:', library));
    if(vector) rows.push(twoColRow('Vector:', vector));
    if(primer) rows.push(twoColRow('Primer:', primer));
    if(stage) rows.push(twoColRow('Stage:', stage));
    return table(rows);
 }
nrdbDetails = function(track, feature, featureDiv) {
    var rows = new Array();
    var name = feature.get("name");
    var score = feature.get("score");
    var pctI = feature.get("PercentIdentity");
    var desc = feature.get("Defline");
    desc.replace("\001", "");
    rows.push(twoColRow('GI number:', name));
    rows.push(twoColRow('Score:', score));
    rows.push(twoColRow('Position:', positionString(track.refSeq.name, feature.get("start"), feature.get("end"), feature.get("strand"))));
    rows.push(twoColRow('Identity:', round(pctI, 1)));
    if(desc) rows.push(twoColRow('Description:', desc));
    return table(rows);
 }
processedTranscriptDetails = function(track, feature, featureDiv) {
    var projectId = feature.get("ProjectId");                           
    var sourceId = feature.get("name");
    var chr = track.refSeq.name;
    var utrs = feature.get("subfeatures").filter(function(sf) {
                                                  return sf.get("type") === "UTR"
                                          }).map(x => "complement(" + x.get("start") + ".." + x.get("end") + ")").join("</br>");
    var cdss = feature.get("subfeatures").filter(function(sf) {
                                                  return sf.get("type") === "CDS"
                                          }).map(x => "complement(" + x.get("start") + ".." + x.get("end") + ")").join("</br>");
    var gene_id = feature.get("geneId");
    var soTerm = feature.get("soTerm");
    var isPseudo = feature.get("isPseudo");
    var aaSeqId = feature.get("aaSeqId");
    var orthomclName = feature.get("orthomcl_name");
    if(orthomclName === sourceId) orthomclName = "";
    soTerm = soTerm.replace(/_/g, " ");
    soTerm = titleCase(soTerm);
    if(isPseudo === 1) soTerm = soTerm + " (pseudogene)";
    var product = feature.get("product") ? feature.get("product") : feature.get("description");
    var taxon = feature.get("taxon");
    var window = 500;
    var linkStart = feature.get("start") - window;
    var linkStop = feature.get("end") + window;
    var seqId = feature.get("Contig");
    var loc = seqId + ":" + linkStart + ".." + linkStop;
    var baseRecordUrl = "/a/app/record";
    var dataRoot = track.browser.config.dataRoot;
    var baseUrl = track.browser.config.baseUrl;
    return gene_title(this, projectId, sourceId, chr, cdss, soTerm, product, taxon, utrs, loc, orthomclName, gene_id, dataRoot, baseUrl, baseRecordUrl, aaSeqId);
 }
massSpecDetails = function(track, feature, featureDiv) {
  var rows = new Array();
  var count = feature.get('Count');
  var seq =  feature.get('PepSeq');
  var extdbname = feature.get('ExtDbName');
  var experiment = feature.get('Experiment');
  var sample = feature.get('Sample');
  var phospho_site = feature.get('ModSite');
  var ontology_names = feature.get('Ontology');
  var tb = "<table><tr><th>Location</th><th>Modified Residue</th><th>Modification Type</th></tr>";
  var start = feature.get('start');
  if(phospho_site && phospho_site != 'NA') {
    var residue = feature.get('Residue');
    var locs =  phospho_site.split(';');
    var term = ontology_names.split(';');
    var residues = residue.split(';');
    for (i = 0; i < locs.length; i++) { 
       tb = tb + "<tr><td>" + locs[i] + "</td><td>" + residues[i] + "</td><td>" + term[i] + "</td></tr>";
    }
  tb = tb + "</table>"; 
  }
  rows.push(twoColRow('Experiment:', experiment));
  rows.push(twoColRow('Sample:', sample));
  rows.push(twoColRow('Sequence:', seq));
  rows.push(twoColRow('Spectrum Count:', count));
  return table(rows);
 }
gsnapUnifiedIntronJunctionTitleFxn = function(track, feature, featureDiv) {
  return gsnapUnifiedIntronJunctionTitle(track, feature, featureDiv);
 }
