<wdkModel>
  <querySet name="CompoundIds" queryType="id" isCacheable="true"
	    excludeProjects="EuPathDB">

    <!-- ************************************************************ -->
    <!-- Compound Id -->  
    <!-- ************************************************************ -->
 
    <sqlQuery name="CompoundsByCompoundID" doNotTest="true"  excludeProjects="EuPathDB"
              displayName="ID">
        <paramRef ref="compoundParams.ds_compound_id"/>
        <column name="source_id"/>
        <column name="input_compound"/>
        <sql>
            <![CDATA[
            SELECT distinct c.source_id, 
              apidb.tab_to_string(SET(CAST(COLLECT(ds.source_id) AS apidb.varchartab))) as input_compound
            FROM  apidbtuning.CompoundId cid,  apidbtuning.CompoundAttributes c, ($$ds_compound_id$$) ds
            WHERE  cid.id = ds.source_id
            AND cid.compound = c.source_id
            GROUP BY c.source_id
               ]]>
        </sql>
    </sqlQuery>

    <processQuery name="CompoundsByCompoundID" includeProjects="EuPathDB"
          doNotTest="true"
          processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin"> 
        <paramRef ref="compoundParams.ds_compound_id" noTranslation="true"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
    </processQuery>   

    <!-- ************************************************************ -->
    <!-- Compounds By Text Search -->  
    <!-- ************************************************************ -->

    <processQuery name="CompoundsByText"
          processName="org.apidb.apicomplexa.wsfplugin.solrsearch.SiteSearchPlugin">
       <paramRef ref="sharedParams.text_expression"/>
       <paramRef ref="sharedParams.document_type" default="compound"/>
       <paramRef ref="sharedParams.text_fields"/>
       <!-- the parameter below caches the results for 30 minutes -->
       <paramRef ref="sharedParams.timestamp" interval="1800" />
       <wsColumn name="source_id" width="50"/>
       <wsColumn name="max_score" width="10" columnType="float"/>
    </processQuery>

    <!-- ************************************************************ -->
    <!-- Compounds By EC Number -->  
    <!-- ************************************************************ -->
 
    <sqlQuery name="CompoundsByEcReaction" excludeProjects="EuPathDB">

      <paramRef ref="compoundParams.enzyme" />
      <paramRef ref="compoundParams.compound_type" />
      <column name="source_id"/>
      <column name="ec_number"/>
      <sql>
	<![CDATA[
        SELECT DISTINCT ca.source_id
        , pr.enzyme as ec_number
        FROM apidbtuning.pathwaycompounds pc
        , apidbtuning.pathwayreactions pr
        , apidbtuning.compoundattributes ca
        WHERE pr.enzyme = $$enzyme$$
        AND pc.reaction_id = pr.reaction_id
        AND ((pr.is_reversible = 0 AND pc.type = $$compound_type$$) OR (pr.is_reversible = 1 AND $$compound_type$$ = 'substrate/product') OR $$compound_type$$ = 'either')
        AND ca.source_id = pc.chebi_accession
	]]>
        </sql>
    </sqlQuery>

    <processQuery name="CompoundsByEcReaction" includeProjects="EuPathDB"
		  doNotTest="true"
		  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin"> 
      <paramRef ref="compoundParams.enzyme" />
      <paramRef ref="compoundParams.compound_type" />
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="compound" width="32"/>   
      <wsColumn name="ec_number" width="32"/>   
    </processQuery>   


    <sqlQuery name="CompoundsByPathway" doNotTest="true"  excludeProjects="EuPathDB"
              displayName="compounds by pathway">

     <!-- <paramRef ref="pathwayParams.metabolic_pathway_id_with_compounds"/>-->
      <paramRef ref="pathwayParams.pathways_source"/>
      <paramRef ref="pathwayParams.metabolic_pathway_id"/>
      <paramRef ref="pathwayParams.pathway_wildcard"/>
      <column name="source_id"/>
      <sql>
	<![CDATA[
        SELECT DISTINCT ca.source_id
        FROM apidbtuning.pathwaycompounds pc
        , apidbtuning.pathwayattributes pa
        , sres.externaldatabase ed
        , sres.externaldatabaserelease edr
        , apidbtuning.compoundattributes ca
        WHERE (pa.pathway_id = $$metabolic_pathway_id$$
            OR lower(pa.name) LIKE '%' || REPLACE(REPLACE(REPLACE(REPLACE(lower($$pathway_wildcard$$),' ',''),'-', '%'),'*','%'),'any','%') || '%'
            )
        AND pc.pathway_id = pa.pathway_id
        AND ed.name = pc.ext_db_name
        AND edr.external_database_id = ed.external_database_id
        AND (edr.external_database_release_id = $$pathways_source$$ OR $$pathways_source$$ = 1)
        AND ca.source_id = pc.chebi_accession
	    ]]>
        </sql>
    </sqlQuery>

    <processQuery name="CompoundsByPathway" includeProjects="EuPathDB"
		  doNotTest="true"
		  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin"> 
      <paramRef ref="pathwayParams.metabolic_pathway_id_with_compounds" noTranslation="true"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
    </processQuery>   


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Molecular Weight -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="CompoundsByMolecularWeight" excludeProjects="EuPathDB">
        <paramRef ref="compoundParams.min_molecular_weight"/>
        <paramRef ref="compoundParams.max_molecular_weight"/>
        <column name="source_id"/>
	<column name="molecular_wt"/>
        <sql>
            <![CDATA[
            SELECT source_id, mass as molecular_wt
	    FROM ApidbTuning.CompoundAttributes
	    WHERE mass <= $$max_molecular_weight$$
                  AND mass >= $$min_molecular_weight$$
           ]]>
       </sql>
    </sqlQuery>

    <processQuery name="CompoundsByMolecularWeight" includeProjects="EuPathDB"
		  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="compoundParams.min_molecular_weight"/>
      <paramRef ref="compoundParams.max_molecular_weight"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="molecular_wt" width="32"/>   
    </processQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Molecular Formula -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="CompoundsByMolecularFormula" excludeProjects="EuPathDB">
        <paramRef ref="compoundParams.input_formula"/>
        <column name="source_id"/>
        <sql>
            <![CDATA[
            SELECT source_id
            FROM ApidbTuning.CompoundAttributes 
            WHERE formula LIKE REPLACE($$input_formula$$,'*','%')
           ]]>
       </sql>
    </sqlQuery>

    <processQuery name="CompoundsByMolecularFormula" includeProjects="EuPathDB"
		  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="compoundParams.input_formula"/>
      <wsColumn name="source_id" width="50" wsName="source_id"/>
      <wsColumn name="molecular_formula" width="32"/>   
    </processQuery>

    <!-- ************************************************************ -->
    <!-- Transform : Compounds By Gene ID -->  
    <!-- ************************************************************ -->
 
    <sqlQuery name="CompoundsByGeneID" doNotTest="true"
              displayName="ID by gene">

      <paramRef ref="geneParams.gene_result" />
      <paramRef ref="compoundParams.compound_type" />
      <column name="source_id"/>
      <column name="genes"/>
      <column name="gene_count"/>
      <column name="wdk_weight" />

      <sql>
	<![CDATA[
    SELECT DISTINCT ca.source_id
    , count(distinct ds.source_id) as gene_count
    , apidb.tab_to_string(set(cast(collect(ds.source_id) as apidb.varchartab))) as genes
    , max(ds.wdk_weight) as wdk_weight
    FROM ($$gene_result$$) ds
    , apidbtuning.transcriptpathway tp
    , apidbtuning.pathwayreactions pr
    , apidbtuning.pathwaycompounds pc
    , apidbtuning.compoundattributes ca
    WHERE tp.gene_source_id = ds.gene_source_id
    AND tp.ec_number_gene like replace(pr.enzyme, '-', '%')
    AND pr.reaction_id = pc.reaction_id
    AND pr.ext_db_name = pc.ext_db_name
    AND pc.pathway_id = tp.pathway_id
    AND ca.source_id = pc.chebi_accession
    AND ((pr.is_reversible = 0 AND pc.type = $$compound_type$$) OR (pr.is_reversible = 1 AND $$compound_type$$ = 'substrate/product') OR $$compound_type$$ = 'either')
    GROUP BY ca.source_id
	]]>
        </sql>
    </sqlQuery>


    <!-- ************************************************************ -->
    <!-- Transform : Compounds By Pathway ID -->  
    <!-- ************************************************************ -->
 
    <sqlQuery name="CompoundsByPathwayID" doNotTest="true"
              displayName="ID by pathway">

      <paramRef ref="pathwayParams.pathway_result"/>
      <paramRef ref="compoundParams.compound_type" />
      <column name="source_id"/>
      <column name="pathways"/> 
      <column name="pathway_trans_count"/> 
      <column name="wdk_weight" />

      <sql>
	<![CDATA[
        SELECT DISTINCT ca.source_id
        , apidb.tab_to_string(set(cast(collect(ds.source_id) as apidb.varchartab))) as pathways
        , count(distinct ds.source_id) as pathway_trans_count
        , max(ds.wdk_weight) as wdk_weight
        FROM ($$pathway_result$$)ds
        , apidbtuning.pathwayattributes pa
        , apidbtuning.pathwaycompounds pc
        , apidbtuning.pathwayreactions pr
        , apidbtuning.compoundattributes ca
        WHERE pa.source_id = ds.source_id
        AND pa.pathway_source = ds.pathway_source
        AND pc.pathway_id = pa.pathway_id
        AND pc.chebi_accession = ca.source_id
        AND pr.reaction_id = pc.reaction_id
        AND ((pr.is_reversible = 0 AND pc.type = $$compound_type$$) OR (pr.is_reversible = 1 AND $$compound_type$$ = 'substrate/product') OR $$compound_type$$ = 'either')
        GROUP BY ca.source_id
	]]>
        </sql>
    </sqlQuery>





    <sqlQuery name="CompoundsByFoldChangeDeprecated" 
              includeProjects="PlasmoDB"
              displayName="Compounds by fold change">
      <testParamValues includeProjects="PlasmoDB">
	    <paramValue name="samples_fc_comp">Percoll pH 6.4 pellet</paramValue>
      </testParamValues>

      <paramRef groupRef="paramGroups.dynamicParams" ref="compoundParams.profileset" />
      <paramRef groupRef="paramGroups.dynamicParams" ref="compoundParams.samples_fc_ref_generic" />
      <paramRef groupRef="paramGroups.dynamicParams" ref="compoundParams.samples_fc_comp_generic" />
      <paramRef groupRef="paramGroups.dynamicParams" ref="compoundParams.fold_change_compound"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="compoundParams.regulated_dir"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="compoundParams.min_max_avg_ref"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="compoundParams.min_max_avg_comp"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="compoundParams.is_preferred_compound"/>
      <column name="source_id"/>
      <column name="fold_change"/>
      <column name="one_value"/>
      <column name="two_value"/>
      <column name="one_min"/>
      <column name="two_min"/>
      <column name="one_max"/>
      <column name="two_max"/>
      <column name="one_mean"/>
      <column name="two_mean"/>
      <column name="one_median"/>
      <column name="two_median"/>

      <sql>
	<![CDATA[
SELECT  CASE WHEN (one.value >= two.value)                                                                      
THEN round(one.value/two.value,2)                                                                               
ELSE round(two.value/one.value,2)  END AS fold_change                                                            
, one.value as one_value                                                                                                    
, two.value as two_value                                                                                                    
, one.min as one_min                                                                                                        
, two.min as two_min                                                                                                        
, one.max as one_max                                                                                                    
, two.max as two_max                                                                                                        
, one.mean as one_mean                                                                                                      
, two.mean as two_mean                                                                                                      
, one.median as one_median                                                                                                  
, two.median as two_median                                                                                                  
, ca.source_id                                                                                                       
FROM                                                                                                                        
(SELECT round($$min_max_avg_ref$$(value), 2) as value                                                                   
, round(min(value), 2) as min                                                                                           
, round(max(value), 2) as max                                                                                           
, round(avg(value), 2) as mean                                                                                          
, round(median(value), 2) as median                                                                                     
, compound_id                                                                                                           
FROM (                                                                                                                  
select sum(r.value) as value, chebi.compound_id               /* the abundances are summed for isotopomers */
from apidb.CompoundMassSpecResult  r, study.protocolAppNode pan, apidbtuning.profile pfile  , apidb.CompoundPeaksChEBI chebi
where pan.protocol_app_node_id = r.protocol_app_node_id  
and pfile.dataset_name ='compoundMassSpec_Llinas_RSRC'
and pan.name not like '%blank%' 
and pan.protocol_app_node_id in ($$samples_fc_ref_generic$$) 
and r.compound_peaks_id = chebi.compound_peaks_id
and chebi.IS_PREFERRED_COMPOUND in ($$is_preferred_compound$$)
GROUP BY chebi.compound_id, pan.protocol_app_node_id                                                               
)                                                                                                                       
GROUP BY compound_id                                                                                                    
) one,                                    
(SELECT round($$min_max_avg_comp$$(value), 2) as value                                                                  
, round(min(value), 2) as min                                                                                           
, round(max(value), 2) as max                                                                                           
, round(avg(value), 2) as mean                                                                                          
, round(median(value), 2) as median                                                                                     
, compound_id                                                                                                           
FROM (                                                                                                                  
select sum(r.value) as value, chebi.compound_id   /* the abundances are summed for isotopomers */ 
from apidb.CompoundMassSpecResult  r, study.protocolAppNode pan, apidbtuning.profile pfile  , apidb.CompoundPeaksChEBI chebi
where pan.protocol_app_node_id = r.protocol_app_node_id  
and pfile.dataset_name ='compoundMassSpec_Llinas_RSRC'
and pan.name not like '%blank%' 
and pan.protocol_app_node_id in ($$samples_fc_comp_generic$$)   
and r.compound_peaks_id = chebi.compound_peaks_id
and chebi.IS_PREFERRED_COMPOUND in ($$is_preferred_compound$$)
GROUP BY chebi.compound_id, pan.protocol_app_node_id                                                                    
)                                                                                                                       
GROUP BY compound_id                                                                                                    
) two,                                                                                                                      
apidbtuning.compoundAttributes ca                                                                                         
WHERE one.compound_id = two.compound_id                                                                                     
AND one.compound_id   = ca.id
AND $$regulated_dir$$  (                                                                                                     
CASE                                                                                                                    
WHEN (one.value >= two.value                                                                                        
AND two.value    > 0)                                                                                           
THEN -((one.value )/(two.value ))                                                                               
WHEN (two.value > one.value                                                                                         
AND one.value   > 0)                                                                                            
THEN ((two.value )/(one.value ))                                                                                
END ) >= $$fold_change_compound$$                                                                                          
ORDER BY fold_change  
   	]]>
      </sql>
    </sqlQuery>




    <sqlQuery name="CompoundsByPercentile" 
              includeProjects="PlasmoDB"
              displayName="Compounds by percentile">
      <testParamValues includeProjects="PlasmoDB">
	    <paramValue name="samples_percentile">Percoll pH 6.4 pellet</paramValue>
      </testParamValues>

      <paramRef ref="compoundParams.profileset" />
      <paramRef ref="compoundParams.samples_percentile" />
      <paramRef ref="compoundParams.min_percentile" default="80"/>
      <paramRef ref="compoundParams.max_percentile" default="100"/>
      <paramRef ref="compoundParams.any_or_all"/>
      <paramRef ref="compoundParams.is_preferred_compound"/>

      <column name="source_id"/>
      <column name="matched_result"/>
      <column name="max_percentile_chosen" />
      <column name="min_percentile_chosen" />
      
      <sql>
	<![CDATA[

SELECT distinct ca.source_id,  'Y' as matched_result, max(round(profile_min_max.max_value, 1)) as max_percentile_chosen, 
min(round(profile_min_max.min_value, 1)) as min_percentile_chosen                                                              
FROM apidbtuning.compoundAttributes ca ,

   (SELECT chebi.compound_id, res.protocol_app_node_id                                                        
   FROM apidb.CompoundMassSpecResult  res, apidb.CompoundPeaksChEBI chebi                                                      
   WHERE  res.protocol_app_node_id in ($$samples_percentile$$)  
   AND res.compound_peaks_id = chebi.compound_peaks_id
   AND res.percentile BETWEEN $$min_percentile$$ AND $$max_percentile$$                                                          
   GROUP BY chebi.compound_id, res.protocol_app_node_id                                     
   ) profile,                                                                                                        
   (SELECT chebi.compound_id, min(res.percentile) as  min_value,                                 
   max(res.percentile) as max_value                                                                                       
   FROM apidb.CompoundMassSpecResult  res, apidb.CompoundPeaksChEBI chebi                                            
   WHERE  res.protocol_app_node_id in ($$samples_percentile$$) 
   AND res.compound_peaks_id = chebi.compound_peaks_id
   AND chebi.IS_PREFERRED_COMPOUND in ($$is_preferred_compound$$)   
   AND res.percentile                                                                                                     
   BETWEEN $$min_percentile$$ AND $$max_percentile$$                                                   
   GROUP BY chebi.compound_id, res.protocol_app_node_id                                     
   ) profile_min_max                                                                                                 
  
  WHERE ca.id = PROFILE.compound_id                                                                                  
  AND PROFILE.compound_id = profile_min_max.compound_id                                                              
  GROUP BY ca.source_id , profile.protocol_app_node_id 
  
  HAVING 'any' = $$any_or_all$$                                                                                      
  OR count(*) = (SELECT count(*)                                                                                     
  FROM study.ProtocolAppNode                                                                                        
  WHERE protocol_app_node_id IN ($$samples_percentile$$))  ---1260748,1260754,1260763,1260749,1260750

   	]]>
      </sql>
    </sqlQuery>
    


    <sqlQuery name="CompoundsByPercentilePurineStarvation" 
              includeProjects="TriTrypDB"
              displayName="Compounds by percentile">
      <testParamValues includeProjects="TriTrypDB">
	    <paramValue name="samples_percentile_comp">Log mean (compound_MassSpec)</paramValue>
      </testParamValues>

      <paramRef ref="compoundParams.profileset" />
      <paramRef ref="compoundParams.samples_fc_ref_generic" />
      <paramRef ref="compoundParams.min_percentile" default="80"/>
      <paramRef ref="compoundParams.max_percentile" default="100"/>
      <paramRef ref="compoundParams.any_or_all"/>

      <column name="source_id"/>
      <column name="matched_result"/>
      <column name="max_percentile_chosen" />
      <column name="min_percentile_chosen" />
      
      <sql>
	<![CDATA[
SELECT distinct ca.source_id,  'Y' as matched_result, max(round(profile_min_max.max_value, 1)) as max_percentile_chosen, 
min(round(profile_min_max.min_value, 1)) as min_percentile_chosen                                                              
FROM apidbtuning.compoundAttributes ca ,

   (SELECT chebi.compound_id, res.protocol_app_node_id                                                        
   FROM apidb.CompoundMassSpecResult  res, apidb.CompoundPeaksChEBI chebi                                                      
   WHERE  res.protocol_app_node_id in ($$samples_fc_ref_generic$$)  
   AND res.compound_peaks_id = chebi.compound_peaks_id
   AND res.percentile BETWEEN $$min_percentile$$ AND $$max_percentile$$                                                          
   GROUP BY chebi.compound_id, res.protocol_app_node_id                                     
   ) profile,                                                                                                        
   (SELECT chebi.compound_id, min(res.percentile) as  min_value,                                 
   max(res.percentile) as max_value                                                                                       
   FROM apidb.CompoundMassSpecResult  res, apidb.CompoundPeaksChEBI chebi                                            
   WHERE  res.protocol_app_node_id in ($$samples_fc_ref_generic$$) 
   AND res.compound_peaks_id = chebi.compound_peaks_id
   AND res.percentile                                                                                                     
   BETWEEN $$min_percentile$$ AND $$max_percentile$$                                                   
   GROUP BY chebi.compound_id, res.protocol_app_node_id                                     
   ) profile_min_max                                                                                                 
  
  WHERE ca.id = PROFILE.compound_id                                                                                  
  AND PROFILE.compound_id = profile_min_max.compound_id                                                              
  GROUP BY ca.source_id , profile.protocol_app_node_id 
  
  HAVING 'any' = $$any_or_all$$                                                                                      
  OR count(*) = (SELECT count(*)                                                                                     
  FROM study.ProtocolAppNode                                                                                        
  WHERE protocol_app_node_id IN ($$samples_fc_ref_generic$$))

		 
		 
   	]]>
      </sql>
    </sqlQuery>
    


    <sqlQuery name="CompoundsByFoldChange" 
          includeProjects="PlasmoDB,TriTrypDB"
          displayName="Metabolic compounds by fold change">
    	<testParamValues includeProjects="PlasmoDB,TriTrypDB">
	    	<paramValue name="samples_fc_comp">WT_mean</paramValue>
    	</testParamValues>

    <paramRef groupRef="paramGroups.dynamicParams" ref="compoundParams.profileset" />
    <paramRef groupRef="paramGroups.dynamicParams" ref="compoundParams.samples_fc_ref_generic" />
    <paramRef groupRef="paramGroups.dynamicParams" ref="compoundParams.samples_fc_comp_generic" />
    <paramRef groupRef="paramGroups.dynamicParams" ref="compoundParams.fold_change_compound"/>
    <paramRef groupRef="paramGroups.dynamicParams" ref="compoundParams.regulated_dir"/>
    <paramRef groupRef="paramGroups.dynamicParams" ref="compoundParams.min_max_avg_ref"/>
    <paramRef groupRef="paramGroups.dynamicParams" ref="compoundParams.min_max_avg_comp"/>
    <paramRef groupRef="paramGroups.dynamicParams" ref="compoundParams.is_preferred_compound"/>
    <paramRef groupRef="paramGroups.dynamicParams" ref="compoundParams.any_or_all_compound_peaks"/>
    <column name="source_id"/>
    <column name="max_fold_change"/>
    <column name="max_one_value"/>
    <column name="max_two_value"/>
    <column name="max_one_min"/>
    <column name="max_two_min"/>
    <column name="max_one_max"/>
    <column name="max_two_max"/>
    <column name="max_one_mean"/>
    <column name="max_two_mean"/>
    <column name="max_one_median"/>
    <column name="max_two_median"/>
    <column name="max_mass"/>
    <column name="max_retention_time"/>

    	<sql>
  <![CDATA[

WITH one AS (
    select $$min_max_avg_ref$$(value) as value
    , avg(value) as mean
    , min(value) as min
    , max(value) as max
    , median(value) as median
    , compound_id
    , nvl(compound_peaks_id, mass || '|' || retention_time) as compound_peaks_id
    , mass
    , retention_time
    from (
        select sum(cmsr.value) as value 
        , chebi.compound_id
        , protocol_app_node_id
        , min(cp.mass) as mass
        , cp.retention_time
        , CASE WHEN chebi.isotopomer IS NOT NULL
            THEN NULL
            ELSE to_char(chebi.compound_peaks_id)
            END as compound_peaks_id
        from 
        apidb.compoundpeakschebi chebi
        , apidb.compoundmassspecresult cmsr  
        , APIDB.compoundpeaks cp
        where chebi.compound_id IS NOT NULL
        and cmsr.protocol_app_node_id in ($$samples_fc_ref_generic$$)
        and chebi.compound_peaks_id = cmsr.compound_peaks_id
        and cp.compound_peaks_id = chebi.compound_peaks_id
        and chebi.is_preferred_compound in ($$is_preferred_compound$$)
        group by chebi.compound_id
        , cmsr.protocol_app_node_id
        , cp.retention_time
        , CASE WHEN chebi.isotopomer IS NOT NULL
            THEN NULL
            ELSE to_char(chebi.compound_peaks_id) END
        )
        group by compound_id, compound_peaks_id, mass, retention_time
)
, two as (
    select $$min_max_avg_comp$$(value) as value 
    , avg(value) as mean
    , min(value) as min
    , max(value) as max
    , median(value) as median
    , compound_id
    , nvl(compound_peaks_id, mass || '|' || retention_time) as compound_peaks_id
    , mass
    , retention_time
    from (
        select sum(cmsr.value) as value 
        , chebi.compound_id
        , protocol_app_node_id
        , min(cp.mass) as mass
        , cp.retention_time
        , CASE WHEN chebi.isotopomer IS NOT NULL
            THEN NULL
            ELSE to_char(chebi.compound_peaks_id)
            END as compound_peaks_id
        from 
        apidb.compoundpeakschebi chebi
        , apidb.compoundmassspecresult cmsr
        , apidb.compoundpeaks cp
        where chebi.compound_id IS NOT NULL
        and cmsr.protocol_app_node_id in ($$samples_fc_comp_generic$$)
        and chebi.compound_peaks_id = cmsr.compound_peaks_id
        and cp.compound_peaks_id = chebi.compound_peaks_id
        and chebi.is_preferred_compound in ($$is_preferred_compound$$)
        group by chebi.compound_id
        , cmsr.protocol_app_node_id
        , cp.retention_time
        , CASE WHEN chebi.isotopomer IS NOT NULL
            THEN NULL
            ELSE to_char(chebi.compound_peaks_id) END
        )
        group by compound_id, compound_peaks_id, mass, retention_time
)
, peaksPerCompound as (
    select compound_id
    , count (*) as peak_count
    FROM (
        select distinct chebi.compound_id
        , chebi.compound_peaks_id
        from apidb.compoundpeakschebi chebi
        , APIDB.compoundmassspecresult cmsr
        where cmsr.protocol_app_node_id in ($$samples_fc_ref_generic$$, $$samples_fc_comp_generic$$)
        and chebi.compound_peaks_id = cmsr.compound_peaks_id
    )
    group by compound_id
)
, diff_exp_peaks as (
    select ca.source_id
    , ca.id
    , one.compound_peaks_id
    , one.mass
    , one.retention_time
    , one.value as one_value
    , one.mean as one_mean
    , one.min as one_min
    , one.max as one_max
    , one.median as one_median
    , two.value as two_value
    , two.mean as two_mean
    , two.min as two_min
    , two.max as two_max
    , two.median as two_median
    , CASE WHEN one.value >= two.value
        THEN round(greatest(one.value, 1)/(greatest(two.value, 1)),2) 
        ELSE round(greatest(two.value, 1)/(greatest(one.value, 1)),2)
        END AS fold_change
    from one
    , two
    , apidbtuning.compoundattributes ca
    WHERE one.compound_id = two.compound_id
    AND one.compound_peaks_id = two.compound_peaks_id
    AND one.compound_id   = ca.id
    
    AND $$regulated_dir$$  (                                                                                                   
    CASE                                                                                                                        
      WHEN (greatest(one.value, 1) >= greatest(two.value, 1)                                                     
      AND greatest(two.value, 1)    > 0)                                                                    
      THEN -((greatest(one.value, 1) )/(greatest(two.value, 1) ))                                                      
      WHEN (greatest(two.value, 1)> greatest(one.value, 1)                                                       
      AND greatest(one.value, 1)   > 0)                                                     
      THEN ((greatest(two.value, 1) )/(greatest(one.value, 1) ))                                                   
      END ) >= $$fold_change_compound$$


    --AND (abs (-((greatest(one.value, 1) )/(greatest(two.value, 1)))) >= $$fold_change_compound$$
    --OR abs((greatest(two.value, 1))/(greatest(one.value, 1))) >= $$fold_change_compound$$)
)

, diff_exp_compounds as (
    select dep.source_id
    , max(dep.fold_change) as max_fold_change
    , max(dep.one_value) KEEP (DENSE_RANK LAST ORDER BY dep.fold_change) as max_one_value
    , max(dep.one_mean) KEEP (DENSE_RANK LAST ORDER BY dep.fold_change) as max_one_mean
    , max(dep.one_min) KEEP (DENSE_RANK LAST ORDER BY dep.fold_change) as max_one_min
    , max(dep.one_max) KEEP (DENSE_RANK LAST ORDER BY dep.fold_change) as max_one_max
    , max(dep.one_median) KEEP (DENSE_RANK LAST ORDER BY dep.fold_change) as max_one_median
    , max(dep.two_value) KEEP (DENSE_RANK LAST ORDER BY dep.fold_change) as max_two_value
    , max(dep.two_mean) KEEP (DENSE_RANK LAST ORDER BY dep.fold_change) as max_two_mean
    , max(dep.two_min) KEEP (DENSE_RANK LAST ORDER BY dep.fold_change) as max_two_min
    , max(dep.two_max) KEEP (DENSE_RANK LAST ORDER BY dep.fold_change) as max_two_max
    , max(dep.two_median) KEEP (DENSE_RANK LAST ORDER BY dep.fold_change) as max_two_median
    , max(dep.mass) KEEP (DENSE_RANK LAST ORDER BY dep.fold_change) as max_mass
    , max(dep.retention_time) KEEP (DENSE_RANK LAST ORDER BY dep.fold_change) as max_retention_time
    from diff_exp_peaks dep
    , apidbtuning.compoundattributes ca
    where dep.source_id = ca.source_id
    group by dep.source_id
)
, anyOrAll as (
    select dep.source_id
    from diff_exp_peaks dep
    , peaksPerCompound ppc
    WHERE ppc.compound_id = dep.id
    HAVING ('any' = $$any_or_all_compound_peaks$$
        OR count(*) = ppc.peak_count)
    GROUP BY dep.source_id, ppc.peak_count
)
select dec.*
from anyOrAll aoa
, diff_exp_compounds dec
, APIDBTUNING.compoundattributes ca
where aoa.source_id = dec.source_id
and ca.source_id = aoa.source_id


    ]]>
        </sql>
	</sqlQuery>


<sqlQuery name="CompoundsByPercentileAmphotericinB" 
              includeProjects="TriTrypDB"
              displayName="Compounds by percentile">
      <testParamValues includeProjects="TriTrypDB">
	    <paramValue name="samples_percentile_comp">WT_mean</paramValue>
      </testParamValues>

      <paramRef ref="compoundParams.profileset"/>
      <paramRef ref="compoundParams.samples_fc_ref_generic" />
      <paramRef ref="compoundParams.min_percentile" default="80"/>
      <paramRef ref="compoundParams.max_percentile" default="100"/>
      <paramRef ref="compoundParams.any_or_all"/>

      <column name="source_id"/>
      <column name="matched_result"/>
      <column name="max_percentile_chosen" />
      <column name="min_percentile_chosen" />
      
      <sql>
	<![CDATA[
SELECT distinct ca.source_id,  'Y' as matched_result, max(round(profile_min_max.max_value, 1)) as max_percentile_chosen, 
min(round(profile_min_max.min_value, 1)) as min_percentile_chosen                                                              
FROM apidbtuning.compoundAttributes ca ,

   (SELECT chebi.compound_id, res.protocol_app_node_id                                                        
   FROM apidb.CompoundMassSpecResult  res, apidb.CompoundPeaksChEBI chebi                                                      
   WHERE  res.protocol_app_node_id in ($$samples_fc_ref_generic$$)  
   AND res.compound_peaks_id = chebi.compound_peaks_id
   AND res.percentile BETWEEN $$min_percentile$$ AND $$max_percentile$$                                                          
   GROUP BY chebi.compound_id, res.protocol_app_node_id                                     
   ) profile,                                                                                                        
   (SELECT chebi.compound_id, min(res.percentile) as  min_value,                                 
   max(res.percentile) as max_value                                                                                       
   FROM apidb.CompoundMassSpecResult  res, apidb.CompoundPeaksChEBI chebi                                            
   WHERE  res.protocol_app_node_id in ($$samples_fc_ref_generic$$) 
   AND res.compound_peaks_id = chebi.compound_peaks_id
   AND res.percentile                                                                                                     
   BETWEEN $$min_percentile$$ AND $$max_percentile$$                                                   
   GROUP BY chebi.compound_id, res.protocol_app_node_id                                     
   ) profile_min_max                                                                                                 
  
  WHERE ca.id = PROFILE.compound_id                                                                                  
  AND PROFILE.compound_id = profile_min_max.compound_id                                                              
  GROUP BY ca.source_id , profile.protocol_app_node_id 
  
  HAVING 'any' = $$any_or_all$$                                                                                      
  OR count(*) = (SELECT count(*)                                                                                     
  FROM study.ProtocolAppNode                                                                                        
  WHERE protocol_app_node_id IN ($$samples_fc_ref_generic$$))

		 
		 
   	]]>
      </sql>
    </sqlQuery>
    



  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->                                                     
  <!-- Dont Care - fake query for internal use -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="DontCare" doNotTest="true" >
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <sql>
            select source_id, project_id, 'Y' as matched_result
            from ApidbTuning.GeneAttributes
            where source_id = 'life_is_sweet' 
        </sql>
    </sqlQuery>

   </querySet>

</wdkModel>
