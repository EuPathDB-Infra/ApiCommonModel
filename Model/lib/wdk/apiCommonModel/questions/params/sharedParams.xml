<wdkModel>
    
   <!-- notes

      - need to review mass spec params (for possible redundancy)

   -->

    <paramSet name="sharedParams">
        
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Gene IDs -->  
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

        <datasetParam name="ds_gene_ids"
                      recordClassRef="GeneRecordClasses.GeneRecordClass"
                     prompt="Gene ID input set">
            <help>Input a comma delimited set of gene ids, or upload a file. 
 Note: when searching for multiple IDs it is possible that not all will be found in the database. This may be due to changes in the annotation or unavailability of ID mapping. At present we do not have a mechanism to inform you which IDs from your input did not match anything in the database.</help>

           <suggest includeProjects="INIT"
                    default="FILL"/>


        <suggest default="%%defaultGene%%"/>

        </datasetParam>


  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- Signature -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <stringParam name="wdk_user_signature" 
                                 includeProjects="EuPathDB"
                                 prompt="User Signature"
                                 visible="false" number="false">
             <help>
                  Used to pass the Users Signature to the component sites
             </help>
       </stringParam>

   <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
   <!-- best alignment only  -->
   <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
     <enumParam name="best_alignment_only"
                      prompt="Best alignments only"
                      multiPick="false"
                      quote="false">
      <noTranslation value="true" includeProjects="EuPathDB" />
       <help>
              Select yes to return only those EST alignments that are the best alignment for the EST.  Many of the ESTs align at multiple positions in the genome.  Selecting yes will consider only those alignments that are the best for each EST
       </help>
       <enumList>   
         <enumValue>
           <term>Yes</term>
           <internal>1</internal>
         </enumValue>
         <enumValue>
           <term>No</term>
           <internal>0,1</internal>
         </enumValue>
       </enumList>   
     </enumParam>

         <stringParam name="max_number_best_alignments"
                      prompt="Maximum number of best alignments"
                      number="true">
             <help>
               EST sequences can have two (or more) best alignments that have the same percent identity, length and score.  This parameter allows you to specify the maximum number of these best alignments that will be considered for any EST to be included in the query.  For example, if you specify 1 then all the ESTs that do not have a unique best alignment will be ignored in the query.
             </help>           
             <suggest default="1"
                allowEmpty="true" emptyValue="1000" />
           <regex>\d+</regex>
         </stringParam>

   <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
   <!-- high confidence est only  -->
   <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
     <enumParam name="high_confidence_only"
                      prompt="Consistent alignments only"
                      multiPick="false"
                      quote="false">
      <noTranslation value="true" includeProjects="EuPathDB" />
       <help>
              Select yes to return only those EST alignments that are consistent.  We define define consistent as having >= 95% identity (the majority have >= 99%) and aligning the EST sequence in a manner that is consistent with a gene model.  Ie, there can be gaps (representing introns) in the target genomic sequence but not in the EST query.
       </help>
       <enumList>   
         <enumValue>
           <term>No</term>
           <internal>0,1</internal>
         </enumValue>
         <enumValue>
           <term>Yes</term>
           <internal>1</internal>
         </enumValue>
       </enumList>   
     </enumParam>

   <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
   <!--  -->  
   <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

         <stringParam name="min_percent_identity"
                      prompt="Percent identity >="
                      number="true">
             <help>You can specify a minimum percent identity of the alignment between the EST and genomic DNA.  We only store alignments with >= 90% identity</help>           
             <suggest default="90"/>
           <regex>\d+(\.\d+)?</regex>
         </stringParam>

   <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
   <!--  -->  
   <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
         <stringParam name="min_percent_est_aligned"
                      prompt="Percent of EST bases aligned >="
                      number="true">
             <help>Enter the minimum percentage of bases in the EST sequence that are aligned to genomic DNA in this alignment.</help>
             <suggest default="20"
                           />
           <regex>\d+(\.\d+)?</regex>
         </stringParam>

   <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
   <!--  -->  
   <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

         <stringParam name="bp_overlap_gte"
                      prompt="Base Overlap &gt;="
                      number="true">
             <help>Overlap of expressed sequence tag (EST) alignments with annotated genes is a useful approach to verify gene predictions. In general, the specificity of this evidence is proportional to the overlap length.</help>
             <suggest default="100"/>
           <regex>\d+</regex>
         </stringParam>

         <stringParam name="stoxopforganism"
               prompt="Organism"
               visible="false"
               default="Plasmo falciparum"
               number="false">
             <help>You can select one or more organisms by checking the box next to the one(s) that you wish to use.</help>
             <suggest default="100"/>
           <regex>\d+</regex>
         </stringParam>

   <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
   <!-- Universal, genomic and ORF BLAST -->  
   <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!--
 <flatVocabParam name="BlastAlgorithm2"
                 prompt="BLAST Program"
                 displayType="radioBox"
                 multiPick="false"
                 default="blastn" 
                 queryRef="SharedVQ.BlastAlgorithm"
                 dependedParamRef="sharedParams.BlastDatabaseType">
             <help>
                <![CDATA[
            The Blast Program that will be executed: &#60;b&#62; blastp &#60;/b&#62;  compares an aminoacid query sequence against a protein sequence database;  &#60;b&#62; blastn  &#60;/b&#62; compares a nucleotide query sequence against a nucleotide sequence database; &#60;b&#62; blastx  &#60;/b&#62; compares the six-frame conceptual translation products of a nucleotide query sequence (both strands) against a protein sequence database;  &#60;b&#62;tblastn  &#60;/b&#62; compares a protein query sequence against a nucleotide sequence database dynamically translated in all six reading frames (both strands);  &#60;b&#62;tblastx  &#60;/b&#62;  compares the six-frame translations of a nucleotide query sequence against the six-frame translations of a nucleotide sequence database.
                ]]>
              </help>
     </flatVocabParam>

-->
<!--
       <flatVocabParam name="BlastDatabaseOrganism" excludeProjects="EuPathDB"
                     queryRef="SharedVQ.BlastOrganismFiles"
                     prompt="Target Organism"
                     displayType="treeBox" 
                     multiPick="true"
                     suppressNode="true"
                     dependedParamRef="sharedParams.BlastDatabaseType"
                     >
          <noTranslation value="false" excludeProjects="EuPathDB" />
          <help>
               Organism(s) from which the sequences in the BLAST database originated
          </help>
          <suggest includeProjects="ToxoDB"
                   default="Toxoplasma gondii ME49"/>
        </flatVocabParam>

       <flatVocabParam name="BlastDatabaseOrganism" includeProjects="EuPathDB"
                     queryRef="SharedVQ.BlastOrganismFiles"
                     prompt="Target Organism"
                     displayType="treeBox" 
                     multiPick="true"
                     suppressNode="false"
                     dependedParamRef="sharedParams.BlastDatabaseType"
                     >
          <help>
               Organism(s) from which the sequences in the BLAST database originated
          </help>
        </flatVocabParam>
-->

 <flatVocabParam name="BlastDatabaseOrganism"
                     queryRef="SharedVQ.BlastOrganismFiles"
                     prompt="Target Organism"
                     displayType="treeBox" 
                     multiPick="true"
                     suppressNode="true"
                     dependedParamRef="sharedParams.BlastDatabaseType"
                     >
          <help>
               Select the Organism(s) (genomes) that you wish to query your Input Sequence against.
          </help>
          <suggest selectMode="all" />
        </flatVocabParam>




  <enumParam name="BlastAlgorithm"
             prompt="BLAST Program"
             displayType="radioBox"
             multiPick="false">

      <help><![CDATA[
            Indicate the BLAST Program that will be executed:<br>
            <b>blastp</b> compares an amino acid Input Sequence against a protein sequence database;<br>
		  <b>blastn</b> compares a nucleotide Input Sequence against a nucleotide sequence database;<br>
		  <b>blastx</b> compares the six-frame conceptual translation products of a nucleotide Input Sequence (both strands) against a protein sequence database;<br> 
		  <b>tblastn</b> compares a protein Input Sequence against a nucleotide sequence database dynamically translated in all six reading frames (both strands);<br> 
		  <b>tblastx</b> compares the six-frame translations of a nucleotide Input Sequence against the six-frame translations of a nucleotide sequence database.<br>]]>
      </help>
      <enumList>  
         <enumValue>
           <term>blastn</term>
           <internal>blastn</internal>
         </enumValue>   
         <enumValue>
           <term>blastp</term>
           <internal>blastp</internal>
         </enumValue>   
         <enumValue>
           <term>blastx</term>
           <internal>blastx</internal>
         </enumValue>   
         <enumValue>
           <term>tblastn</term>
           <internal>tblastn</internal>
         </enumValue>   
         <enumValue>
           <term>tblastx</term>
           <internal>tblastx</internal>
         </enumValue>
      </enumList>
   </enumParam>



   <enumParam name="BlastDatabaseType"
                      prompt="Target Data Type"
                      displayType="radioBox"
                      quote="false"
                      multiPick="false">
       <help>
              Select the type of sequence that your Input Sequence will be BLASTed against. 
       </help>
       <enumList>   
         <enumValue>
           <term>Transcripts</term>
           <internal>AnnotatedTranscripts</internal>
         </enumValue>
         <enumValue>
           <term>Proteins</term>
           <internal>AnnotatedProteins</internal>
         </enumValue>
         <enumValue>
           <term>Genome</term>
           <internal>Genome</internal>
         </enumValue>
         <enumValue excludeProjects="HostDB">
           <term>EST</term>
           <internal>ESTs</internal> 
         </enumValue>
         <enumValue excludeProjects="HostDB">
           <term>ORF</term>
           <internal>ORFs_AA</internal>
         </enumValue>
         <enumValue includeProjects="AmoebaDB,CryptoDB,GiardiaDB,MicrosporidiaDB,PiroplasmaDB,PlasmoDB,ToxoDB,TriTrypDB,EuPathDB">
           <term>Isolates</term>
           <internal>Isolates</internal>
          </enumValue> 

       </enumList>   
     </enumParam>


     <stringParam name="BlastQuerySequence"
                  prompt="Input Sequence"
                  length="31000"
                  number="false"
                  multiLine="true">
       <noTranslation value="true"/>
       <help>Paste your Input Sequence (up to 31K bps) in the text box.  Only one Input Sequence can be entered per search.</help>
       <suggest default=""/>
     </stringParam>

     <enumParam name="-filter"
                     id="-filter"
                     prompt="Low complexity filter">

       <help>
              If this filter is set to yes, you will omit results which contain repetitive and low complexity sequence. 
       </help>
       <enumList>   
         <enumValue>
           <term>yes</term>
           <internal>yes</internal>
         </enumValue>
         <enumValue default="true">
           <term>no</term>
           <internal>no</internal>
         </enumValue>
       </enumList>   
     </enumParam>

         <stringParam name="-e"
                      prompt="Expectation value" number="true">
             <help>Expected number of hits with at least this score. The lower the e- value the more significant the hit.</help>
             <suggest default="10"/>
         </stringParam>
<!--
         <stringParam name="-v"
                      prompt="Maximum descriptions (V)" number="true">
             <help>Number of one-line descriptions to show</help>
             <suggest default="50"/>
           <regex>\d+</regex>
         </stringParam>

         <stringParam name="-b"
                      prompt="Maximum alignments (B)" number="true">
             <help>Number of alignments to show</help>
             <suggest default="50"/>
           <regex>\d+</regex>
         </stringParam>
-->

         <stringParam name="-b"
                      prompt="Maximum descriptions/alignments (V=B)" number="true">
             <help>Number of descriptions/alignments to show</help>
             <suggest default="10"/>
           <regex>\d+</regex>
         </stringParam>


         <stringParam name="BlastRecordClass" visible="false"
                      prompt="Record type" number="false">
             <noTranslation value="true" />
             <suggest allowEmpty="true" />
             <help>The record type returned by blast</help>
         </stringParam>


  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
   <!--  -->
   <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

     <enumParam name="chromosome_telomere"
                      prompt="Chromosome"
                      multiPick="true" 
                      includeProjects="PlasmoDB,EuPathDB">
      <noTranslation value="true" includeProjects="EuPathDB" />
       <enumList>
         <enumValue includeProjects="PlasmoDB,EuPathDB">
           <term>P.f. chromosome 1</term>
           <internal>Pf3D7_01_v3</internal>
         </enumValue>
         <enumValue includeProjects="PlasmoDB,EuPathDB">
           <term>P.f. chromosome 2</term>
           <internal>Pf3D7_02_v3</internal>
         </enumValue>
         <enumValue includeProjects="PlasmoDB,EuPathDB">
           <term>P.f. chromosome 3</term>
           <internal>Pf3D7_03_v3</internal>
         </enumValue>
         <enumValue includeProjects="PlasmoDB,EuPathDB">
           <term>P.f. chromosome 4</term>
           <internal>Pf3D7_04_v3</internal>
         </enumValue>
        <enumValue includeProjects="PlasmoDB,EuPathDB">
           <term>P.f. chromosome 5</term>
           <internal>Pf3D7_05_v3</internal>
         </enumValue>
         <enumValue includeProjects="PlasmoDB,EuPathDB">
           <term>P.f. chromosome 6</term>
           <internal>Pf3D7_06_v3</internal>
         </enumValue>
         <enumValue includeProjects="PlasmoDB,EuPathDB">
           <term>P.f. chromosome 7</term>
           <internal>Pf3D7_07_v3</internal>
         </enumValue>
         <enumValue includeProjects="PlasmoDB,EuPathDB">
           <term>P.f. chromosome 8</term>
           <internal>Pf3D7_08_v3</internal>
         </enumValue>
         <enumValue includeProjects="PlasmoDB,EuPathDB">
           <term>P.f. chromosome 9</term>
           <internal>Pf3D7_09_v3</internal>
         </enumValue>
         <enumValue includeProjects="PlasmoDB,EuPathDB">
           <term>P.f. chromosome 10</term>
           <internal>Pf3D7_10_v3</internal>
         </enumValue>
         <enumValue includeProjects="PlasmoDB,EuPathDB">
           <term>P.f. chromosome 11</term>
           <internal>Pf3D7_11_v3</internal>
         </enumValue>
         <enumValue includeProjects="PlasmoDB,EuPathDB">
           <term>P.f. chromosome 12</term>
           <internal>Pf3D7_12_v3</internal>
         </enumValue>
         <enumValue includeProjects="PlasmoDB,EuPathDB">
           <term>P.f. chromosome 13</term>
           <internal>Pf3D7_13_v3</internal>
         </enumValue>
         <enumValue includeProjects="PlasmoDB,EuPathDB">
           <term>P.f. chromosome 14</term>
           <internal>Pf3D7_14_v3</internal>
         </enumValue>
      </enumList>
     </enumParam>



   <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
   <!--  -->  
   <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

     <enumParam name="chromosome"
                      prompt="Chromosome"
                      multiPick="true" 
                      includeProjects="PlasmoDB,ToxoDB,EuPathDB">
       <enumList>   
         <enumValue includeProjects="PlasmoDB,EuPathDB">
           <term>P.f. chromosome 1</term>
           <internal>Pf3D7_01_v3</internal>
         </enumValue>
         <enumValue includeProjects="PlasmoDB,EuPathDB">
           <term>P.f. chromosome 2</term>
           <internal>Pf3D7_02_v3</internal>
         </enumValue>
         <enumValue includeProjects="PlasmoDB,EuPathDB">
           <term>P.f. chromosome 3</term>
           <internal>Pf3D7_03_v3</internal>
         </enumValue>
         <enumValue includeProjects="PlasmoDB,EuPathDB">
           <term>P.f. chromosome 4</term>
           <internal>Pf3D7_04_v3</internal>
         </enumValue>
         <enumValue includeProjects="PlasmoDB,EuPathDB">
           <term>P.f. chromosome 5</term>
           <internal>Pf3D7_05_v3</internal>
         </enumValue>
         <enumValue includeProjects="PlasmoDB,EuPathDB">
           <term>P.f. chromosome 6</term>
           <internal>Pf3D7_06_v3</internal>
         </enumValue>
         <enumValue includeProjects="PlasmoDB,EuPathDB">
           <term>P.f. chromosome 7</term>
           <internal>Pf3D7_07_v3</internal>
         </enumValue>
         <enumValue includeProjects="PlasmoDB,EuPathDB">
           <term>P.f. chromosome 8</term>
           <internal>Pf3D7_08_v3</internal>
         </enumValue>
         <enumValue includeProjects="PlasmoDB,EuPathDB">
           <term>P.f. chromosome 9</term>
           <internal>Pf3D7_09_v3</internal>
         </enumValue>
         <enumValue includeProjects="PlasmoDB,EuPathDB">
           <term>P.f. chromosome 10</term>
           <internal>Pf3D7_10_v3</internal>
         </enumValue>
         <enumValue includeProjects="PlasmoDB,EuPathDB">
           <term>P.f. chromosome 11</term>
           <internal>Pf3D7_11_v3</internal>
         </enumValue>
         <enumValue includeProjects="PlasmoDB,EuPathDB">
           <term>P.f. chromosome 12</term>
           <internal>Pf3D7_12_v3</internal>
         </enumValue>
         <enumValue includeProjects="PlasmoDB,EuPathDB">
           <term>P.f. chromosome 13</term>
           <internal>Pf3D7_13_v3</internal>
         </enumValue>
         <enumValue includeProjects="PlasmoDB,EuPathDB">
           <term>P.f. chromosome 14</term>
           <internal>Pf3D7_14_v3</internal>
         </enumValue>


         <enumValue includeProjects="ToxoDB,EuPathDB">
           <term>T. gondii ME49 chromosome Ia</term>
           <internal>TGME49_chrIa</internal>
         </enumValue>
         <enumValue includeProjects="ToxoDB,EuPathDB">
           <term>T. gondii ME49 chromosome Ib</term>
           <internal>TGME49_chrIb</internal>
         </enumValue>
         <enumValue includeProjects="ToxoDB,EuPathDB">
           <term>T. gondii ME49 chromosome II</term>
           <internal>TGME49_chrII</internal>
         </enumValue>
         <enumValue includeProjects="ToxoDB,EuPathDB">
           <term>T. gondii ME49 chromosome III</term>
           <internal>TGME49_chrIII</internal>
         </enumValue>
         <enumValue includeProjects="ToxoDB,EuPathDB">
           <term>T. gondii ME49 chromosome IV</term>
           <internal>TGME49_chrIV</internal>
         </enumValue>
         <enumValue includeProjects="ToxoDB,EuPathDB">
           <term>T. gondii ME49 chromosome V</term>
           <internal>TGME49_chrV</internal>
         </enumValue>
         <enumValue includeProjects="ToxoDB,EuPathDB">
           <term>T. gondii ME49 chromosome VI</term>
           <internal>TGME49_chrVI</internal>
         </enumValue>
         <enumValue includeProjects="ToxoDB,EuPathDB">
           <term>T. gondii ME49 chromosome VIIa</term>
           <internal>TGME49_chrVIIa</internal>
         </enumValue>
         <enumValue includeProjects="ToxoDB,EuPathDB">
           <term>T. gondii ME49 chromosome VIIb</term>
           <internal>TGME49_chrVIIb</internal>
         </enumValue>
         <enumValue includeProjects="ToxoDB,EuPathDB">
           <term>T. gondii ME49 chromosome VIII</term>
           <internal>TGME49_chrVIII</internal>
         </enumValue>
         <enumValue includeProjects="ToxoDB,EuPathDB">
           <term>T. gondii ME49 chromosome IX</term>
           <internal>TGME49_chrIX</internal>
         </enumValue>
         <enumValue includeProjects="ToxoDB,EuPathDB">
           <term>T. gondii ME49 chromosome X</term>
           <internal>TGME49_chrX</internal>
         </enumValue>
         <enumValue includeProjects="ToxoDB,EuPathDB">
           <term>T. gondii ME49 chromosome XI</term>
           <internal>TGME49_chrXI</internal>
         </enumValue>
         <enumValue includeProjects="ToxoDB,EuPathDB">
           <term>T. gondii ME49 chromosome XII</term>
           <internal>TGME49_chrXII</internal>
         </enumValue>
       </enumList>   
     </enumParam>


<!--  added for sagetags by location in portal -->

<enumParam name="chromosomeOptional2" includeProjects="PlasmoDB,ToxoDB,GiardiaDB,EuPathDB" 
                      prompt="Chromosome"
                      multiPick="true" >
      
       <enumList>   
         <enumValue includeProjects="PlasmoDB,EuPathDB">
           <term>P.f. chromosome 1</term>
           <internal>Pf3D7_01_v3</internal>
         </enumValue>
         <enumValue includeProjects="PlasmoDB,EuPathDB">
           <term>P.f. chromosome 2</term>
           <internal>Pf3D7_02_v3</internal>
        </enumValue>
         <enumValue includeProjects="PlasmoDB,EuPathDB">
           <term>P.f. chromosome 3</term>
           <internal>Pf3D7_03_v3</internal>
         </enumValue>
         <enumValue includeProjects="PlasmoDB,EuPathDB">
           <term>P.f. chromosome 4</term>
           <internal>Pf3D7_04_v3</internal>
         </enumValue>
         <enumValue includeProjects="PlasmoDB,EuPathDB">
           <term>P.f. chromosome 5</term>
           <internal>Pf3D7_05_v3</internal>
         </enumValue>
         <enumValue includeProjects="PlasmoDB,EuPathDB">
           <term>P.f. chromosome 6</term>
           <internal>Pf3D7_06_v3</internal>
         </enumValue>
         <enumValue includeProjects="PlasmoDB,EuPathDB">
           <term>P.f. chromosome 7</term>
           <internal>Pf3D7_07_v3</internal>
         </enumValue>
         <enumValue includeProjects="PlasmoDB,EuPathDB">
           <term>P.f. chromosome 8</term>
           <internal>Pf3D7_08_v3</internal>
         </enumValue>
         <enumValue includeProjects="PlasmoDB,EuPathDB">
           <term>P.f. chromosome 9</term>
           <internal>Pf3D7_09_v3</internal>
         </enumValue>
         <enumValue includeProjects="PlasmoDB,EuPathDB">
           <term>P.f. chromosome 10</term>
           <internal>Pf3D7_10_v3</internal>
         </enumValue>
         <enumValue includeProjects="PlasmoDB,EuPathDB">
           <term>P.f. chromosome 11</term>
           <internal>Pf3D7_11_v3</internal>
         </enumValue>
         <enumValue includeProjects="PlasmoDB,EuPathDB">
           <term>P.f. chromosome 12</term>
           <internal>Pf3D7_12_v3</internal>
         </enumValue>
         <enumValue includeProjects="PlasmoDB,EuPathDB">
           <term>P.f. chromosome 13</term>
           <internal>Pf3D7_13_v3</internal>
         </enumValue>
         <enumValue includeProjects="PlasmoDB,EuPathDB">
           <term>P.f. chromosome 14</term>
           <internal>Pf3D7_14_v3</internal>
         </enumValue>

         <enumValue  includeProjects="ToxoDB,EuPathDB">
           <term>Select:</term>
           <internal>Select:</internal>
         </enumValue>
         <enumValue  includeProjects="ToxoDB,EuPathDB">
           <term>Ia</term>
           <internal>Ia</internal>
         </enumValue>
         <enumValue  includeProjects="ToxoDB,EuPathDB">
           <term>Ib</term>
           <internal>Ib</internal>
         </enumValue>
         <enumValue  includeProjects="ToxoDB,EuPathDB">
           <term>II</term>
           <internal>II</internal>
         </enumValue>
         <enumValue  includeProjects="ToxoDB,EuPathDB">
           <term>III</term>
           <internal>III</internal>
         </enumValue>
         <enumValue  includeProjects="ToxoDB,EuPathDB">
           <term>IV</term>
           <internal>IV</internal>
         </enumValue>
         <enumValue  includeProjects="ToxoDB,EuPathDB">
           <term>V</term>
           <internal>V</internal>
         </enumValue>
         <enumValue  includeProjects="ToxoDB,EuPathDB">
           <term>VI</term>
           <internal>VI</internal>
         </enumValue>
         <enumValue  includeProjects="ToxoDB,EuPathDB">
           <term>VIIa</term>
           <internal>VIIa</internal>
         </enumValue>
         <enumValue  includeProjects="ToxoDB,EuPathDB">
           <term>VIIb</term>
           <internal>VIIb</internal>
         </enumValue>
         <enumValue  includeProjects="ToxoDB,EuPathDB">
           <term>VIII</term>
           <internal>VIII</internal>
         </enumValue>
         <enumValue  includeProjects="ToxoDB,EuPathDB">
           <term>IX</term>
           <internal>IX</internal>
         </enumValue>
         <enumValue  includeProjects="ToxoDB,EuPathDB">
           <term>X</term>
           <internal>X</internal>
         </enumValue>
         <enumValue  includeProjects="ToxoDB,EuPathDB">
           <term>XI</term>
           <internal>XI</internal>
         </enumValue>
         <enumValue  includeProjects="ToxoDB,EuPathDB">
           <term>XII</term>
           <internal>XII</internal>
         </enumValue>
         <enumValue  includeProjects="GiardiaDB,EuPathDB">
           <term>1</term>
           <internal>1</internal>
         </enumValue>
         <enumValue  includeProjects="GiardiaDB,EuPathDB">
           <term>2</term>
           <internal>2</internal>
         </enumValue>
         <enumValue  includeProjects="GiardiaDB,EuPathDB">
           <term>3</term>
           <internal>3</internal>
         </enumValue>
         <enumValue  includeProjects="GiardiaDB,EuPathDB">
           <term>4</term>
           <internal>4</internal>
         </enumValue>
         <enumValue  includeProjects="GiardiaDB,EuPathDB">
           <term>5</term>
           <internal>5</internal>
         </enumValue>
       </enumList>


  
     </enumParam>





<!-- the only difference between these two is the quote = true on component sites   -->
 <flatVocabParam name="chromosomeOptional" includeProjects="EuPathDB"
                     prompt="Chromosome"
                     queryRef="SharedVQ.ChromosomeOrderNum"
                     multiPick="false" 
                     dependedParamRef="organismParams.organism">
             <help>
                <![CDATA[
                Select chromosome for a selected organism or enter genomic sequence ID. If you provide both you will get the union of both result sets.
                ]]>
              </help>
     </flatVocabParam>
 
     <flatVocabParam name="chromosomeOptional" excludeProjects="EuPathDB"
                     prompt="Chromosome"
                     queryRef="SharedVQ.ChromosomeOrderNum"
                     multiPick="false"
                     quote="true"
                     dependedParamRef="organismParams.organism">
             <help excludeProjects="ToxoDB,PlasmoDB,CryptoDB">
                <![CDATA[
                Select chromosome.
                ]]>
              </help>
             <help includeProjects="ToxoDB,PlasmoDB,CryptoDB">
                <![CDATA[
                Select chromosomes.
                ]]>
              </help>
     </flatVocabParam>

	<flatVocabParam name="centromere_chromosome" includeProjects="PlasmoDB,ToxoDB,EuPathDB"
			queryRef="SharedVQ.CentromereChromosome"
			prompt="Chromosome"
			multiPick="true" 
			dependedParamRef="organismParams.org_with_centromere_genes">
	  <help>Choose the Chromosome(s) that you wish to query. This list includes chromosomes that have annotated centromeres. 
	  Centromeres may not be annotated for every chromosome.</help>
	</flatVocabParam>

	<flatVocabParam name="telomere_chromosomes" includeProjects="PlasmoDB,EuPathDB"
			queryRef="SharedVQ.TelomereChromosomes"
			prompt="Chromosome"
			multiPick="true" 
 			dependedParamRef="organismParams.organism">
	  <help>Choose the Chromosome(s) you wish to query. This search uses the start and end positions of chromosomes as the location of telomeres.</help>
	</flatVocabParam>


	<flatVocabParam name="pf_seqid" includeProjects="PlasmoDB,EuPathDB"
			queryRef="SharedVQ.PfSeqId"
			prompt="Chromosome"
			multiPick="false">
	  <help>Chromosome</help>
	</flatVocabParam>


     <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
     <!-- Sequence Id -->  
     <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

     <enumParam name="sequenceIdList"
             displayType="typeAhead"
             multiPick="true"
             prompt="Genomic sequence ID">

         <help>
           A dummy param to allow searching for genes by multiple sequence identifiers, only used by GeneDumpQuestions.GenesByLocations.
         </help>
         <enumList>
           <enumValue> <!-- only here so the model validates -->  
             <term>dummy value</term>
             <internal>dummy value</internal>
           </enumValue>
         </enumList>
       </enumParam> 

     <stringParam name="sequenceId"
             prompt="Genomic sequence ID"   number="false">

           <help includeProjects="AmoebaDB;CryptoDB;EuPathDB;GiardiaDB;HostDB;MicrosporidiaDB;PiroplasmaDB;PlasmoDB;ToxoDB;TrichDB;TriTrypDB">
            <![CDATA[
            Enter an identifier for a genomic contig. Genomic Sequence IDs correspond to the 
            accession numbers supplied by the sequencing centers.]]>
         </help>
<!-- 
         <suggest includeProjects="EuPathDB"
             allowEmpty="true"/>
                                     
        <help includeProjects="PiroplasmaDB">
           Enter an identifier for a genomic sequence. The IDs correspond to the accession numbers in the GenBank records supplied by the sequencing centers. Wild cards are permitted in most queries, i.e. use AAXT* to ask for all contigs/scaffolds that have identifiers that begin with AAXT. By Location queries do not allow wildcards and only allow a single ID to be used at a time.
         </help>
        <help includeProjects="TriTrypDB">
           Enter an identifier for a genomic sequence. The IDs correspond to the accession numbers in the GenBank records supplied by the sequencing centers. Wild cards are permitted in most queries, i.e. use LbrM01* to ask for all contigs that have identifiers that begin with LbrM01. By Location queries do not allow wildcards and only allow a single ID to be used at a time.
         </help>
         <help includeProjects="TrichDB">
           Enter an identifier for a genomic sequence. The IDs correspond to the accession numbers in the GenBank records supplied by the sequencing centers. Wild cards are permitted in most queries, i.e. use DS11* to ask for all contigs that have identifiers that begin with DS11. By Location queries do not allow wildcards and only allow a single ID to be used at a time.
         </help>
         <help includeProjects="GiardiaDB">
           Enter an identifier for a genomic sequence. The IDs correspond to the accession numbers in the GenBank records supplied by the sequencing centers. Wild cards are permitted in most queries, i.e. use AACB0200* to ask for all contigs/scaffolds that have identifiers that begin with AACB0200. By Location queries do not allow wildcards and only allow a single ID to be used at a time.
         </help>
         <help includeProjects="CryptoDB">
             Enter an identifier for a genomic contig. The IDs
             correspond to the accession numbers in the GenBank records
             supplied by the sequencing centers. Contig ID's from
             &lt;i&gt; C. parvum &lt;/i&gt; whole genome sequencing
             project begin with 'AAEE' and contig ID's for &lt;i&gt;
             C. hominis &lt;/i&gt; begin with 'AAEL'. The &lt;i&gt;
             C. parvum &lt;/i&gt; Chromosome 6 independently sequenced
             at MRC-LMB  before the whole genome project was completed
             is 'BX526834 '. Wild cards are permitted  in most queries,
             i.e. use AAEE* to ask for all &lt;i&gt; C. parvum
             &lt;/i&gt; contigs. By Location queries do not allow wildcards and only allow a single ID to be used at a time.
         </help>
         <help includeProjects="PlasmoDB">
             Sequence IDs for &#60;i&#62; P. falciparum &#60;/i&#62; chromosomes are 'Pf3D7_01' through 'Pf3D7_14.'  Sequence IDs for &#60;i&#62; P. yoelii &#60;/i&#62; sequences begin with 'AABL'.  Sequence IDs for &#60;i&#62; P. vivax &#60;/i&#62; chromosomes begin with 'CM', while the contigs begin with 'AAK' or 'AY'. Sequence IDs of &#60;i&#62; P. chabaudi &#60;/i&#62; chromosomes start with 'chab', while the contigs begin with 'contig'. &#60;i&#62;P.knowlesi &#60;/i&#62; chromosome sequences start with 'PK' or 'chr'. &#60;i&#62;P. berghei &#60;/i&#62; sequences start with 'PB',  &#60;i&#62;P.reichenowi &#60;/i&#62; sequence start with 'Pr', while those of &#60;i&#62;P.gallinaceum &#60;/i&#62; start with 'Pg'. Wild cards are permitted  in most queries, i.e. use 'AABL*' to ask for all &#60;i&#62; P. yoelii &#60;/i&#62; sequences. Genes By Chromosomal Location does not allow wildcards.
         </help>
 -->
        <suggest includeProjects="PiroplasmaDB"
             default="(Example: AAXT01000005,CR940349)"
             allowEmpty="true"
             emptyValue="No Match"/>
         <suggest includeProjects="CryptoDB"
             default="(Example: AAEE01000009)"
             allowEmpty="true"
             emptyValue="No Match"/>
         <suggest includeProjects="ToxoDB"
             default="(Example: TGME49_chrIa)"
             allowEmpty="true"
             emptyValue="No Match"/>
         <suggest includeProjects="PlasmoDB"
             default="(Example: Pf3D7_04_v3)"
             allowEmpty="true"
             emptyValue="No Match"/>     
         <suggest includeProjects="GiardiaDB"
             default="(Example: GLCHR05)"
             allowEmpty="true"
             emptyValue="No Match"/>     
         <suggest includeProjects="TrichDB"
             default="DS113177"/>    
         <suggest includeProjects="TriTrypDB"
             default="(Example: Tb927_02_v4)"
             allowEmpty="true"
             emptyValue="No Match"/>    
         <suggest includeProjects="AmoebaDB"
             default="(Example: DS548370)"
             allowEmpty="true"
             emptyValue="No Match"/>    
         <suggest includeProjects="MicrosporidiaDB"
             default="(Example: ECIII_CH04)"
             allowEmpty="true"
             emptyValue="No Match"/>    
          <suggest includeProjects="FungiDB"
             default="(Examples: CalbSC5314_Chr4)"
             allowEmpty="true"
             emptyValue="No Match"/>   
       </stringParam>    

         <stringParam name="start_point"
                      prompt="Start at"
                      number="true">
             <help>Enter the coordinate of the nucleotide that begins the genomic region you wish to query.</help>
             <suggest default="1"/>
         </stringParam>

         <stringParam name="end_point"
                      prompt="End Location (0 = end)"
                      number="true">
             <help> Enter the coordinate of the last nucleotide in the genomic region that you wish to query. (0 = end)</help>
             
             <suggest default="0"/>
         </stringParam>

      <stringParam name="end_point_segment"
                      prompt="End Location"
                      number="true">
             <help>Enter the coordinate of the last nucleotide in the genomic region that you wish to query. (0 = end)</help>
             <suggest default="100"/>
         </stringParam>

       <flatVocabParam name="libraryId" excludeProjects="HostDB"
                      queryRef="SharedVQ.EstLibraries"
                      prompt="EST Library"
                      multiPick="true"
                      quote="false"
                      displayType="treeBox">
         <help>
              Click the [+] to select specific experiments or use the tree box to select all for the chosen organism.
         </help>
         <suggest selectMode="all" />
       </flatVocabParam>

 <flatVocabParam name="libraryIdAssemblies" excludeProjects="CryptoDB,TrichDB,PiroplasmaDB,HostDB"
                      queryRef="SharedVQ.EstLibrariesWithAssemblies"
                      prompt="EST Library"
                      multiPick="true"
                      quote="false"
                      displayType="treeBox">
         <help>
              Select a clone library.
         </help>
         <suggest selectMode="all" />
       </flatVocabParam>


       <flatVocabParam name="libraryIdGenes" excludeProjects="HostDB"
                      queryRef="SharedVQ.EstLibrariesGenes"
                      prompt="EST Library"
                      multiPick="true"
                      quote="false"
                      displayType="treeBox">
         <help>
              Select a clone library.
         </help>
         <suggest selectMode="all" />
       </flatVocabParam>


     <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
     <!-- SNPs -->  
     <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->


    <flatVocabParam name="chromosomeOptionalForNgsSnps" includeProjects="PlasmoDB,ToxoDB,TriTrypDB,CryptoDB,AmoebaDB" 
                     prompt="Chromosome"
                     queryRef="SharedVQ.ChromosomeForNgsSnps"
                     multiPick="false"
                     quote="true"
                     dependedParamRef="organismParams.organism">
             <help>
                <![CDATA[
                Select chromosome.
                ]]>
              </help>
     </flatVocabParam>

	<!-- ======================================================== -->
	<!-- ======================================================== -->
	<!-- ======= All SNP params below here might be obsolete  === -->
	<!-- ======================================================== -->
	<!-- ======================================================== -->


       <flatVocabParam name="snp_strain_a"
                      queryRef="SharedVQ.SnpStrainAA"
                      prompt="Reference"
                      multiPick="false"
                      dependedParamRef="organismParams.organism"
                      includeProjects="PlasmoDB,ToxoDB,CryptoDB,EuPathDB">
      <noTranslation value="true" includeProjects="EuPathDB" />

      <suggest includeProjects="PlasmoDB" default="7G8"/>
      <suggest includeProjects="ToxoDB" default="ME49"/>
      <suggest includeProjects="CryptoDB" default="tu114"/>

       <help>
              Choose a reference from the list of strains.
       </help>
       </flatVocabParam>

       <flatVocabParam name="snp_strain_m" 
                      queryRef="SharedVQ.SnpStrainAA"
                      prompt="Comparator"
                      multiPick="true"
                      dependedParamRef="organismParams.organism"
                      includeProjects="PlasmoDB,ToxoDB,CryptoDB,EuPathDB">
      <noTranslation value="true" includeProjects="EuPathDB" />
       <help>
              Choose comparators from the list of strains. 
       </help>
       </flatVocabParam>


       <flatVocabParam name="htsSnp_strain_a"
                      queryRef="SharedVQ.htsSnpStrainAA"
                      prompt="Reference"
                      multiPick="false"
                      dependedParamRef="organismParams.organism"
                      excludeProjects="HostDB,GiardiaDB,PiroplasmaDB,MicrosporidiaDB">
      <noTranslation value="true" includeProjects="EuPathDB" />

      <suggest includeProjects="PlasmoDB" default="3D7"/>
      <suggest includeProjects="AmoebaDB" default="HK9"/>
      <suggest includeProjects="CryptoDB" default="TU114"/>
      <suggest includeProjects="FungiDB" default="AF293B"/>

       <help>
              Choose a reference from the list of strains.
       </help>
       </flatVocabParam>

      <flatVocabParam name="htsSnp_strains"
                      queryRef="SharedVQ.htsSnpStrainAA"
                      prompt="Strains"
                      multiPick="true"
                      quote="true"
                      displayType="checkBox"
                      dependedParamRef="organismParams.organism"
                      excludeProjects="HostDB,GiardiaDB,PiroplasmaDB,MicrosporidiaDB">
      <noTranslation value="true" includeProjects="EuPathDB" />

      <suggest includeProjects="PlasmoDB" default="3D7"/>
      <suggest includeProjects="AmoebaDB" default="HK9"/>
      <suggest includeProjects="CryptoDB" default="TU114"/>

      <help>Please select at least two strains to find polymorphisms in</help>

       </flatVocabParam>

       <flatVocabParam name="ontology_type"
                      queryRef="SharedVQ.htsSnpOntology"
                      prompt="Group Isolates by Meta Data"
                      multiPick="false"
                      quote="true"
                      dependedParamRef="organismParams.organism"
                      excludeProjects="TrichDB,HostDB,GiardiaDB,PiroplasmaDB,MicrosporidiaDB">
           <noTranslation value="true" includeProjects="EuPathDB" />
 
      <suggest includeProjects="TriTrypDB,AmoebaDB,PlasmoDB,CryptoDB,FungiDB,EuPathDB" default="StrainOrLine"/>
      <suggest includeProjects="ToxoDB" default="Haplogroup"/>
 
        <help>
           Group Isolates by Meta Data, such as Geographical Location, Host, Haplogroup ontology terms. Meta Data Information is often unavailable for the Reference Genome
        </help>
        </flatVocabParam>

       <flatVocabParam name="profile_ontology_1"
                      queryRef="SharedVQ.profileOntology"
                      prompt="Group Samples by Meta Data"
                      multiPick="false"
                      quote="true"
                      dependedParamRef="geneParams.profileset_generic"
                      includeProjects="PlasmoDB,EuPathDB">
           <noTranslation value="true" includeProjects="EuPathDB" />
 
     <!-- <suggest selectMode="all" includeProjects="PlasmoDB,EuPathDB"/> -->
 
        <help>
           Group Comparator Samples by Meta Data, such as Geographical Location, Age, Gender, DiseaseState ontology terms. Meta Data Information is often unavailable for the Reference Genome
        </help>
        </flatVocabParam>

       <flatVocabParam name="profile_ontology_2"
                      queryRef="SharedVQ.profileOntologyOptional"
                      prompt="Group Samples by Additional Meta Data (Optional)"
                      multiPick="false"
                      quote="true"
                      dependedParamRef="geneParams.profileset_generic"
                      includeProjects="PlasmoDB,EuPathDB">
           <noTranslation value="true" includeProjects="EuPathDB" />
 
      <suggest default="Do Not Care" includeProjects="PlasmoDB,EuPathDB"/>
 
        <help>
           Group Comparator Samples by Meta Data, such as Geographical Location, Age, Gender, DiseaseState ontology terms. Meta Data Information is often unavailable for the Reference Genome
        </help>
        </flatVocabParam>

       <flatVocabParam name="metadata_for_graph"
                      queryRef="SharedVQ.profileOntologyTerm"
                      prompt="Metadata category to color graph by"
                      multiPick="false"
                      quote="true"
                      dependedParamRef="geneParams.profileset_generic"
                      includeProjects="PlasmoDB,EuPathDB">
           <noTranslation value="true" includeProjects="EuPathDB" />
        </flatVocabParam>


       <filterParam name="ngsSnp_strain_meta" includeProjects="TriTrypDB,AmoebaDB,PlasmoDB,CryptoDB,ToxoDB,FungiDB,EuPathDB" 
                      queryRef="SharedVQ.htsSnpStrainAA"
                      metadataQueryRef="SharedVQ.StrainsMetadata"
                      metadataSpecQueryRef="SharedVQ.StrainsMetadataSpec"
                      prompt="Isolates"
                      multiPick="true"
                      dependedParamRef="organismParams.organism"
                      quote="true"
                      suppressNode="false">
         <help>
              Select isolates to compare using associated meta data.
         </help>
         <!-- <suggest selectMode="all" /> -->
       </filterParam>

       <filterParam name="ngsSnp_strain_meta_a" includeProjects="TriTrypDB,AmoebaDB,PlasmoDB,CryptoDB,ToxoDB,FungiDB,EuPathDB" 
                      queryRef="SharedVQ.htsSnpStrainAA"
                      metadataQueryRef="SharedVQ.StrainsMetadata"
                      metadataSpecQueryRef="SharedVQ.StrainsMetadataSpec"
                      prompt="Isolates"
                      multiPick="true"
                      dependedParamRef="organismParams.organism"
                      quote="true"
                      suppressNode="false">
         <help>
              Select isolates to compare.
         </help>
         <!-- <suggest selectMode="all" /> -->
       </filterParam>

       <filterParam name="ngsSnp_strain_meta_m" includeProjects="TriTrypDB,AmoebaDB,PlasmoDB,CryptoDB,ToxoDB,FungiDB,EuPathDB" 
                      queryRef="SharedVQ.htsSnpStrainAA"
                      metadataQueryRef="SharedVQ.StrainsMetadata"
                      metadataSpecQueryRef="SharedVQ.StrainsMetadataSpec"
                      prompt="Isolates"
                      multiPick="true"
                      dependedParamRef="organismParams.organism"
                      quote="true"
                      suppressNode="false">
         <help>
              Select isolates to compare.
         </help> 
         <!-- <suggest selectMode="all" /> -->
       </filterParam> 

         <stringParam name="hts_snps_coverage"
                      prompt="Number of aligned reads >="
                      number="true">
             <help>
               Enter a minimum number of aligned reads at the SNP position before considering this a SNP.  Note that 5 reads is the absolute minimum.
             </help>           
             <suggest default="5"
                allowEmpty="true" emptyValue="5" />
         </stringParam>

         <stringParam name="hts_snps_allele_freq"
                      prompt="Allele frequency >="
                      number="true">
             <help>
               Enter a minimum percentage of reads that match this allele before considering this a SNP.  Note: the minimum for haploid genomes is 50% and for diploid genomes the minimum is 34%.
             </help>           
             <suggest default="80"
                allowEmpty="true" emptyValue="50" />
         </stringParam>

         <stringParam name="hts_snps_pvalue"
                      prompt="P value &lt;="
                      number="true">
             <help>
               Enter a maximum P value to allow for this allele before considering this a SNP.  P values are generated by VarScan which was used to call SNPs. 
             </help>           
             <suggest default="0.01"
                allowEmpty="true" emptyValue="0.01" />
         </stringParam>


   <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
   <!-- Motif search -->
   <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

         <stringParam name="motif_expression"
                      prompt="Pattern" number="false">
             <help>Enter a Perl regular expression describing the desired motif.  Example: 'CC6+RK' searches for two consecutive cysteine residues followed by a stretch of hydrophobic amino acids followed by the aminoacids arginine and lysine.</help>
             <suggest default="CC6+RK"/>
 <noTranslation value="true" excludeProjects="EuPathDB" /> 
         </stringParam>

   <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
   <!-- Assembly search -->
   <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
         <stringParam name="min_ests_in_assembly"
                      prompt="Number of ESTs >="
                      number="true"
                      includeProjects="ToxoDB,CryptoDB,GiardiaDB,EuPathDB,PlasmoDB,TriTrypDB,AmoebaDB,MicrosporidiaDB,FungiDB,HostDB,InitDB">
             <help>
               Enter a minimum number of ESTs that is required per EST assembly.
             </help>           
             <suggest default="1"
                allowEmpty="true" emptyValue="1" />
         </stringParam>
         <stringParam name="min_lib_ests_in_assembly"
                      prompt="Number of library ESTs >="
                      number="true"
                      includeProjects="ToxoDB,CryptoDB,GiardiaDB,EuPathDB,PlasmoDB,TriTrypDB,AmoebaDB,MicrosporidiaDB,FungiDB,HostDB,InitDB">
             <help>
               Enter a minimum number of ESTs from the selected libraries that is required per EST assembly.
             </help>           
             <suggest default="1"
                allowEmpty="true" emptyValue="1" />
           <regex>\d+</regex>
         </stringParam>

     <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
     <!-- mass spec -->  
     <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
         <stringParam name="min_seq_coverage"
                      prompt="Minimum Percent Sequence Coverage"
                      number="true">
             <help>Use this parameter to set a minimum amount of (amino acid) sequence coverage for the mass spec-predicted peptides. For example, setting this parameter to 10 will return only those genes whose proteins are at least 10% covered by mass spec.-predicted peptides. In the current dataset the average percent coverage is about 9%, and the maximum is about 90%. Note that even if this parameter is set to 0%, only genes with at least some mass spec. predictions for the specified stage will be returned. In other words, it never returns proteins with 0% coverage, only those with strictly > 0%.</help>
             <suggest default="0"/>
           <regex>\d+(\.\d+)?</regex>
 <noTranslation value="true"  excludeProjects="EuPathDB"/>
         </stringParam>

         <stringParam name="min_span_count"
                      prompt="Minimum Number of Spans"
                      number="true">
             <help>Use this parameter to set a minimum for the number of nonoverlapping regions (spans) that must be found in the mass spec. data for a gene (and the specified lifecycle stage). Only genes with at least this many spans are returned</help>
            <suggest default="2"/>
           <regex>\d+</regex>
        </stringParam>

        <stringParam name="min_sequence_count"
                     prompt="Minimum Number of&lt;br&gt;Unique Peptide Sequences"
                     number="false">
           <help>Use this parameter to set a minimum for the number of unique peptide sequences found that must match a gene in order for it to be returned by the query. Roughly speaking this parameter provides a measure of the abundance of the protein product in question, at least within a particular experiment.If a gene meets this requirement for any selected sample, it will be returned</help>
           <suggest  default="1"/>
           <regex>\d+</regex>
        </stringParam>

        <stringParam name="min_spectrum_count"
                     prompt="Minimum Number of Spectra"
                     number="false">
            <help>Use this parameter to set a minimum for the number of mass spectra found that must match a gene in order for it to be returned by the query. Roughly speaking this parameter provides a measure of the abundance of the protein product in question, at least within a particular experiment.If a gene meets this requirement for any selected sample, it will be returned</help>
            <suggest default="1"/>
           <regex>\d+</regex>
        </stringParam>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- History -->  
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

        <answerParam name="isolateHistoryIdA" includeProjects="PlasmoDB,EuPathDB"
                      prompt="Isolate History ID for Set A">
              <help>The number in the left column of My Query History</help>
              <recordClass ref="IsolateRecordClasses.IsolateRecordClass" />
        </answerParam>

        <answerParam name="isolateHistoryIdB" includeProjects="PlasmoDB,EuPathDB"
                      prompt="Isolate History ID for Set B">
              <help>The number in the left column of My Query History</help>
              <recordClass ref="IsolateRecordClasses.IsolateRecordClass" />
        </answerParam>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- History -->  
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
	 
  <enumParam name="chromosome_with_organelles"
                     prompt="Genomic Sequence"
                     multiPick="false"
                     excludeProjects="EuPathDB,GiardiaDB,TrichDB,TriTrypDB,AmoebaDB,MicrosporidiaDB,FungiDB,HostDB,InitDB,PiroplasmaDB"> 
    <help>
             Results will be sorted ascending or descending orde
    </help>
    <enumList includeProjects="PlasmoDB">   
        <enumValue>
          <term>chromosome 1</term>
          <internal>'Pf3D7_01_v3'</internal>
        </enumValue>
        <enumValue>
          <term>chromosome 2</term>
          <internal>'Pf3D7_02_v3'</internal>
        </enumValue>
        <enumValue>
          <term>chromosome 3</term>
          <internal>'Pf3D7_03_v3'</internal>
        </enumValue>
        <enumValue>
          <term>chromosome 4</term>
          <internal>'Pf3D7_04_v3'</internal>
        </enumValue>
        <enumValue>
          <term>chromosome 5</term>
          <internal>'Pf3D7_05_v3'</internal>
        </enumValue>
        <enumValue>
          <term>chromosome 6</term>
          <internal>'Pf3D7_06_v3'</internal>
        </enumValue>
        <enumValue>
          <term>chromosome 7</term>
          <internal>'Pf3D7_07_v3'</internal>
        </enumValue>
        <enumValue>
          <term>chromosome 8</term>
          <internal>'Pf3D7_08_v3'</internal>
        </enumValue>
        <enumValue>
          <term>chromosome 9</term>
          <internal>'Pf3D7_09_v3'</internal>
        </enumValue>
        <enumValue>
          <term>chromosome 10</term>
          <internal>'Pf3D7_10_v3'</internal>
        </enumValue>
        <enumValue>
          <term>chromosome 11</term>
          <internal>'Pf3D7_11_v3'</internal>
        </enumValue>
        <enumValue>
          <term>chromosome 12</term>
          <internal>'Pf3D7_12_v3'</internal>
        </enumValue>
        <enumValue>
          <term>chromosome 13</term>
          <internal>'Pf3D7_13_v3'</internal>
        </enumValue>
        <enumValue>
          <term>chromosome 14</term>
          <internal>'Pf3D7_14_v3'</internal>
        </enumValue>
        <enumValue>
          <term>mitochondrial genome</term>
          <internal>'AJ276844'</internal>
        </enumValue>
        <enumValue>
          <term>plastid IR-A</term>
          <internal>'X95275'</internal>
        </enumValue>
        <enumValue>
          <term>plastid IR-B</term>
          <internal>'X95276'</internal>
        </enumValue>
     </enumList>   
		
     <enumList includeProjects="ToxoDB">   
         <enumValue>
            <term>T.g. Ia</term>
            <internal>Ia</internal>
          </enumValue>
          <enumValue>
            <term>T.g. Ib</term>
            <internal>Ib</internal>
          </enumValue>
          <enumValue>
            <term>T.g. II</term>
            <internal>II</internal>
          </enumValue>
          <enumValue>
            <term>T.g. III</term>
            <internal>III</internal>
          </enumValue>
          <enumValue>
            <term>T.g. IV</term>
            <internal>IV</internal>
          </enumValue>
          <enumValue>
            <term>V</term>
            <internal>V</internal>
          </enumValue>
          <enumValue>
            <term>VI</term>
            <internal>VI</internal>
          </enumValue>
          <enumValue>
            <term>VIIa</term>
            <internal>VIIa</internal>
          </enumValue>
          <enumValue>
            <term>VIIb</term>
            <internal>VIIb</internal>
          </enumValue>
          <enumValue>
            <term>VIII</term>
            <internal>VIII</internal>
          </enumValue>
          <enumValue>
            <term>T.g. IX</term>
            <internal>IX</internal>
          </enumValue>
          <enumValue>
            <term>T.g. X</term>
            <internal>X</internal>
          </enumValue>
          <enumValue>
            <term>T.g. XI</term>
            <internal>XI</internal>
          </enumValue>
          <enumValue>
            <term>T.g. XII</term>
            <internal>XII</internal>
          </enumValue>
      </enumList>   
		
      <enumList includeProjects="CryptoDB">   
        <enumValue>
          <term>AAEE01000006 (Chromosome 1)</term>
          <internal>AAEE01000006</internal>
        </enumValue>
        <enumValue>
          <term>AAEE01000005 (Chromosome 2)</term>
          <internal>AAEE01000005</internal>
        </enumValue>
        <enumValue>
          <term>AAEE01000013 (Chromosome 2)</term>
          <internal>AAEE01000013</internal>
        </enumValue>
        <enumValue>
          <term>AAEE01000004 (Chromosome 3)</term>
          <internal>AAEE01000004</internal>
        </enumValue>
        <enumValue>
          <term>AAEE01000015 (Chromosome 3)</term>
          <internal>AAEE01000015</internal>
        </enumValue>
        <enumValue>
          <term>AAEE01000008 (Chromosome 4)</term>
          <internal>AAEE01000008</internal>
        </enumValue>
        <enumValue>
          <term>AAEE01000009 (Chromosome 4)</term>
          <internal>AAEE01000009</internal>
        </enumValue>
        <enumValue>
          <term>AAEE01000012 (Chromosome 4)</term>
          <internal>AAEE01000012</internal>
        </enumValue>
        <enumValue>
          <term>AAEE01000007 (Chromosome 5)</term>
          <internal>AAEE01000007</internal>
        </enumValue>
        <enumValue>
          <term>AAEE01000018 (Chromosome 5)</term>
          <internal>AAEE01000018</internal>
        </enumValue>
        <enumValue>
          <term>AAEE01000017 (Chromosome 5)</term>
          <internal>AAEE01000017</internal>
        </enumValue>
        <enumValue>
          <term>AAEE01000010 (Chromosome 5)</term>
          <internal>AAEE01000010</internal>
        </enumValue>
        <enumValue>
          <term>AAEE01000002 (Chromosome 6)</term>
          <internal>AAEE01000002</internal>
        </enumValue>
        <enumValue>
          <term>AAEE01000014 (Chromosome 6)</term>
          <internal>AAEE01000014</internal>
        </enumValue>
        <enumValue>
          <term>BX526834 (Chromosome 6)</term>
          <internal>BX526834</internal>
        </enumValue>
        <enumValue>
          <term>AAEE01000016 (Chromosome 6)</term>
          <internal>AAEE01000016</internal>
        </enumValue>
        <enumValue>
          <term>AAEE01000001 (Chromosome 7)</term>
          <internal>AAEE01000001</internal>
        </enumValue>
        <enumValue>
          <term>AAEE01000003 (Chromosome 8)</term>
          <internal>AAEE01000003</internal>
        </enumValue>
        <enumValue>
          <term>AAEE01000011 (Chromosome 8)</term>
          <internal>AAEE01000011</internal>
        </enumValue>
      </enumList>   
    </enumParam>

    <stringParam name="wdk_record_type"
                 visible="false" number="false">
    </stringParam>

    <enumParam name="project_id"
               visible="false">
      <noTranslation value="true" includeProjects="EuPathDB" />
      <enumList>   
        <enumValue>
          <term>CryptoDB</term>
          <internal>CryptoDB</internal>
        </enumValue>
        <enumValue>
          <term>PlasmoDB</term>
          <internal>PlasmoDB</internal>
        </enumValue>
        <enumValue>
          <term>ToxoDB</term>
          <internal>ToxoDB</internal>
        </enumValue>
        <enumValue>
          <term>GiardiaDB</term>
          <internal>GiardiaDB</internal>
        </enumValue>
        <enumValue>
          <term>TrichDB</term>
          <internal>TrichDB</internal>
        </enumValue>
        <enumValue>
          <term>TriTrypDB</term>
          <internal>TriTrypDB</internal>
        </enumValue>
      </enumList>   
    </enumParam>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Text Expression -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

        <stringParam name="text_expression"
                     prompt="Text term (use * as wildcard)" number="false">
            <help>Enter text you would like to search for. Multiple words may be entered, for example: membrane receptor signal inner. Use an asterisk as a wildcard to match partial words.</help>
            <suggest default="synth*"/>
           <regex>.*[^*].*</regex>
        </stringParam>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Timestamp Params -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- the timestampParam will automatically generate a new value every
         user reruns a query from the question page. -->

        <!-- cache the result for 1 minute. -->
        <timestampParam name="timestamp" interval="60"
                     prompt="Time Stamp">
            <help>A new value will be generated automatically every time when user runs/reruns a query from question page</help>
            <suggest allowEmpty="true" emptyValue="0"/>
        </timestampParam>


        
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- wdk weight filter -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
        

        <stringParam name="min_weight"
                     prompt="Minimum weight"
                     number="true">
            <help>Enter the minimum weight of the result</help>
            <suggest default="0"/>
        </stringParam>

        <stringParam name="max_weight"
                     prompt="Maximum weight"
                     number="true">
            <help>Enter the maximum weight of the result</help>
            <suggest default="100"/>
        </stringParam>

    <flatVocabParam name="question_popularity"
                    queryRef="SharedVQ.QuestionPopularity" />

  </paramSet>



<!-- Parameters for the SRT Page -->
<paramSet name="SrtParams">
<!-- SrtParams.genes_ids -->
        <stringParam name="genes_ids"
            id="genes_ids"
            prompt="Gene IDs"
            number="false">
            <help>Gene IDs (locus tags) are quite different for each species. We use the gene IDs provided
by the sequence generator.</help>

           <suggest default="%%defaultGene%%"/>
	</stringParam>

<!-- SrtParams.contigs_ids -->
        <stringParam name="contigs_ids"
            id="contigs_ids"
            prompt="Contig IDs" number="false">

        <suggest default="%%defaultGenome%%"
                 allowEmpty="true"
                 emptyValue="No Match"/>
</stringParam>


<!-- SrtParams.orfs_ids -->
        <stringParam name="orfs_ids"
            id="orfs_ids"
            prompt="ORFs IDs"
            number="false">
 <suggest includeProjects="GiardiaDB"
                     default="AACB02000007-6-227160-226945"/>
<suggest includeProjects="TrichDB"
                     default="DS113375-1-114214-114468"/>
            <suggest includeProjects="PlasmoDB"
                     default="Pf3D7_01-1-10639-11520"/>
            <suggest includeProjects="ToxoDB"
                     default="tgme49_asmbl.1868-6-273411-272713"/>
            <suggest includeProjects="CryptoDB"
                     default="AAEL01000259-5-3339-3085"/>
            <suggest includeProjects="AmoebaDB"
                     default="DS571186-1-24160-24672"/>
            <suggest includeProjects="MicrosporidiaDB"
                     default="ECII_CH06-3-138630-138959"/>
            <suggest includeProjects="EuPathDB"
                     default="AAEL01000259-5-3339-3085"/>
        </stringParam>

</paramSet>
<!-- End SRT Parameters -->


  <!--======================================================================-->
  <!-- General Vocab queries  -->
  <!--======================================================================-->

  <querySet name="SharedVQ" queryType="vocab" isCacheable="true">



        <sqlQuery name="BlastOrganismFiles">
            <paramRef ref="sharedParams.BlastDatabaseType"/>
            <column name="internal" />
            <column name="term" />
            <column name="parentTerm" />
            <sql>
                <![CDATA[
 WITH orgs as ( 
 select distinct organism, project_id, type from apidbtuning.blasttypes
  ) 
     select distinct nvl(ot.term, files.term) as term,
     case when ot.organism is null then files.parentterm else ot.parentterm end as parentterm,
      case when (ot.organism is null or
           ( ot.organism is not null and ot.term = files.term)) then files.abbreviation
           else '-1'
      end as internal
From apidbtuning.organismtree ot, (
    select distinct abbrev.organism as term,
            abbrev.parent as parentTerm,
           '@WEBSERVICEMIRROR@' || '/' || orgs.project_id || '/build-%%buildNumber%%/' || abbreviation || '/blast/' || abbreviation as abbreviation
     from orgs, apidbtuning.organismabbreviationblast abbrev
     where orgs.organism = abbrev.organism
      and orgs.type = '$$BlastDatabaseType$$'
      and (orgs.project_id = '@PROJECT_ID@' OR 'EuPathDB' = '@PROJECT_ID@')
      -- need to hard-code this constraint till the org. name has a strain -- redmine #15623 
      AND NOT (abbreviation like 'GniphandrodesUnknown' and orgs.type = 'ESTs')
     ) files
where files.term = ot.organism (+)  
order by term
                ]]>
            </sql>
        </sqlQuery>


 <processQuery name="chromosomeOptional"  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" includeProjects="EuPathDB">
      <paramRef ref="organismParams.organism" quote="false"/> 
      <wsColumn name="internal" width="32" wsName="internal"/>
      <wsColumn name="term" width="32" wsName="term"/>
      <wsColumn name="parentTerm" width="32" wsName="parentTerm" />
    </processQuery>




        <sqlQuery name="ChromosomeOrderNum" excludeProjects="EuPathDB" isCacheable="true" doNotTest="true">
            <paramRef ref="organismParams.organism" quote="true" queryRef="organismVQ.withChromosomes"/> 
            <column name="internal"/>
            <column name="term"/>
            <sql>
             select * from (
               select distinct chromosome as term , chromosome as internal, chromosome_order_num 
               from ApidbTuning.SequenceAttributes 
               where organism in ($$organism$$)
                and chromosome is not null
             union
             select 'Choose chromosome' as term,
                    'Choose chromosome' as internal,
                    -1 as chromosome_order_num
             from dual
              )
             order by chromosome_order_num asc
            </sql>
        </sqlQuery>

	<processQuery name="ChromosomeOrderNum"  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" includeProjects="EuPathDB" doNotTest="true">
	  <paramRef ref="organismParams.organism" quote="false" queryRef="organismVQ.withChromosomes"/> 
	  <wsColumn name="internal" width="32" wsName="internal"/>
	  <wsColumn name="term" width="130" wsName="term"/>
	</processQuery>


        <sqlQuery name="ChromosomeForNgsSnps" includeProjects="PlasmoDB,ToxoDB,TriTrypDB,CryptoDB,AmoebaDB"  isCacheable="true" doNotTest="true">
            <paramRef ref="organismParams.organism" quote="true" queryRef="organismVQ.withHtsSNPs"/>
            <column name="internal"/>
            <column name="term"/>
            <sql>
	      SELECT * FROM (
		SELECT distinct chromosome AS term , source_id AS internal, chromosome_order_num AS chromosome_order_num
		FROM ApidbTuning.SequenceAttributes
		WHERE organism  = $$organism$$
		AND chromosome is not null
               UNION
               SELECT 'Choose chromosome' as term,
                    'choose' as internal,
                    -1 as chromosome_order_num
             FROM dual
	     )
	     ORDER BY chromosome_order_num
            </sql>
        </sqlQuery>
        
	<!-- ======================================================== -->
	<!-- ======================================================== -->
	<!-- ====== All SNP queries below here might be obsolete  === -->
	<!-- ======================================================== -->
	<!-- ======================================================== -->

        <sqlQuery name="ChromosomeOrderNumMultipickForSnps" includeProjects="PlasmoDB,ToxoDB,CryptoDB" isCacheable="true" doNotTest="true">
            <paramRef ref="organismParams.organism" quote="true" queryRef="organismVQ.withChromosomesSNPs"/>
            <column name="internal"/>
            <column name="term"/>
            <sql>
	      SELECT * FROM (
		SELECT distinct chromosome AS term , chromosome AS internal, chromosome_order_num AS chromosome_order_num
		FROM ApidbTuning.SequenceAttributes
		WHERE organism  = $$organism$$
		AND chromosome is not null
               UNION
               SELECT 'Choose chromosome' as term,
                    'Choose chromosome' as internal,
                    -1 as chromosome_order_num
             FROM dual
	     )
	     ORDER BY chromosome_order_num
            </sql>
        </sqlQuery>
        
       <processQuery name="ChromosomeOrderNumMultipickForSnps"  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" includeProjects="EuPathDB">
	  <paramRef ref="organismParams.organism" quote="false" queryRef="organismVQ.withChromosomesSNPs"/> 
	  <wsColumn name="internal" width="32" wsName="internal"/>
	  <wsColumn name="term" width="32" wsName="term"/>
	</processQuery>


        <sqlQuery name="ChromosomeOrderNumMultipick" excludeProjects="EuPathDB,GiardiaDB,MicrosporidiaDB,PiroplasmaDB,AmoebaDB,HostDB" isCacheable="true" doNotTest="true">
           
            <paramRef ref="organismParams.organism" quote="true" queryRef="organismVQ.withChromosomesHtsSNPs"/>
            <column name="internal"/>
            <column name="term" width="55"/>
            <sql>
               SELECT * FROM (
                SELECT chromosome as term,
                 chromosome as internal,
                 chromosome_order_num as chromosome_order_num
		FROM ApidbTuning.SequenceAttributes
		WHERE organism  = $$organism$$
		AND chromosome is not null
              UNION
              SELECT CASE WHEN (SELECT count(*) FROM ApidbTuning.SequenceAttributes
                                WHERE chromosome_order_num is not null 
                                  AND organism = $$organism$$) = 0
                          THEN 'Not Applicable. Please use the Sequence ID tab'
                          ELSE 'Choose chromosome' 
                          END AS  term,
                     '0' AS internal,
                     -1 AS chromosome_order_num
              FROM ApidbTuning.SequenceAttributes)
	      ORDER BY chromosome_order_num
            </sql>
        </sqlQuery>
        
       <processQuery name="ChromosomeOrderNumMultipick"  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" includeProjects="EuPathDB">
	  <paramRef ref="organismParams.organism" quote="false" queryRef="organismVQ.withChromosomesHtsSNPs"/> 
	  <wsColumn name="internal" width="32" wsName="internal"/>
	  <wsColumn name="term" width="55" wsName="term"/>
	</processQuery>


      <sqlQuery name="CentromereChromosome" includeProjects="PlasmoDB,ToxoDB">
	<paramRef ref="organismParams.org_with_centromere_genes" /> 
	<column name="internal"/>
	<column name="term"/>
	<column name="display"/>
	<sql>
	  <![CDATA[
	    SELECT DISTINCT sa.source_id as internal, sa.source_id as term,
                  ('chromsome ' || sa.chromosome) as display, sa.chromosome_order_num
	     FROM ApidbTuning.GeneCentromereDistance gcd, apidbtuning.sequenceattributes sa 
	     WHERE gcd.genomic_sequence = sa.source_id
	     AND sa.organism = $$org_with_centromere_genes$$
	     ORDER BY sa.chromosome_order_num
	  ]]>
	</sql>
      </sqlQuery>

      <processQuery name="CentromereChromosome" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" includeProjects="EuPathDB">
	<paramRef ref="organismParams.org_with_centromere_genes" quote="false" /> 
	<wsColumn name="internal" width="100" wsName="internal"/>
	<wsColumn name="term" width="100" wsName="term"/>
      </processQuery>



      <sqlQuery name="TelomereChromosomes" includeProjects="PlasmoDB" doNotTest="true">
	<paramRef ref="organismParams.organism" quote="true" queryRef="organismVQ.withChromosomes"/> 
	<column name="internal"/>
	<column name="term"/>
	<column name="display"/>
	<sql>
	  <![CDATA[
	    SELECT source_id as internal, source_id as term,
                  ('chromsome ' || chromosome) as display,  chromosome_order_num
	    FROM apidbtuning.sequenceattributes sa 
	    WHERE organism = $$organism$$
	    AND NOT (chromosome is null OR chromosome ='unk')
	    ORDER BY chromosome_order_num
	  ]]>
	</sql>
      </sqlQuery>

      <processQuery name="TelomereChromosomes" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" includeProjects="EuPathDB" doNotTest="true">
	<paramRef ref="organismParams.organism" quote="false" queryRef="organismVQ.withChromosomes"/> 
	<wsColumn name="internal" width="100" wsName="internal"/>
	<wsColumn name="term" width="100" wsName="term"/>
      </processQuery>



      <sqlQuery name="PfSeqId" includeProjects="PlasmoDB">
	<column name="internal"/>
	<column name="term"/>
	<column name="display"/>
	<sql>
	  <![CDATA[
	    SELECT DISTINCT sa.source_id as internal, sa.source_id as term,
                  ('P.f. chromosome ' || sa.chromosome) as display, sa.chromosome_order_num
	     FROM apidbtuning.sequenceattributes sa 
	     WHERE sa.organism = 'Plasmodium falciparum 3D7'
	     AND sa.chromosome_order_num IS NOT NULL
	     ORDER BY sa.chromosome_order_num
	  ]]>
	</sql>
      </sqlQuery>

      <processQuery name="PfSeqId" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" includeProjects="EuPathDB">
	<wsColumn name="internal" width="100" wsName="internal"/>
	<wsColumn name="term" width="100" wsName="term"/>
	<wsColumn name="display" width="100"/>
      </processQuery>



        <sqlQuery name="SnpStrainAA" includeProjects="PlasmoDB,ToxoDB,CryptoDB">
          <paramRef ref="organismParams.organism" quote="true" queryRef="organismVQ.withSNPs"/> 
          <column name="internal"/>
          <column name="term"/>
          <sql>
SELECT * FROM (
SELECT distinct 
  CASE WHEN st.strain='Preich' THEN  'P. reichenowi (vs. 3D7 only)'
       ELSE st.strain
	END as term, st.strain as internal
FROM ApiDBTuning.SnpStrains st
WHERE st.is_queryable = 1
  AND st.organism in ( $$organism$$ )
  AND st.strain not like '%-Broad'
  AND st.strain not like '%-NIH'    
  AND extdb_name != 'InsertSnps.pm NGS SNPs INTERNAL'
) ORDER BY term
          </sql>
        </sqlQuery>

        <processQuery name="SnpStrainAA" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" includeProjects="EuPathDB">
            <paramRef ref="organismParams.organism" quote="true" queryRef="organismVQ.withSNPs"/> 
            <wsColumn name="internal" width="32" wsName="internal"/>
            <wsColumn name="term" width="32" wsName="term"/>
        </processQuery> 
 


        <sqlQuery name="htsSnpStrainAA" excludeProjects="HostDB,GiardiaDB,PiroplasmaDB,EuPathDB,MicrosporidiaDB,HostDB" doNotTest="true">
          <paramRef ref="organismParams.organism" quote="true" queryRef="organismVQ.withNgsSNPs"/> 
          <column name="internal"/>
          <column name="term"/>
          <sql>
            select distinct st.strain as term, st.strain as internal
            from ApiDBTuning.SnpStrains st
            where st.extdb_name = 'InsertSnps.pm NGS SNPs INTERNAL'
            and st.organism in ($$organism$$)
            order by st.strain
          </sql>
        </sqlQuery>

        <processQuery name="htsSnpStrainAA" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" includeProjects="EuPathDB" doNotTest="true">
            <paramRef ref="organismParams.organism" quote="true" queryRef="organismVQ.withHtsSNPs"/> 
            <wsColumn name="internal" width="32" wsName="internal"/>
            <wsColumn name="term" width="32" wsName="term"/>
        </processQuery>

        <sqlQuery name="StrainsMetadata" doNotTest="true" includeProjects="TriTrypDB,AmoebaDB,PlasmoDB,CryptoDB,ToxoDB,FungiDB"> 
            <paramRef ref="organismParams.organism" quote="true" queryRef="organismVQ.withNgsSNPs"/>   
            <column name="term" />
            <column name="property"/>
            <column name="value" />
            <sql>
           <![CDATA[
with categories as (
            Select Oe.Category
            From
                 Apidbtuning.SnpStrains ss,
                 Study.Biomaterialcharacteristic Bmc,
                 STUDY.biosource bs,
                 Study.Ontologyentry oe,
                 sres.externaldatabase ed,
                 sres.externaldatabaserelease edr
           Where Bmc.Bio_Material_Id = bs.Bio_Material_Id 
             and Bmc.Ontology_Entry_Id = Oe.Ontology_Entry_Id
             and edr.external_database_id = ed.external_database_id
             and ss.var_extdb_name = ed.name
             and bs.external_database_release_id = edr.external_database_release_id
             And ss.organism =  $$organism$$
            Union
            Select Oe.Category
            From
                 Apidbtuning.SnpStrains ss,
                 Study.Biomaterialcharacteristic Bmc,
                 STUDY.biosample bs,
                 Study.Ontologyentry oe,
                 sres.externaldatabase ed,
                 sres.externaldatabaserelease edr
           Where Bmc.Bio_Material_Id = bs.Bio_Material_Id 
             and Bmc.Ontology_Entry_Id = Oe.Ontology_Entry_Id
             and edr.external_database_id = ed.external_database_id
             and ss.var_extdb_name = ed.name
             and bs.external_database_release_id = edr.external_database_release_id
             And ss.organism =  $$organism$$
             Group by Oe.category
             having count(distinct oe.value) >1
           ),
       nbym as (
          Select distinct ss.strain, category
            from ApidbTuning.snpStrains ss,
                 categories cat
            where ss.organism =  $$organism$$
          Union  
          select ss.strain, 'StrainOrLine' as category
              from ApidbTuning.snpStrains ss
          where ss.organism = $$organism$$
                 
       )           
select distinct nbym.strain as term, nbym.category as property, 
Case when nbym.category = 'StrainOrLine' then nvl(main.value,nbym.strain)
     else nvl(replace(main.value,'undefined','unknown'), 'unknown') 
     end as value 
from (
select 
ss.strain as term,
oe.category as property,
oe.value as value
from
study.biosource bm,
STUDY.biomaterialcharacteristic bmc,
STUDY.ontologyentry oe,
apidbtuning.snpstrains ss,
sres.externaldatabase ed,
sres.externaldatabaserelease edr
where bm.bio_material_id = bmc.bio_material_id
and bmc.ontology_entry_id =oe.ontology_entry_id
and oe.value is not null
and edr.external_database_id = ed.external_database_id
and ss.var_extdb_name = ed.name
and bm.external_database_release_id = edr.external_database_release_id
and ss.organism =   $$organism$$
and ss.extdb_name = 'InsertSnps.pm NGS SNPs INTERNAL'  
union
SELECT ss.strain as term,
      'StrainOrLine' as propertry,
       ss.strain as value
       from APIDBTUNING.snpstrains ss
       where ss.organism =  $$organism$$
         and ss.extdb_name = 'InsertSnps.pm NGS SNPs INTERNAL'
)main, nbym
where main.term(+) = nbym.strain
  and main.property(+) = nbym.category
            ]]>
            </sql>
        </sqlQuery>

        <processQuery name="StrainsMetadata" doNotTest="true" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" includeProjects="EuPathDB">
            <paramRef ref="organismParams.organism" quote="true" queryRef="organismVQ.withNgsSNPs"/> 
            <wsColumn name="term" width="100" wsName="term"/>
            <wsColumn name="property"  width="100" wsName="property"/>
            <wsColumn name="value" width="100" wsName="value"/>
 
        </processQuery>


        <sqlQuery name="StrainsMetadataSpec" doNotTest="1" includeProjects="TriTrypDB,AmoebaDB,PlasmoDB,CryptoDB,ToxoDB,FungiDB">  
            <column name="property" />
            <column name="spec_property"/>
            <column name="spec_value" />
            <sql>
           <![CDATA[
 SELECT 'Year' as property, 'type' as spec_property, 'string' as spec_value FROM dual
 UNION
 SELECT 'Year' as property, 'filter' as spec_property, 'membership' as spec_value FROM dual
 UNION
 SELECT 'Year' as property, 'display' as spec_property, 'Year' as spec_value FROM dual
 UNION
 SELECT 'Host' as property, 'type' as spec_property, 'string' as spec_value FROM dual
 UNION
 SELECT 'Host' as property, 'filter' as spec_property, 'membership' as spec_value FROM dual
 UNION
 SELECT 'Host' as property, 'display' as spec_property, 'Host' as spec_value FROM dual
 UNION
 SELECT 'GeographicLocation' as property, 'type' as spec_property, 'string' as spec_value FROM dual
 UNION
 SELECT 'GeographicLocation' as property, 'filter' as spec_property, 'membership' as spec_value FROM dual
 UNION
 SELECT 'GeographicLocation' as property, 'display' as spec_property, 'GeographicLocation' as spec_value FROM dual
 UNION
 SELECT 'StrainOrLine' as property, 'type' as spec_property, 'string' as spec_value FROM dual
 UNION
 SELECT 'StrainOrLine' as property, 'filter' as spec_property, 'membership' as spec_value FROM dual
 UNION
 SELECT 'StrainOrLine' as property, 'display' as spec_property, 'StrainOrLine' as spec_value FROM dual
 UNION
 SELECT value as property, 'description' as spec_property, NVL(definition, '') as spec_value FROM STUDY.ontologyentry
    WHERE value in ('Year', 'Host', 'StrainOrLine', 'GeographicLocation')
            ]]>


            </sql>
        </sqlQuery>

        <processQuery name="StrainsMetadataSpec" doNotTest="true" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" includeProjects="EuPathDB">
            <wsColumn name="property" width="100" wsName="property"/>
            <wsColumn name="spec_property" width="100" wsName="spec_property"/>
            <wsColumn name="spec_value"  width="1000" wsName="spec_value"/>
        </processQuery>


        <sqlQuery name="htsSnpOntology" includeProjects="TriTrypDB,AmoebaDB,PlasmoDB,CryptoDB,ToxoDB,FungiDB" doNotTest="true">
          <paramRef ref="organismParams.organism" quote="true" queryRef="organismVQ.withNgsSNPs"/>  
          <column name="display"/>
          <column name="internal"/>
          <column name="term"/>
          <sql>
SELECT distinct display, term, internal
FROM
(
SELECT display, term, internal
FROM
(
SELECT count(distinct oe.value) as node, 
       oe.category as display,
       CASE WHEN oe.category = 'ATCC#' THEN 'ATCC' 
       ELSE oe.category 
       END as term, oe.category as internal
FROM   apidb.datasource ds, 
       sres.externaldatabase ed, 
       SRES.externaldatabaserelease edr, 
       study.study s,
       rad.studybiomaterial sb, 
       STUDY.biomaterialcharacteristic bc, 
       study.ontologyentry oe, 
       study.biomaterial b,
       apidbtuning.snpstrains ss
WHERE  ds.type = 'isolates'
   and ds.subtype = 'HTS_SNP'
   --and ds.name not like '%SNPSample%'
   and ed.name = ds.external_database_name
   and ed.external_database_id = edr.external_database_id
   --and edr.external_database_release_id = s.external_database_release_id
   and ds.external_database_name like s.name || '%'
   and s.study_id = sb.study_id
   and sb.bio_material_id = bc.bio_material_id
   and sb.bio_material_id = b.bio_material_id
   and bc.ontology_entry_id = oe.ontology_entry_id
   and ss.var_extdb_name = ds.external_database_name
   --and oe.category != 'ATCC#'
   and ss.organism in ( $$organism$$ )
group by oe.category
)
WHERE node > 1
UNION
SELECT 'StrainOrLine' as display,
       'StrainOrLine' as term,
       'StrainOrLine' as internal
FROM dual
)
order by term 

/**
SELECT distinct oe.category as term, oe.category as internal
FROM   apidb.datasource ds,
       sres.externaldatabase ed,
       SRES.externaldatabaserelease edr,
       study.study s,
       rad.studybiomaterial sb,
       STUDY.biomaterialcharacteristic bc,
       study.ontologyentry oe,
       study.biomaterial b,
       apidbtuning.isolateattributes ia,
       apidbtuning.snpstrains ss
WHERE  ds.type = 'isolates'
   and ds.subtype = 'HTS_SNP'
   and ds.name not like '%SNPSample%'
   and ed.name = ds.external_database_name
   and ed.external_database_id = edr.external_database_id
   and edr.external_database_release_id = s.external_database_release_id
   and s.study_id = sb.study_id
   and sb.bio_material_id = bc.bio_material_id
   and sb.bio_material_id = b.bio_material_id
   and bc.ontology_entry_id = oe.ontology_entry_id
   and b.source_id = ia.source_id
   and ss.var_extdb_name = ia.external_db_name
   and ss.organism in( $$organism$$)
*/
          </sql>
        </sqlQuery>

        <processQuery name="htsSnpOntology" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" includeProjects="EuPathDB" doNotTest="true">
           <paramRef ref="organismParams.organism" quote="true" queryRef="organismVQ.withNgsSNPs"/>  
            <wsColumn name="internal" width="32" wsName="internal"/>
            <wsColumn name="term" width="32" wsName="term"/>
        </processQuery>

        <sqlQuery name="profileOntologyTerm" includeProjects="PlasmoDB" doNotTest="true">
          <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.profileset_generic" quote="false" queryRef="GeneVQ.GenericProfiles"/>
          <column name="display"/>
          <column name="internal"/>
          <column name="term"/>
          <sql>
            Select * from 
            (Select Oe.Value As display,
                    oe.value As internal,
                    oe.value As term, 1 as order_num
            From
                 Study.Study S,
                 Apidb.Profileset Ps,
                 Rad.Studybiomaterial Sbm,
                 Study.Biomaterialcharacteristic Bmc,
                 Study.Ontologyentry oe
            Where Ps.External_Database_Release_Id = S.External_Database_Release_Id  
              And S.Study_Id = Sbm.Study_Id 
              And Bmc.Bio_Material_Id = Sbm.Bio_Material_Id
              And Bmc.Ontology_Entry_Id = Oe.Ontology_Entry_Id
              And Ps.Profile_Set_Id = $$profileset_generic$$
            Group by Oe.value, bmc.ontology_entry_id
            having count(distinct BMC.value) >1
           )
            Order By order_num,term
          </sql>
        </sqlQuery>

        <processQuery name="profileOntologyTerm" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" includeProjects="EuPathDB" doNotTest="true">
           <paramRef ref="geneParams.profileset_generic" quote="true" queryRef="GeneVQ.GenericProfiles"/>  
            <wsColumn name="internal" width="32" wsName="internal"/>
            <wsColumn name="term" width="32" wsName="term"/>
            <wsColumn name="display" width="32" wsName="display"/>
        </processQuery>

        <sqlQuery name="profileOntology" includeProjects="PlasmoDB" doNotTest="true">
          <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.profileset_generic" quote="false" queryRef="GeneVQ.GenericProfiles"/>
          <column name="display"/>
          <column name="internal"/>
          <column name="term"/>
          <sql>

            Select * from 
            (Select Oe.Value As display,
                   Bmc.ontology_entry_id As internal,
                   oe.value As term, 1 as order_num
            From
                 Study.Study S,
                 Apidb.Profileset Ps,
                 Rad.Studybiomaterial Sbm,
                 Study.Biomaterialcharacteristic Bmc,
                 Study.Ontologyentry oe
            Where Ps.External_Database_Release_Id = S.External_Database_Release_Id  
              And S.Study_Id = Sbm.Study_Id 
              And Bmc.Bio_Material_Id = Sbm.Bio_Material_Id
              And Bmc.Ontology_Entry_Id = Oe.Ontology_Entry_Id
              And Ps.Profile_Set_Id = $$profileset_generic$$
            Group by Oe.value, bmc.ontology_entry_id
            having count(distinct BMC.value) >1
           )
            Order By order_num,term
          </sql>
        </sqlQuery>

        <processQuery name="profileOntology" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" includeProjects="EuPathDB" doNotTest="true">
           <paramRef ref="geneParams.profileset_generic" quote="true" queryRef="GeneVQ.GenericProfiles"/>  
            <wsColumn name="internal" width="32" wsName="internal"/>
            <wsColumn name="term" width="32" wsName="term"/>
            <wsColumn name="display" width="32" wsName="display"/>
        </processQuery>


        <sqlQuery name="profileOntologyOptional" includeProjects="PlasmoDB" doNotTest="true">
          <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.profileset_generic" quote="false" queryRef="GeneVQ.GenericProfiles"/>
          <column name="display"/>
          <column name="internal"/>
          <column name="term"/>
          <sql>
            Select * from 
            (Select Oe.Value As display,
                   Bmc.ontology_entry_id As internal,
                   oe.value As term, 1 as order_num
            From
                 Study.Study S,
                 Apidb.Profileset Ps,
                 Rad.Studybiomaterial Sbm,
                 Study.Biomaterialcharacteristic Bmc,
                 Study.Ontologyentry oe
            Where Ps.External_Database_Release_Id = S.External_Database_Release_Id  
              And S.Study_Id = Sbm.Study_Id 
              And Bmc.Bio_Material_Id = Sbm.Bio_Material_Id
              And Bmc.Ontology_Entry_Id = Oe.Ontology_Entry_Id
              And Ps.Profile_Set_Id = $$profileset_generic$$
            Group by Oe.value, bmc.ontology_entry_id
            having count(distinct BMC.value) >1
            Union
            Select 'Do Not Care' as display,
                   -1 as internal,
                   'Do Not Care' as term,
                   2 as order_num
            From Dual)
            Order By order_num,term
          </sql>
        </sqlQuery>

        <processQuery name="profileOntologyOptional" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" includeProjects="EuPathDB" doNotTest="true">
           <paramRef ref="geneParams.profileset_generic" quote="true" queryRef="GeneVQ.GenericProfiles"/>  
            <wsColumn name="internal" width="32" wsName="internal"/>
            <wsColumn name="term" width="32" wsName="term"/>
            <wsColumn name="display" width="32" wsName="display"/>
        </processQuery>

        <sqlQuery name="ChromosomeOrderNumSeq" includeProjects="TriTrypDB,MicrosporidiaDB,CryptoDB,PlasmoDB,ToxoDB,PiroplasmaDB" isCacheable="true" doNotTest="true">
            <paramRef ref="organismParams.organism" quote="true" queryRef="organismVQ.withStrainsChromosome"/>
            <column name="display"/>
            <column name="internal"/>
            <column name="term"/>
            <sql>
  SELECT * 
  FROM ((select chromosome as display, 
                apidb.tab_to_string(set(cast(collect(source_id) as apidb.varchartab)), ';') AS term,
                chromosome as internal, chromosome_order_num
         from (SELECT DISTINCT sa.chromosome, sa.source_id, sa.chromosome_order_num
               FROM ApidbTuning.SequenceAttributes sa
               where sa.organism in ($$organism$$)
               and sa.chromosome is not null
             union
             select 'Choose chromosome' as term,
                    'Choose chromosome' as internal,
                    -1 as chromosome_order_num
             from dual
              )
         group by chromosome, chromosome_order_num
        )
       )
  order by chromosome_order_num asc
            </sql>
        </sqlQuery>

        <processQuery name="ChromosomeOrderNumSeq"  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" includeProjects="EuPathDB">
          <paramRef ref="organismParams.organism" quote="false" queryRef="organismVQ.withChromosomes"/>
          <wsColumn name="display" width="50"/>
          <wsColumn name="internal" width="50"/>
          <wsColumn name="term" width="500"/>
        </processQuery>

        <sqlQuery name="EstLibraries" excludeProjects="HostDB,EuPathDB" isCacheable="true">
            <column name="internal"/>
            <column name="term"/>
            <column name="display"/>
            <column name="parentTerm"/>
            <sql>
SELECT term AS display, REPLACE(term, '''', '`') AS term, internal, parentTerm
FROM (
select distinct REGEXP_SUBSTR(ORGANISM,'[[:alpha:]]+[[:space:]]+[[:alpha:]]+') as term, 0 as internal, '' as parentTerm 
from ApidbTuning.EstAttributes
where PROJECT_ID = '@PROJECT_ID@'
union
select  distinct CASE WHEN att.stage != 'unknown' and att.DBEST_NAME not like '%'||att.stage||'%' 
            THEN  REPLACE(att.dbest_name, ',', ';') || ' (' || REPLACE(att.stage, ',', ';') || ')' ELSE REPLACE(att.dbest_name, ',', ';')  END AS term, 
att.library_id as internal, REGEXP_SUBSTR(att.ORGANISM,'[[:alpha:]]+[[:space:]]+[[:alpha:]]+') as parentTerm
from ApidbTuning.EstAttributes att
where att.PROJECT_ID = '@PROJECT_ID@'
)
            </sql>
        </sqlQuery>

  <processQuery name="EstLibraries" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" includeProjects="EuPathDB">
            <wsColumn name="internal" width="100" wsName="internal"/>
            <wsColumn name="term" width="100" wsName="term"/>
            <wsColumn name="parentTerm" width="100" wsName="parentTerm"/>
        </processQuery>


<!--
This query seems to be unused
 <sqlQuery name="EstLibrariesAssemblies" excludeProjects="EuPathDB" isCacheable="true">
            <column name="internal"/>
            <column name="term"/>
            <column name="parentTerm"/>
            <sql>
                SELECT distinct REPLACE(att.dbest_name, ',', ' - ') AS term,
                       l.library_id AS internal
                FROM ApidbTuning.EstAttributes att, dots.library l
                WHERE att.dbest_name = l.dbest_name
                AND att.project_id = '@PROJECT_ID@'
                ORDER BY term
            </sql>
        </sqlQuery>

  <processQuery name="EstLibrariesAssemblies" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" includeProjects="EuPathDB">
            <wsColumn name="internal" width="100" wsName="internal"/>
            <wsColumn name="term" width="100" wsName="term"/>
        </processQuery>
-->

        <sqlQuery name="strainByOntologyType" includeProjects="TriTrypDB,AmoebaDB,PlasmoDB,CryptoDB,ToxoDB,FungiDB" isCacheable="true">
            <paramRef ref="sharedParams.ontology_type" quote="true" queryRef="SharedVQ.htsSnpOntology"/>   
            <paramRef ref="organismParams.organism" quote="true" queryRef="organismVQ.withHtsSNPs"/> 
            <column name="display"/>
            <column name="term"/>
            <column name="internal"/>
            <column name="parentTerm"/>
             <sql>
SELECT display, 
       replace(term,',', ' ') as term,
       internal,
       replace(parentTerm,',', ' ') as parentTerm,
       order_num
FROM (
SELECT 
       NVL(iso.term,strains.strain) as display,
       NVL(iso.term,strains.strain) as term,
       strains.strain as internal,
       NVL(iso.parentTerm,'unknown') as parentTerm,
       order_num
FROM
(SELECT distinct ss.strain as display, 
        ss.strain as term,
        ss.strain as internal, 
        CASE WHEN oe.category='StrainOrLine' THEN ss.strain || '_p'
             ELSE oe.value 
             END as parentTerm,
        1 as order_num
FROM   apidb.datasource ds, 
       sres.externaldatabase ed, 
       SRES.externaldatabaserelease edr, 
       study.study s,
       rad.studybiomaterial sb, 
       STUDY.biomaterialcharacteristic bc, 
       study.ontologyentry oe, 
       study.biomaterial b,
       apidbtuning.isolateattributes ia,
       apidbtuning.snpstrains ss
WHERE  ds.type = 'isolates'
   and ds.subtype = 'HTS_SNP'
   and ds.name not like '%SNPSample%'
   and ed.name = ds.external_database_name
   and ed.external_database_id = edr.external_database_id
   and edr.external_database_release_id = s.external_database_release_id
   and s.study_id = sb.study_id
   and sb.bio_material_id = bc.bio_material_id
   and sb.bio_material_id = b.bio_material_id
   and bc.ontology_entry_id = oe.ontology_entry_id
   and oe.category = $$ontology_type$$
   and b.source_id = ia.source_id
   and ss.var_extdb_name = ia.external_db_name
   and ss.organism in ($$organism$$)
) iso,
(SELECT strain 
 FROM   apidbtuning.snpstrains 
 WHERE  organism in ($$organism$$) and 
        extdb_name = 'InsertSnps.pm NGS SNPs INTERNAL') strains
WHERE
  strains.strain = iso.internal(+)
UNION
SELECT distinct 
       CASE WHEN oe.category='StrainOrLine' THEN ss.strain  
            ELSE oe.value 
            END as display, 
       CASE WHEN oe.category='StrainOrLine' THEN ss.strain  
            ELSE oe.value 
            END as term,
       CASE WHEN oe.category='StrainOrLine' THEN ss.strain 
            ELSE '-1' 
            END as internal, 
       oe.category as parentTerm,
       CASE WHEN oe.category='Haplogroup' THEN 
            CASE WHEN oe.value = '6a' THEN 6
                 WHEN oe.value = '6b' THEN 6
                 WHEN oe.value = 'unknown' THEN 90 
            ELSE to_number(oe.value)
            END 
            ELSE 2 
        END as order_num 
FROM   apidb.datasource ds, 
       sres.externaldatabase ed, 
       SRES.externaldatabaserelease edr, 
       study.study s,
       rad.studybiomaterial sb, 
       STUDY.biomaterialcharacteristic bc, 
       study.ontologyentry oe, 
       study.biomaterial b,
       apidbtuning.isolateattributes ia,
       apidbtuning.snpstrains ss
WHERE  ds.type = 'isolates'
   and ds.subtype = 'HTS_SNP'
   and ds.name not like '%SNPSample%'
   and ed.name = ds.external_database_name
   and ed.external_database_id = edr.external_database_id
   and edr.external_database_release_id = s.external_database_release_id
   and s.study_id = sb.study_id
   and sb.bio_material_id = bc.bio_material_id
   and sb.bio_material_id = b.bio_material_id
   and bc.ontology_entry_id = oe.ontology_entry_id
   and oe.category = $$ontology_type$$
   and b.source_id = ia.source_id
   and ss.var_extdb_name = ia.external_db_name
   and ss.organism in ( $$organism$$ )
   --and ia.organism = $$organism$$
--UNION
--SELECT 'Unknown' as display, 
--       'unknown' as term,
--       '-1'      as internal, 
--       ''        as parentTerm,
--       90        as order_num 
--From dual
)
ORDER by order_num, term, parentTerm
            </sql>
        </sqlQuery>

        <processQuery name="strainByOntologyType" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" includeProjects="EuPathDB" doNotTest="true">
            <paramRef ref="sharedParams.ontology_type" quote="true" queryRef="SharedVQ.htsSnpOntology"/> 
            <paramRef ref="organismParams.organism" quote="true" queryRef="organismVQ.withHtsSNPs"/> 
            <wsColumn name="internal" width="100" wsName="internal"/>
            <wsColumn name="term" width="100" wsName="term"/>
            <wsColumn name="parentTerm" width="100" wsName="parentTerm"/>
        </processQuery> 






        <sqlQuery name="EstLibrariesGenes" excludeProjects="HostDB,EuPathDB" isCacheable="true">
            <column name="internal"/>
            <column name="term"/>
            <column name="parentTerm"/>
             <sql includeProjects="PlasmoDB,ToxoDB,CryptoDB,TriTrypDB,TrichDB,AmoebaDB,MicrosporidiaDB,PiroplasmaDB,FungiDB,HostDB,InitDB">
select distinct t.* from
(select distinct REGEXP_SUBSTR(ORGANISM,'[[:alpha:]]+[[:space:]]+[[:alpha:]]+') as term, 0 as internal, '' as parentTerm 
from ApidbTuning.EstAttributes
where PROJECT_ID = '@PROJECT_ID@'
union
select  distinct CASE WHEN att.stage != 'unknown' and att.DBEST_NAME not like '%'||att.stage||'%' 
            THEN  REPLACE(REPLACE(att.dbest_name, ',', ';'),'''','`') || ' (' || REPLACE(att.stage, ',', ';') || ')' ELSE REPLACE(REPLACE(att.dbest_name, ',', ';'),'''','`')  END AS term, 
att.library_id as internal, REGEXP_SUBSTR(att.ORGANISM,'[[:alpha:]]+[[:space:]]+[[:alpha:]]+') as parentTerm
from ApidbTuning.EstAttributes att
where att.PROJECT_ID = '@PROJECT_ID@') t, ApidbTuning.GeneAttributes ga
where t.parentTerm = ga.species
or t.term = ga.species
            </sql>
             <sql includeProjects="GiardiaDB">
select distinct t.* from
(select distinct REGEXP_SUBSTR(ORGANISM,'[[:alpha:]]+([[:space:]]+[[:alpha:]]+)+') as term, 0 as internal, '' as parentTerm 
from ApidbTuning.EstAttributes
where PROJECT_ID = '@PROJECT_ID@'
union
select  distinct CASE WHEN att.stage != 'unknown' and att.DBEST_NAME not like '%'||att.stage||'%' 
            THEN  REPLACE(REPLACE(att.dbest_name, ',', ';'),'''','`') || ' (' || REPLACE(att.stage, ',', ';') || ')' ELSE REPLACE(REPLACE(att.dbest_name, ',', ';'),'''','`')  END AS term, 
att.library_id as internal, REGEXP_SUBSTR(att.ORGANISM,'[[:alpha:]]+([[:space:]]+[[:alpha:]]+)+') as parentTerm
from ApidbTuning.EstAttributes att
where att.PROJECT_ID = '@PROJECT_ID@') t, ApidbTuning.GeneAttributes ga
where t.parentTerm = ga.species
or t.term = ga.species
            </sql>


        </sqlQuery>

        <processQuery name="EstLibrariesGenes" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" includeProjects="EuPathDB">
            <wsColumn name="internal" width="100" wsName="internal"/>
            <wsColumn name="term" width="100" wsName="term"/>
            <wsColumn name="parentTerm" width="100" wsName="parentTerm"/>
        </processQuery>


        <sqlQuery name="EstLibrariesWithAssemblies" excludeProjects="EuPathDB,CryptoDB,TrichDB,PiroplasmaDB,HostDB" isCacheable="true">
            <column name="internal"/>
            <column name="term"/>
            <column name="parentTerm"/>
             <sql includeProjects="ToxoDB,TriTrypDB,AmoebaDB,MicrosporidiaDB,FungiDB,HostDB,InitDB">
select distinct t.* from
(select distinct REGEXP_SUBSTR(ORGANISM,'[[:alpha:]]+[[:space:]]+[[:alpha:]]+') as term, 0 as internal, '' as parentTerm 
from ApidbTuning.EstAttributes
where PROJECT_ID = '@PROJECT_ID@'
union
select  distinct CASE WHEN att.stage != 'unknown' and att.DBEST_NAME not like '%'||att.stage||'%' 
            THEN  REPLACE(att.dbest_name, ',', ';') || ' (' || REPLACE(att.stage, ',', ';') || ')' ELSE REPLACE(att.dbest_name, ',', ';')  END AS term, 
att.library_id as internal, REGEXP_SUBSTR(att.ORGANISM,'[[:alpha:]]+[[:space:]]+[[:alpha:]]+') as parentTerm
from ApidbTuning.EstAttributes att
where att.PROJECT_ID = '@PROJECT_ID@') t, ApidbTuning.GeneAttributes ga
where t.parentTerm = ga.species
or t.term = ga.species
            </sql>
             <sql includeProjects="PlasmoDB">
select distinct t.* from
(select distinct REGEXP_SUBSTR(ORGANISM,'[[:alpha:]]+[[:space:]]+[[:alpha:]]+') as term, 0 as internal, '' as parentTerm 
from ApidbTuning.EstAttributes
where PROJECT_ID = '@PROJECT_ID@'
union
select  distinct CASE WHEN att.stage != 'unknown' and att.DBEST_NAME not like '%'||att.stage||'%' 
            THEN  REPLACE(att.dbest_name, ',', ';') || ' (' || REPLACE(att.stage, ',', ';') || ')' ELSE REPLACE(att.dbest_name, ',', ';')  END AS term, 
att.library_id as internal, REGEXP_SUBSTR(att.ORGANISM,'[[:alpha:]]+[[:space:]]+[[:alpha:]]+') as parentTerm
from ApidbTuning.EstAttributes att
where att.PROJECT_ID = '@PROJECT_ID@' and not att.dbest_name like 'VAR%'
) t, ApidbTuning.GeneAttributes ga
where t.parentTerm = ga.species or t.term = ga.species
UNION
select 'VARxxxxx' as term, 0 as internal, 'Plasmodium falciparum' as parentTerm from dual
union
select distinct att.dbest_name as term, att.library_id as internal,  'VARxxxxx'  as parentTerm
from ApidbTuning.EstAttributes att
where att.dbest_name like 'VAR%'
            </sql>
             <sql includeProjects="GiardiaDB">
select distinct t.* from
(select distinct REGEXP_SUBSTR(ORGANISM,'[[:alpha:]]+([[:space:]]+[[:alpha:]]+)+') as term, 0 as internal, '' as parentTerm 
from ApidbTuning.EstAttributes
where PROJECT_ID = '@PROJECT_ID@'
union
select  distinct CASE WHEN att.stage != 'unknown' and att.DBEST_NAME not like '%'||att.stage||'%' 
            THEN  REPLACE(att.dbest_name, ',', ';') || ' (' || REPLACE(att.stage, ',', ';') || ')' ELSE REPLACE(att.dbest_name, ',', ';')  END AS term, 
att.library_id as internal, REGEXP_SUBSTR(att.ORGANISM,'[[:alpha:]]+([[:space:]]+[[:alpha:]]+)+') as parentTerm
from ApidbTuning.EstAttributes att
where att.PROJECT_ID = '@PROJECT_ID@') t, ApidbTuning.GeneAttributes ga
where t.parentTerm = ga.species || ' isolate WB'
or t.term = ga.species || ' isolate WB'
            </sql>


        </sqlQuery>

        <processQuery name="EstLibrariesWithAssemblies" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" includeProjects="EuPathDB">
            <wsColumn name="internal" width="100" wsName="internal"/>
            <wsColumn name="term" width="100" wsName="term"/>
            <wsColumn name="parentTerm" width="100" wsName="parentTerm"/>
        </processQuery>


        <sqlQuery name="QuestionPopularity" isCacheable="true" doNotTest="true">
            <column name="internal"/>
            <column name="term"/>
            <column name="display"/>
             <sql>
SELECT term, display, rownum AS internal FROM (
SELECT a.question_name AS term, count(s.step_id) AS display
FROM @WDK_ENGINE_SCHEMA@answers@USER_DBLINK@ a, @USER_SCHEMA@steps@USER_DBLINK@ s
WHERE a.answer_id = s.step_id
GROUP BY a.question_name
)
            </sql>
        </sqlQuery>

  </querySet>

    
    <groupSet name="paramGroups">
        
        <group name="advancedParams" displayName="Advanced Parameters" displayType="ShowHide">
            <description>
                <![CDATA[
                ]]>
            </description>
        </group>
        <group name="dynamicParams" displayName="Dynamic Parameters Group" displayType="dynamic">
            <description>
                <![CDATA[
                ]]>
            </description>
        </group>
    </groupSet>

</wdkModel>
