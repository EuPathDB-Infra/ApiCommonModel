<wdkModel>

  <querySet name="SnpChipsBy" queryType="id" isCacheable="false" includeProjects="PlasmoDB,EuPathDB">

    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- SNP ID -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
      <sqlQuery name="SnpBySourceId" doNotTest="true" includeProjects="PlasmoDB"  isCacheable="true">
          <paramRef ref="snpChipParams.snp_id"/>
    <column name="source_id"/>
    <column name="project_id"/>
        <sql>
      <![CDATA[

        SELECT distinct sf.source_id AS source_id, '@PROJECT_ID@' as project_id
        FROM dots.SnpFeature sf, ($$snp_id$$) ds, sres.externalDatabase ed, sres.externalDatabaseRelease edr
        WHERE sf.source_id  like (ds.source_id || '%')
          AND sf.external_database_release_id = edr.external_database_release_id
          AND edr.external_database_id = ed.external_database_id
          AND lower(ed.name) like '%snpchip%'
          
      ]]>
        </sql>
      </sqlQuery>

     <processQuery name="SnpBySourceId" includeProjects="EuPathDB" 
              doNotTest="true" 
              processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
          <paramRef ref="snpChipParams.snp_id" noTranslation="true" />
          <paramRef ref="sharedParams.wdk_user_signature" noTranslation="true"/>
    <wsColumn name="source_id" width="50" wsName="source_id"/>
          <wsColumn name="project_id" width="32" wsName="project_id"/>
      </processQuery>


    <!-- ===================================================================== -->
    <!-- ===================================================================== -->
    <!-- ====== QUERIES BELOW HERE MIGHT NEED RETIRING.  PLEASE REVIEW ======= -->
    <!-- ===================================================================== -->
    <!-- ===================================================================== -->


    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Gene ID -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
      <sqlQuery name="SnpsByGeneId" doNotTest="true" includeProjects="PlasmoDB"
             isCacheable="true">

        <paramRef ref="sharedParams.ds_gene_ids"/> 
        <paramRef ref="organismParams.organism"  displayType="listBox" 
              multiPick="false" quote="true" queryRef="organismVQ.withSNPs">
              <help>Select Organism you wish to query against</help>
        </paramRef>
        <paramRef ref="snpChipParams.snp_assay_type"/>
        <paramRef ref="sharedParams.snpchip_strain_meta"/>
          <paramRef ref="snpChipParams.set_percent"/>
          <column name="source_id"/>
          <column name="project_id"/>
          <column name="gene"/>
         <column name="snp_location"/>
          <column name="prot_pos"/>
          <column name="major_strains_chosen"/>
          <column name="minor_strains_chosen"/>
          <column name="major_allele_chosen"/>
          <column name="major_allele_freq_chosen"/>
          <column name="minor_alleles_chosen"/>
          <column name="minor_allele_freq_chosen"/>
          <column name="major_product_chosen"/>
          <column name="minor_products_chosen"/>

        <sql>
            <![CDATA[
with variants as (
                 SELECT var.parent_id,
                    count(var.na_feature_id) as allele_count,
                    var.allele,
                    var.product,
                    apidb.tab_to_string(set(cast(COLLECT(distinct var.strain) AS apidb.varchartab)), ', ') as strains,
                    count(var.strain) as strain_count
             FROM   dots.SeqVariation var
             WHERE  var.organism = $$organism$$
                AND var.strain in ($$snpchip_strain_meta$$)
                and name in ($$snp_assay_type$$)
             GROUP BY parent_id,allele,product
            
             order by parent_id,allele
      ),
alleles as (
select           one.parent_id,
                 one.allele allele_one,
                 one.allele_count,
                 two.allele as allele_two,
                 1 as allele_count_equal
          from variants one,variants two
               where one.parent_id = two.parent_id
                 and one.allele_count = two.allele_count
                 and one.allele != two.allele
          Union
          select one.parent_id,
                 one.allele allele_one,
                 one.allele_count,
                 two.allele as allele_two,
                 0 as allele_count_equal
          from variants one,variants two
               where one.parent_id = two.parent_id
                 and one.allele_count > two.allele_count
          order by parent_id
          ),
ranked_alleles as (
      select parent_id,
             allele_one as major_allele,
             allele_two as minor_allele 
        from alleles
       where  parent_id in (select parent_id 
                              from alleles
                            group by parent_id
                            having count(parent_id) =1)
         and allele_count_equal  = 0
      union
      select major.parent_id,
             major.allele_one as major_allele,
             minor.allele_one as minor_allele 
             
        from alleles major, alleles minor
       where  major.parent_id = minor.parent_id
         and major.allele_count > minor.allele_count
         and major.allele_count_equal  = 0
      union
      select major.parent_id,
             major.allele_one as major_allele,
             minor.allele_one as minor_allele 
             
        from alleles major, alleles minor, APIDBTUNING.SNPCHIPATTRIBUTES snp
       where  major.parent_id = minor.parent_id
         and major.allele_count_equal  = 1
         and major.allele_one = minor.allele_two
         and major.allele_two = minor.allele_one
         and snp.na_feature_id = major.parent_id
         and major.allele_one = snp.major_allele
)
select strains.* from (
  select  snp.source_id, 
       '@PROJECT_ID@' as project_id, 
       snp.gene_source_id as gene, 
       snp.start_min as snp_location,
       snp.position_in_protein as prot_pos, 
         ra.major_allele as major_allele_chosen,
         minor.alleles as minor_alleles_chosen,
         round(100*(major.allele_count/total.allele_count),2) as major_allele_freq_chosen,
         round(100*(minor.allele_count/total.allele_count),2) as minor_allele_freq_chosen,
         major.product as major_product_chosen,
         minor.products as minor_products_chosen,
         major.strains as major_strains_chosen,
         minor.strains as minor_strains_chosen,
         gene_source_id
         from ranked_alleles ra, apidbtuning.SnpChipAttributes snp,
              (select distinct var.* 
                 from variants var,ranked_alleles ra 
                where var.parent_id = ra.parent_id
                  and var.allele = ra.major_allele) major,
              (select var.parent_id, sum (allele_count) as allele_count,
                      listagg(var.strains,',') within group (order by var.strains) as strains, 
                      listagg( ra.minor_allele,',') within group (order by strain_count) as alleles,
                      listagg( var.product,',') within group (order by strain_count) as products 
                 from variants var,ranked_alleles ra 
                where var.parent_id = ra.parent_id
                  and var.allele != ra.major_allele
                  group by var.parent_id) minor,
              (select var.parent_id, sum(allele_count) as allele_count
                 from variants var,ranked_alleles ra 
                where var.parent_id = ra.parent_id
                group by var.parent_id) total
           where ra.parent_id = major.parent_id
           and   ra.parent_id = minor.parent_id
           and   ra.parent_id = total.parent_id
           and snp.na_feature_id = ra.parent_id
          AND snp.type in ($$snp_assay_type$$)
) strains, ($$ds_gene_ids$$) ds
where major_allele_freq_chosen > $$set_percent$$
  AND (gene_source_id in ( ds.source_id )) 


           ]]>
        </sql>

    </sqlQuery>

    <processQuery name="SnpsByGeneId" includeProjects="EuPathDB" doNotTest="true" 
             processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">

        <paramRef ref="sharedParams.ds_gene_ids" default="cgd3_510" noTranslation="true"/>
        <paramRef ref="organismParams.organism" displayType="listBox" multiPick="false" 
                  noTranslation="true"  queryRef="organismVQ.withSNPs">
              <help>Select Organism you wish to query against</help>
        </paramRef>
        <paramRef ref="snpChipParams.snp_assay_type"/>
        <paramRef ref="sharedParams.snpchip_strain_meta"  quote="true"/>
        <paramRef ref="sharedParams.wdk_user_signature" noTranslation="true"/>
        <wsColumn name="source_id"  width="50" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
        <wsColumn name="snp_location" width="32"/>
        <wsColumn name="ref_strain" width="32"/>
        <wsColumn name="comp_strains" width="32"/>
        <wsColumn name="ref_allele" width="32"/>
        <wsColumn name="comp_alleles" width="32"/>
        <wsColumn name="phenotype" width="32"/>
        <wsColumn name="prot_pos" width="32"/>
        <wsColumn name="ref_product" width="32"/>
        <wsColumn name="comp_products" width="32"/> 
    </processQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Location -->
    <!-- 
         This query contains two nested inline views.  The 
         inner, named "hits", identifies SNPs within the given 
         genomic region for which the reference strain has a 
         different allele from at least one of the others.  The 
         outer inline view, "snpq", has one row for each SNP for 
         each strain (e.g. (100 SNPs) x (1 reference + 3 other 
         strains) = 400 records).  At the top level, the query 
         itself then groups all rows of a SNP into a single row 
         (which, for the above example, would mean grouping four 
         rows into one).
         
         It seems necessary to have these three levels in the 
         query's structure, but it might be possible to optimize 
         within each level.  For instance, the innermost query must 
         join dots.SnpFeature to dots.NaLocation.  A big 
         materialized view could precompute this join. -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
    <sqlQuery name="SnpsByLocation" includeProjects="PlasmoDB" isCacheable="true">
 
       <testParamValues includeProjects="PlasmoDB">
            <paramValue name="snp_strain_a">Pf-3D7</paramValue>
            <paramValue name="chromosomeOptional">1</paramValue>
        </testParamValues>

        <paramRef ref="organismParams.organism" displayType="listBox" multiPick="false" 
                  quote="true" queryRef="organismVQ.withChromosomesSNPs">
              <help>Select Organism you wish to query against.</help>
        </paramRef>

         <paramRef ref="sharedParams.chromosomeOptional" queryRef="SharedVQ.ChromosomeOrderNumMultipickForSnps" multiPick="false"/>
          <paramRef ref="sharedParams.sequenceId"/>
          <paramRef ref="sharedParams.start_point"/>
          <paramRef ref="sharedParams.end_point"/>
          <paramRef ref="snpChipParams.snp_assay_type"/>
          <paramRef ref="sharedParams.snpchip_strain_meta"/>
          <paramRef ref="snpChipParams.set_percent"/>
          <column name="source_id"/>
          <column name="project_id"/>
          <column name="gene"/>
         <column name="snp_location"/>
          <column name="prot_pos"/>
          <column name="major_strains_chosen"/>
          <column name="minor_strains_chosen"/>
          <column name="major_allele_chosen"/>
          <column name="major_allele_freq_chosen"/>
          <column name="minor_alleles_chosen"/>
          <column name="minor_allele_freq_chosen"/>
          <column name="major_product_chosen"/>
          <column name="minor_products_chosen"/>

 

        <sql>
            <![CDATA[
with variants as (
                 SELECT var.parent_id,
                    count(var.na_feature_id) as allele_count,
                    var.allele,
                    var.product,
                    apidb.tab_to_string(set(cast(COLLECT(distinct var.strain) AS apidb.varchartab)), ', ') as strains,
                    count(var.strain) as strain_count
             FROM   dots.SeqVariation var
             WHERE  var.organism = $$organism$$
                AND var.strain in ($$snpchip_strain_meta$$)
                and name in ($$snp_assay_type$$)
             GROUP BY parent_id,allele,product
            
             order by parent_id,allele
      ),
alleles as (
select           one.parent_id,
                 one.allele allele_one,
                 one.allele_count,
                 two.allele as allele_two,
                 1 as allele_count_equal
          from variants one,variants two
               where one.parent_id = two.parent_id
                 and one.allele_count = two.allele_count
                 and one.allele != two.allele
          Union
          select one.parent_id,
                 one.allele allele_one,
                 one.allele_count,
                 two.allele as allele_two,
                 0 as allele_count_equal
          from variants one,variants two
               where one.parent_id = two.parent_id
                 and one.allele_count > two.allele_count
          order by parent_id
          ),
ranked_alleles as (
      select parent_id,
             allele_one as major_allele,
             allele_two as minor_allele 
        from alleles
       where  parent_id in (select parent_id 
                              from alleles
                            group by parent_id
                            having count(parent_id) =1)
         and allele_count_equal  = 0
      union
      select major.parent_id,
             major.allele_one as major_allele,
             minor.allele_one as minor_allele 
             
        from alleles major, alleles minor
       where  major.parent_id = minor.parent_id
         and major.allele_count > minor.allele_count
         and major.allele_count_equal  = 0
      union
      select major.parent_id,
             major.allele_one as major_allele,
             minor.allele_one as minor_allele 
             
        from alleles major, alleles minor, APIDBTUNING.SNPCHIPATTRIBUTES snp
       where  major.parent_id = minor.parent_id
         and major.allele_count_equal  = 1
         and major.allele_one = minor.allele_two
         and major.allele_two = minor.allele_one
         and snp.na_feature_id = major.parent_id
         and major.allele_one = snp.major_allele
)
select * from (
  select  snp.source_id, 
       '@PROJECT_ID@' as project_id, 
       snp.gene_source_id as gene, 
       snp.start_min as snp_location,
       snp.position_in_protein as prot_pos, 
         ra.major_allele as major_allele_chosen,
         minor.alleles as minor_alleles_chosen,
         round(100*(major.allele_count/total.allele_count),2) as major_allele_freq_chosen,
         round(100*(minor.allele_count/total.allele_count),2) as minor_allele_freq_chosen,
         major.product as major_product_chosen,
         minor.products as minor_products_chosen,
         major.strains as major_strains_chosen,
         minor.strains as minor_strains_chosen,
         chromosome,
         seq_source_id
         from ranked_alleles ra, apidbtuning.SnpChipAttributes snp,
              (select distinct var.* 
                 from variants var,ranked_alleles ra 
                where var.parent_id = ra.parent_id
                  and var.allele = ra.major_allele) major,
              (select var.parent_id, sum (allele_count) as allele_count,
                      listagg(var.strains,',') within group (order by var.strains) as strains, 
                      listagg( ra.minor_allele,',') within group (order by strain_count) as alleles,
                      listagg( var.product,',') within group (order by strain_count) as products 
                 from variants var,ranked_alleles ra 
                where var.parent_id = ra.parent_id
                  and var.allele != ra.major_allele
                  group by var.parent_id) minor,
              (select var.parent_id, sum(allele_count) as allele_count
                 from variants var,ranked_alleles ra 
                where var.parent_id = ra.parent_id
                group by var.parent_id) total
           where ra.parent_id = major.parent_id
           and   ra.parent_id = minor.parent_id
           and   ra.parent_id = total.parent_id
           and snp.na_feature_id = ra.parent_id
          AND snp.type in ($$snp_assay_type$$)
)
where major_allele_freq_chosen > $$set_percent$$
  AND (chromosome in ( $$chromosomeOptional$$ ) OR lower(seq_source_id) = lower($$sequenceId$$) ) 
           ]]>
        </sql>
    </sqlQuery>

    <processQuery name="SnpsByLocation" includeProjects="EuPathDB" doNotTest="true"
             processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" >

        <testParamValues>
            <paramValue name="snpchip_strain_meta">md</paramValue>
            <paramValue name="chromosomeOptional">2</paramValue>
            <paramValue name="organism">Cryptosporidium parvum Iowa II</paramValue>
        </testParamValues>

          <paramRef ref="organismParams.organism" queryRef="organismVQ.withChromosomesSNPs"  multiPick="false"  noTranslation="true">
              <help>Select Organism you wish to query against.</help>
          </paramRef>
          <paramRef ref="sharedParams.chromosomeOptional" quote="false" queryRef="SharedVQ.ChromosomeOrderNumMultipickForSnps" 
        multiPick="false" noTranslation="true" />
          <paramRef ref="sharedParams.start_point"/>
          <paramRef ref="sharedParams.end_point"/>        
          <paramRef ref="snpChipParams.snp_assay_type"/>
          <paramRef ref="sharedParams.snpchip_strain_meta" quote="true"/>
          <wsColumn name="source_id" width="50" wsName="source_id"/>
          <wsColumn name="project_id" width="32" wsName="project_id"/>
          <wsColumn name="gene" width="32"/>
          <wsColumn name="snp_location" width="32"/>
          <wsColumn name="ref_strain" width="32"/>
          <wsColumn name="comp_strains" width="32"/>
          <wsColumn name="ref_allele" width="32"/>
          <wsColumn name="comp_alleles" width="32"/>
          <wsColumn name="phenotype" width="32"/>
          <wsColumn name="prot_pos" width="32"/>
          <wsColumn name="ref_product" width="32"/>
          <wsColumn name="comp_products" width="32"/>
      </processQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->

    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- by strain                                      -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
    <sqlQuery name="SnpsByStrain" includeProjects="PlasmoDB" isCacheable="true">
 
        <paramRef ref="organismParams.organism" displayType="listBox" multiPick="false" 
                  quote="true" queryRef="organismVQ.withChromosomesSNPs">
              <help>Select Organism you wish to query against.</help>
        </paramRef>
          <paramRef ref="snpChipParams.snp_assay_type"/>
          <paramRef ref="sharedParams.snpchip_strain_meta"/>
          <paramRef ref="snpChipParams.set_percent"/>
          <column name="source_id"/>
          <column name="project_id"/>
          <column name="gene"/>
          <column name="prot_pos"/>
          <column name="snp_location"/>
          <column name="major_strains_chosen"/>
          <column name="minor_strains_chosen"/>
          <column name="major_allele_chosen"/>
          <column name="major_allele_freq_chosen"/>
          <column name="minor_alleles_chosen"/>
          <column name="minor_allele_freq_chosen"/>
          <column name="major_product_chosen"/>
          <column name="minor_products_chosen"/>

        <sql>
            <![CDATA[
with variants as (
                 SELECT var.parent_id,
                    count(var.na_feature_id) as allele_count,
                    var.allele,
                    var.product,
                    apidb.tab_to_string(set(cast(COLLECT(distinct var.strain) AS apidb.varchartab)), ', ') as strains,
                    count(var.strain) as strain_count
             FROM   dots.SeqVariation var
             WHERE  var.organism = $$organism$$
                AND var.strain in ($$snpchip_strain_meta$$)
                and name in ($$snp_assay_type$$)
             GROUP BY parent_id,allele,product
            
             order by parent_id,allele
      ),
alleles as (
select           one.parent_id,
                 one.allele allele_one,
                 one.allele_count,
                 two.allele as allele_two,
                 1 as allele_count_equal
          from variants one,variants two
               where one.parent_id = two.parent_id
                 and one.allele_count = two.allele_count
                 and one.allele != two.allele
          Union
          select one.parent_id,
                 one.allele allele_one,
                 one.allele_count,
                 two.allele as allele_two,
                 0 as allele_count_equal
          from variants one,variants two
               where one.parent_id = two.parent_id
                 and one.allele_count > two.allele_count
          order by parent_id
          ),
ranked_alleles as (
      select parent_id,
             allele_one as major_allele,
             allele_two as minor_allele 
        from alleles
       where  parent_id in (select parent_id 
                              from alleles
                            group by parent_id
                            having count(parent_id) =1)
         and allele_count_equal  = 0
      union
      select major.parent_id,
             major.allele_one as major_allele,
             minor.allele_one as minor_allele 
             
        from alleles major, alleles minor
       where  major.parent_id = minor.parent_id
         and major.allele_count > minor.allele_count
         and major.allele_count_equal  = 0
      union
      select major.parent_id,
             major.allele_one as major_allele,
             minor.allele_one as minor_allele 
             
        from alleles major, alleles minor, APIDBTUNING.SNPCHIPATTRIBUTES snp
       where  major.parent_id = minor.parent_id
         and major.allele_count_equal  = 1
         and major.allele_one = minor.allele_two
         and major.allele_two = minor.allele_one
         and snp.na_feature_id = major.parent_id
         and major.allele_one = snp.major_allele
)
select * from (
  select  snp.source_id, 
       '@PROJECT_ID@' as project_id, 
       snp.gene_source_id as gene, 
       snp.start_min as snp_location,
       snp.position_in_protein as prot_pos, 
         ra.major_allele as major_allele_chosen,
         minor.alleles as minor_alleles_chosen,
         round(100*(major.allele_count/total.allele_count),2) as major_allele_freq_chosen,
         round(100*(minor.allele_count/total.allele_count),2) as minor_allele_freq_chosen,
         major.product as major_product_chosen,
         minor.products as minor_products_chosen,
         major.strains as major_strains_chosen,
         minor.strains as minor_strains_chosen
         from ranked_alleles ra, apidbtuning.SnpChipAttributes snp,
              (select distinct var.* 
                 from variants var,ranked_alleles ra 
                where var.parent_id = ra.parent_id
                  and var.allele = ra.major_allele) major,
              (select var.parent_id, sum (allele_count) as allele_count,
                      listagg(var.strains,',') within group (order by var.strains) as strains, 
                      listagg( ra.minor_allele,',') within group (order by strain_count) as alleles,
                      listagg( var.product,',') within group (order by strain_count) as products 
                 from variants var,ranked_alleles ra 
                where var.parent_id = ra.parent_id
                  and var.allele != ra.major_allele
                  group by var.parent_id) minor,
              (select var.parent_id, sum(allele_count) as allele_count
                 from variants var,ranked_alleles ra 
                where var.parent_id = ra.parent_id
                group by var.parent_id) total
           where ra.parent_id = major.parent_id
           and   ra.parent_id = minor.parent_id
           and   ra.parent_id = total.parent_id
           and snp.na_feature_id = ra.parent_id
          AND snp.type in ($$snp_assay_type$$)
)
where major_allele_freq_chosen > $$set_percent$$
           ]]>
       </sql>
    </sqlQuery>

    <processQuery name="SnpsByStrain" includeProjects="EuPathDB" doNotTest="true"
             processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" >

          <paramRef ref="organismParams.organism" queryRef="organismVQ.withChromosomesSNPs"  multiPick="false"  noTranslation="true">
              <help>Select Organism you wish to query against.</help>
          </paramRef>
          <paramRef ref="snpChipParams.snp_assay_type"/>
          <paramRef ref="sharedParams.snpchip_strain_meta" quote="true"/>
          <wsColumn name="source_id" width="50" wsName="source_id"/>
          <wsColumn name="project_id" width="32" wsName="project_id"/>
          <wsColumn name="gene" width="32"/>
          <wsColumn name="snp_location" width="32"/>
          <wsColumn name="ref_strain" width="32"/>
          <wsColumn name="comp_strains" width="32"/>
          <wsColumn name="ref_allele" width="32"/>
          <wsColumn name="comp_alleles" width="32"/>
          <wsColumn name="phenotype" width="32"/>
          <wsColumn name="prot_pos" width="32"/>
          <wsColumn name="ref_product" width="32"/>
          <wsColumn name="comp_products" width="32"/>
      </processQuery>



    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Isolate Pattern -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="SnpsByIsolatePattern" doNotTest="true" includeProjects="PlasmoDB" 
          isCacheable="true">
        <!-- <paramRef ref="snpChipParams.isolate_set_a"/> -->
        <paramRef ref="organismParams.organism" prompt="Organism" displayType="listBox" multiPick="false" quote="true" queryRef="organismVQ.withSNPs">
          <help>Select the organism you wish to search.  Note: this is the genome to which the isolate resequencing reads were aligned.</help>
        </paramRef>
        <paramRef ref="snpChipParams.snp_assay_type"/>
        <paramRef ref="sharedParams.snpchip_strain_meta_a" prompt="Set A Isolates" quote="true" />
        <paramRef ref="snpChipParams.set_a_percent"/>
        <!-- <paramRef ref="snpChipParams.isolate_set_b"/> -->
        <paramRef ref="sharedParams.snpchip_strain_meta_b" prompt="Set B Isolates" quote="true" />
        <paramRef ref="snpChipParams.set_b_percent"/>
        <column name="source_id"/> 
        <column name="project_id"/>
        <column name="set_a_allele"/>
        <column name="set_b_allele"/>
        <column name="set_a_major_percent"/>
        <column name="set_b_major_percent"/>
        <sql>
            <![CDATA[
select distinct seta.source_id,'@PROJECT_ID@' as project_id,
       seta.allele as set_a_allele,setb.allele as set_b_allele,
       round(seta.total/(select count(*) FROM table(SYS.DBMS_DEBUG_VC2COLL($$snpchip_strain_meta_a$$))) * 100) as set_a_major_percent,
       round(setb.total/(select count(*) FROM table(SYS.DBMS_DEBUG_VC2COLL($$snpchip_strain_meta_b$$))) * 100) as set_b_major_percent
FROM
(
SELECT snp.source_id, var.allele, count(*) as total
FROM   apidbtuning.snpchipattributes snp,
       dots.seqvariation var
WHERE snp.na_feature_id = var.parent_id
  and var.allele is not null
  and snp.type in ($$snp_assay_type$$)
  and var.strain in ($$snpchip_strain_meta_a$$)
--	and snp.major_allele_frequency >= $$set_a_percent$$ /100
  group by snp.source_id, var.allele
  having count(*) >= (select count(*) FROM table(SYS.DBMS_DEBUG_VC2COLL($$snpchip_strain_meta_a$$))) * $$set_a_percent$$ / 100
) seta,
(
SELECT snp.source_id, var.allele, count(*) as total
FROM   apidbtuning.snpchipattributes snp,
       dots.seqvariation var
WHERE snp.na_feature_id = var.parent_id
  and var.allele is not null
  and snp.type in ($$snp_assay_type$$)
  and var.strain in ($$snpchip_strain_meta_b$$)
--	and snp.major_allele_frequency >=  $$set_b_percent$$ /100
  group by snp.source_id, var.allele
  having count(*) >= (select count(*) FROM table(SYS.DBMS_DEBUG_VC2COLL($$snpchip_strain_meta_b$$))) * $$set_b_percent$$ / 100
) setb
where seta.source_id = setb.source_id
 and seta.allele != setb.allele 
           ]]>
       </sql>
    </sqlQuery>

    <processQuery name="SnpsByIsolatePattern" includeProjects="EuPathDB" doNotTest="true"
             processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="sharedParams.wdk_user_signature" noTranslation="true"/>
        <paramRef ref="snpChipParams.isolate_set_a"/>
        <paramRef ref="snpChipParams.set_a_percent"/>
        <paramRef ref="snpChipParams.isolate_set_b"/>
        <paramRef ref="snpChipParams.set_b_percent"/>
   
        <wsColumn name="source_id" width="32" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
        <wsColumn name="set_a_allele"/>
        <wsColumn name="set_b_allele"/>
        <wsColumn name="set_a_count"/>
        <wsColumn name="set_b_count"/>
    </processQuery>

  <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Isolate Pattern by history id -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="SnpsByIsolatePatternHistory" includeProjects="PlasmoDB" 
          isCacheable="true">
        <paramRef ref="sharedParams.isolateHistoryIdA"/>
        <paramRef ref="snpChipParams.set_a_count"/>
        <paramRef ref="sharedParams.isolateHistoryIdB"/>
        <paramRef ref="snpChipParams.set_b_count"/>
        <column name="source_id"/> 
        <column name="project_id"/>
        <column name="set_a_allele"/>
        <column name="set_b_allele"/>
        <column name="wdk_weight"/>
        <sql>
            <![CDATA[
              select seta.snp_source_id as source_id,'@PROJECT_ID@' as project_id,
              seta.allele as set_a_allele,setb.allele as set_b_allele,
              0 AS wdk_weight
              from (select isnp.snp_source_id,isnp.allele
              from ApidbTuning.IsolateSNPs isnp
              where isnp.is_source_id in (select distinct source_id from $$isolateHistoryIdA$$)
              and isnp.allele is not null
              and isnp.snp_db_name = 'pfal3D7_SNP_combined_Su_Broad_Sanger_gff_RSRC'
              group by isnp.snp_source_id,isnp.allele
              having count(*) >= $$set_a_count$$) seta,
              (select isnp.snp_source_id,isnp.allele
              from ApidbTuning.IsolateSNPs isnp
              where isnp.is_source_id in (select distinct source_id from $$isolateHistoryIdB$$)
              and isnp.allele is not null
              and isnp.snp_db_name = 'pfal3D7_SNP_combined_Su_Broad_Sanger_gff_RSRC'
              group by isnp.snp_source_id,isnp.allele
              having count(*) >= $$set_b_count$$) setb
              where seta.snp_source_id = setb.snp_source_id
              and seta.allele != setb.allele
           ]]>
       </sql>
    </sqlQuery>

    <processQuery name="SnpsByIsolatePatternHistory" includeProjects="EuPathDB"
             processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="sharedParams.isolateHistoryIdA"/>
        <paramRef ref="snpChipParams.set_a_count"/>
        <paramRef ref="sharedParams.isolateHistoryIdB"/>
        <paramRef ref="snpChipParams.set_b_count"/>
        <wsColumn name="source_id" width="32" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
        <wsColumn name="set_a_allele"/>
        <wsColumn name="set_b_allele"/>
        <wsColumn name="wdk_weight" columnType="number" width="12"/>
    </processQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Isolate assay type -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
<!--
    <sqlQuery name="SnpsByIsolateType" includeProjects="PlasmoDB" 
          isCacheable="true">
        <paramRef ref="snpChipParams.snp_assay_type"/>
        <column name="source_id"/> 
        <column name="project_id"/>
        <sql>
            <![CDATA[
              select distinct snp.source_id, '@PROJECT_ID@' as project_id
              from ApidbTuning.SnpChipAttributes snp
              where snp.type in ($$snp_assay_type$$)
           ]]>
       </sql>
    </sqlQuery>

    <processQuery name="SnpsByIsolateType" includeProjects="EuPathDB"
             processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="snpChipParams.snp_assay_type" quote="false" />
        <wsColumn name="source_id" width="32" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
    </processQuery>
-->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Isolate source id -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="SnpsByIsolateId" includeProjects="PlasmoDB" 
          isCacheable="true">
         <testParamValues includeProjects="PlasmoDB">
            <paramValue name="isolate_id">CPHD.273727</paramValue>
         </testParamValues>
        <paramRef ref="snpChipParams.isolate_id"/>
        <column name="source_id"/> 
        <column name="project_id"/>
        <column name="isolate_allele"/>
        <column name="is_source_id"/>
        <sql>
            <![CDATA[
              select isnp.snp_source_id as source_id, $$isolate_id$$ as is_source_id, 
                     isnp.allele as isolate_allele, '@PROJECT_ID@' as project_id
              from ApidbTuning.IsolateSNPs isnp, ApidbTuning.SnpAttributes sa
              where isnp.is_source_id = $$isolate_id$$
              and isnp.allele is not null
              and isnp.snp_db_name = 'pfal3D7_SNP_combined_Su_Broad_Sanger_gff_RSRC'
              and isnp.snp_source_id = sa.source_id
           ]]>
       </sql>
    </sqlQuery>


    <sqlQuery name="ByWeightFilter" isCacheable="true" doNotTest="true">
        <paramRef ref="snpChipParams.snp_result"/>
        <paramRef ref="sharedParams.min_weight" default="0"/>
        <paramRef ref="sharedParams.max_weight" default="100"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="wdk_weight" />
        <sql>
            <![CDATA[
            SELECT a.source_id, a.project_id, a.wdk_weight
            FROM $$snp_result$$ a
            WHERE a.wdk_weight >= $$min_weight$$
              AND a.wdk_weight <= $$max_weight$$
            ]]>
       </sql>
    </sqlQuery>




  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- Dont Care - fake query for internal use -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="DontCare" doNotTest="true" isCacheable="true">
        <column name="project_id"/>
        <column name="source_id"/>
        <sql>
            select source_id, project_id
            from ApidbTuning.snpattributes
            where source_id = 'life_is_sweet' 
        </sql>
    </sqlQuery>
    
  </querySet>

</wdkModel>
