<wdkModel>

  <querySet name="GeneId" queryType="id" isCacheable="true">

    <postCacheUpdateSql>
       <sql>
          <![CDATA[
             insert into ##WDK_CACHE_TABLE## -- per-queryset version
                         (wdk_instance_id, wdk_row_id, wdk_weight, source_id, gene_source_id, project_id, matched_result)
             with matches
                  as (select *
                      from ##WDK_CACHE_TABLE##
                      where wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##),
                  row_offset
                  as (select max(wdk_row_id) as the_max from matches),
                  mismatches
                  as (  select source_id, gene_source_id
                        from apidbTuning.transcriptAttributes
                        where gene_source_id in (select gene_source_id from matches)
                      minus
                        select source_id, gene_source_id
                        from matches)
             select ##WDK_CACHE_INSTANCE_ID##,
                    rownum + the_max, 0, source_id, gene_source_id,  '@PROJECT_ID@', 'N'
             from row_offset, mismatches
          ]]>
       </sql>
    </postCacheUpdateSql>

  <!-- notes:
 
   * tmhmm ws needs to use new tm_max/min params 

   * motif search new param names:
     - motif_organism
     - motif_expression

   * text search needs a clean up.  all four sites have differences.

   * assuming all sites have pathway info, which we should be getting from pathtools.

   * ortholog pattern query: lose api-specific "internal" params.  (why do we need these?)

   * does the GeneFeature table have an attribute we can use to mark annotated genes?  this
     will allow us to skip the join to GeneAttributes (so toxo can dodge gene predictions)

   * toxo has to use the GeneId table 

  -->

  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- temporary question for modified annotation -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- the workshop (re) annotations have become the official annotations and this section is obsolete

    <sqlQuery name="GenesWithModifiedAnnotation" includeProjects="PlasmoDB,ToxoDB">
        <paramRef ref="geneParams.plasmo_annot_status"/>
        <paramRef ref="geneParams.plasmo_new_product"/>
        <paramRef ref="geneParams.plasmo_new_model"/>
        <paramRef ref="geneParams.plasmo_new_go"/>
        <paramRef ref="geneParams.plasmo_new_ec"/>
        <paramRef ref="geneParams.plasmo_snapshot_changed"/>
        <column name="source_id"/>
        <column name="project_id"/>
        <column name="annot_status"/>
        <column name="new_product_desc"/>
       <sql>
             <![CDATA[
            SELECT DISTINCT na.source_id, '@PROJECT_ID@' as project_id,
              na.status as annot_status, na.product as new_product_desc
            FROM apidb.trackNewAnnotation na
            where na.new_product in ($$plasmo_new_product$$)
            and na.new_go in ($$plasmo_new_go$$)
            and na.new_ec in ($$plasmo_new_ec$$)
            and na.new_protein in ($$plasmo_new_model$$)
            and na.status in ($$plasmo_annot_status$$)
            and na.snapshot_changed in ($$plasmo_snapshot_changed$$)
           ]]>
       </sql>
    </sqlQuery>
-->


  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- question for old Plasmo annotations(v 8.2) -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByOldAnnotation" includeProjects="PlasmoDB,ToxoDB">
        <paramRef ref="geneParams.plasmo_new_product"/>
        <paramRef ref="geneParams.plasmo_new_cds"/>
        <paramRef ref="geneParams.plasmo_new_go"/>
        <paramRef ref="geneParams.plasmo_new_ec"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <column name="project_id"/>
        <column name="old_id"/>
        <column name="old_product"/>
       <sql>
             <![CDATA[
            SELECT DISTINCT toa.new_source_id as source_id, '@PROJECT_ID@' as project_id, 'Y' as matched_result,
                    apidb.tab_to_string(set(cast(COLLECT(toa.old_source_id) AS apidb.varchartab)), ', ') AS old_id,
                    apidb.tab_to_string(set(cast(COLLECT(oa.value) AS apidb.varchartab)), ', ') AS old_product
            FROM apidbTuning.TrackOldAnnotation toa,APIDB.oldannotation oa
            where (toa.altered_product $$plasmo_new_product$$ OR -1 $$plasmo_new_product$$)
            and (toa.altered_go $$plasmo_new_go$$ OR -1 $$plasmo_new_go$$)
            and (toa.altered_ec $$plasmo_new_ec$$ OR -1 $$plasmo_new_ec$$)
            and (toa.altered_cds $$plasmo_new_cds$$ OR -1 $$plasmo_new_cds$$)
            and oa.source_id =+ toa.old_source_id
            and oa.type =+ 'product'
            group by toa.new_source_id
            ]]>
       </sql>
    </sqlQuery>
    <processQuery name="GenesByOldAnnotation" includeProjects="EuPathDB"
             processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="geneParams.plasmo_new_product" quote="false"/>
        <paramRef ref="geneParams.plasmo_new_cds" quote="false"/>
        <paramRef ref="geneParams.plasmo_new_go" quote="false"/>
        <paramRef ref="geneParams.plasmo_new_ec" quote="false"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="old_id" width="32"/>
        <wsColumn name="old_product" width="150"/>
    </processQuery>

  
    <sqlQuery name="GenesByRodentMalariaPhenotype" includeProjects="PlasmoDB">
        <paramRef ref="geneParams.RodMalStage"/>
        <paramRef ref="geneParams.RodMalType"/>
        <paramRef ref="geneParams.RodMalSuccess"/>
        <paramRef ref="geneParams.RodMalPhenotype"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <column name="project_id"/>
       <sql>
             <![CDATA[
             select distinct ga.source_id, 
                    ga.project_id, 'Y' as matched_result
             from apidbtuning.geneattributes ga, 
                  APIDB.phenotypefeature pf,
                  (select pf2.phenotype_feature_id, 
                          CASE WHEN (pf2.phenotype_$$RodMalStage$$ like 'Not tested' or pf2.phenotype_$$RodMalStage$$ is null) then 0
                               when (pf2.phenotype_$$RodMalStage$$ like 'Not different%') then 1 
                               else 2 end as Phenotype
                  from apidb.phenotypefeature pf2) ph
             where pf.na_feature_id = ga.na_feature_id
             and ph.phenotype_feature_id = pf.phenotype_feature_id
             and pf.mod_type in ($$RodMalType$$)
             and pf.suc_of_gen_mod = $$RodMalSuccess$$
             and ph.phenotype = $$RodMalPhenotype$$
                   ]]>
       </sql>
    </sqlQuery>
    
    <processQuery name="GenesByRodentMalariaPhenotype" includeProjects="EuPathDB"
             processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <paramRef ref="geneParams.RodMalStage" quote="false"/>
      <paramRef ref="geneParams.RodMalType" quote="false"/>
      <paramRef ref="geneParams.RodMalSuccess" quote="false"/>
      <paramRef ref="geneParams.RodMalPhenotype" quote="false"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
    </processQuery>

  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByPhenotype" includeProjects="TriTrypDB">
        <paramRef ref="organismParams.organism" queryRef="organismVQ.withPhenotype" default="Trypanosoma brucei TREU927"/>
        <paramRef ref="geneParams.phenotype"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <column name="project_id"/>
        <column name="phenotype_loi"/>
       <sql>
             <![CDATA[
               select si.gene as source_id,'@PROJECT_ID@' as project_id, 'Y' as matched_result,
                 count(distinct db_xref) as phenotype_loi
               from apidb.sirna si, ApidbTuning.GeneAttributes ga
               where si.go_term || si.pato_term in ($$phenotype$$)
               and ga.source_id = si.gene
               group by si.gene,'@PROJECT_ID@'
           ]]>
       </sql>
    </sqlQuery>

    <processQuery name="GenesByPhenotype" includeProjects="EuPathDB"
             processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="organismParams.organism" queryRef="organismVQ.withPhenotype"  default="Trypanosoma brucei TREU927"/>
        <paramRef ref="geneParams.phenotype" quote="false"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="phenotype_loi" width="32"/>
    </processQuery>


    <sqlQuery name="GenesWithUpdatedAnnotation" includeProjects="TriTrypDB,PlasmoDB">
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <column name="project_id"/>
        <column name="genedb_link"/>
       <sql>
             <![CDATA[
                  SELECT ta.source_id, ta.gene_source_id, 'Y' as matched_result, '@PROJECT_ID@' as project_id,
		    '<a href="http://www.genedb.org/Query/quickSearch?pseudogenes=true&' || 'product=true&' || 'allNames=true&' || 'searchText=' || ta.gene_source_id || '" target="genedb">GeneDB record</a>' as genedb_link
                  FROM ApidbTuning.TranscriptAttributes ta
                  WHERE ta.gene_source_id IN (SELECT gene from apidbtuning.AnnotationChange)
           ]]>
       </sql>
    </sqlQuery>

    <processQuery name="GenesWithUpdatedAnnotation" includeProjects="EuPathDB"
             processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="genedb_link" width="100" />
    </processQuery>




  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- Transcription Factor Binding Sites -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByBindingSites" includeProjects="PlasmoDB">
<!--        <paramRef ref="organismParams.organism" queryRef="organismVQ.tfBindingSite" multiPick="true" quote="true"/> -->
        <!-- TEMPLATE_ANCHOR geneTfbsOrganismOverride -->        

        <paramRef ref="geneParams.tfbs_name"/>
        <paramRef ref="geneParams.tfbs_distance"/>
        <paramRef ref="geneParams.tfbs_num_sites"/>
        <paramRef ref="geneParams.tfbs_pvalue"/>
        
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <column name="project_id"/>
        <column name="tfbs_distance"/>
        <column name="tfbs_count"/>
       <sql>
             <![CDATA[
       select  ta.source_id, bg.gene_source_id, 'Y' as matched_result,
               '@PROJECT_ID@' as project_id,
               min(bg.distance) as tfbs_distance,
               count(*) as tfbs_count
       from   ApidbTuning.TFBSGene bg, ApidbTuning.TranscriptAttributes ta
       where bg.distance <= $$tfbs_distance$$ 
         and bg.organism in ($$organism$$)
         and bg.direction = '-'
         and exp(bg.primary_score) <= $$tfbs_pvalue$$
         and bg.name = $$tfbs_name$$
         and bg.gene_source_id = ta.gene_source_id
       group by ta.source_id, bg.gene_source_id
       having count(*) >= $$tfbs_num_sites$$
          ]]>
       </sql>
    </sqlQuery>

       
    <processQuery name="GenesByBindingSites" includeProjects="EuPathDB"
             processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
<!--        <paramRef ref="organismParams.organism" queryRef="organismVQ.tfBindingSite"/> -->
        <!-- TEMPLATE_ANCHOR geneTfbsOrganismOverridePortal -->        
        <paramRef ref="geneParams.tfbs_name"  quote="false"/>
        <paramRef ref="geneParams.tfbs_distance"/>
        <paramRef ref="geneParams.tfbs_num_sites"/>
        <paramRef ref="geneParams.tfbs_pvalue"  quote="false"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="tfbs_distance" width="32" wsName="tfbs_distance"/>
        <wsColumn name="tfbs_count" width="32" wsName="tfbs_count"/>
    </processQuery>




  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- ChIP chip chromatin marks -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByChIPchip" includeProjects="PlasmoDB,ToxoDB">
        <testParamValues>
          <paramValue name="chip_antibody_plasmo">H3K9me3</paramValue>
          <paramValue name="chip_genotypes">sir2KO</paramValue>
          <paramValue name="chip_replicates_plasmo">1</paramValue>
        </testParamValues>

      <paramRef ref="sharedParams.metadata_datasets" quote="false"
                queryRef="SharedVQ.ChipchipDataset"/>

      <paramRef ref="sharedParams.chipchip_samples"/>
        <paramRef ref="geneParams.chip_distance"/>
        <paramRef ref="geneParams.chip_direction"/>
        <paramRef ref="geneParams.chip_score"/>

        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <column name="project_id"/>
        <column name="chip_distance"/>
        <column name="chip_score"/>

        <sql>
          <![CDATA[
            select 'Y' as matched_result, source_id, gene_source_id, '@PROJECT_ID@' as project_id,
                   min(distance) as chip_distance, max(score) as chip_score
            from apidbTuning.ChipChipTranscript
            where protocol_app_node_id in ($$chipchip_samples$$)
              and ($$chip_direction$$ = 'Either' OR direction = $$chip_direction$$)
              and distance <= $$chip_distance$$
              and score >= $$chip_score$$
            group by source_id, gene_source_id
           ]]>
       </sql>
    </sqlQuery>

    <processQuery name="GenesByChIPchip" includeProjects="EuPathDB"
             processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <testParamValues>
          <paramValue name="chip_antibody_plasmo">H3K9me3</paramValue>
          <paramValue name="chip_genotypes">sir2KO</paramValue>
          <paramValue name="chip_replicates_plasmo">1</paramValue>
        </testParamValues>

        <paramRef ref="geneParams.chip_experiment" quote="false"/>
        <paramRef ref="geneParams.chip_antibody_plasmo"   quote="false"/>
        <paramRef ref="geneParams.chip_genotypes"  quote="false"/>
        <paramRef ref="geneParams.chip_replicates_plasmo" quote="false"/>
        <paramRef ref="geneParams.chip_distance"/>
        <paramRef ref="geneParams.chip_direction"  quote="false"/>
    <!--    <paramRef ref="geneParams.chip_score"/>  -->

        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="chip_distance" width="32"/>
        <wsColumn name="chip_genotype" width="32"/>
        <wsColumn name="chip_antibodies" width="32"/>
        <wsColumn name="chip_score" width="32"/>
      
    </processQuery>



  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- Locus Tag  -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GeneByLocusTag"  doNotTest="true" excludeProjects="EuPathDB">
        <paramRef ref="sharedParams.ds_gene_ids"/>
        <column name="source_id"/>
        <column name="matched_result"/>
        <column name="gene_source_id"/>
        <column name="project_id"/>
        <column name="input_id"/>
       <sql>
             <![CDATA[
SELECT gene_source_id,source_id, 
        apidb.tab_to_string(SET(CAST(COLLECT(input_id) AS apidb.varchartab)), ', ') AS input_id,
        'Y' AS matched_result, '@PROJECT_ID@' AS project_id
FROM
  ( SELECT DISTINCT ta.gene_source_id,ta.source_id,
        t.gene_source_id AS input_id
    FROM ApidbTuning.TranscriptAttributes ta,
      ( SELECT DISTINCT ds.gene_source_id, gi.gene
         FROM ApidbTuning.GeneId gi,($$ds_gene_ids$$) ds
        WHERE lower(gi.id) = LOWER(ds.gene_source_id )
       ) t
       WHERE t.gene = ta.gene_source_id
       AND ta.project_id = '@PROJECT_ID@'
       UNION
       SELECT DISTINCT ta.gene_source_id, ta.source_id,
          ta.source_id AS input_id
	FROM ApidbTuning.TranscriptAttributes ta,($$ds_gene_ids$$) ds
	WHERE lower(transcript_source_id) = LOWER(ds.gene_source_id )
    )
   GROUP BY source_id, gene_source_id 
           ]]>
       </sql>
    </sqlQuery>

    <processQuery name="GeneByLocusTag" includeProjects="EuPathDB" doNotTest="true"
              processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="sharedParams.ds_gene_ids" noTranslation="true"/>
        <paramRef ref="sharedParams.wdk_user_signature" noTranslation="true"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="input_id" width="32"/>
    </processQuery>


  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- transcript ID  -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GeneByTranscriptId" excludeProjects="EuPathDB" doNotTest="true">
        <paramRef ref="geneParams.single_gene_id"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <column name="project_id"/>
	<!-- column name="input_id"/ -->
        
        <sql>
            <![CDATA[
            select gene_source_id, source_id, 'Y' as matched_result,
            '@PROJECT_ID@' as project_id
            from ApidbTuning.TranscriptAttributes
            where lower(source_id) like regexp_replace(replace(replace(lower($$single_gene_id$$),
                                                               '*', '%'),
                                                       '_', '\_'),
                                               '[[:space:]]', '') escape '\'
            ]]>
        </sql>


    </sqlQuery>
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- Single locus tag  -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GeneBySingleLocusTag" excludeProjects="EuPathDB" doNotTest="true" >
        <paramRef ref="geneParams.single_gene_id"/>
        
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <column name="project_id"/>
	<!-- column name="input_id"/ -->
        <sql>
            <![CDATA[
SELECT gene_source_id, source_id, 'Y'AS matched_result, 
       '@PROJECT_ID@' AS project_id
FROM
  (SELECT ta.gene_source_id,  ta.source_id
  FROM ApidbTuning.TranscriptAttributes ta
  WHERE ta.transcript_source_id = $$single_gene_id$$
  UNION
  SELECT gi.gene AS gene_source_id, ta.source_id
  FROM ApidbTuning.GeneId gi, ApidbTuning.TranscriptAttributes ta
  WHERE lower(gi.id) LIKE REGEXP_REPLACE(REPLACE(REPLACE(LOWER($$single_gene_id$$), '*', '%'), '_', '\_'), '[[:space:]]', '') ESCAPE '\'
  AND gi.gene  = ta.gene_source_id 
  )
            ]]>
        </sql>
    </sqlQuery>

    <processQuery name="GeneBySingleLocusTag" includeProjects="EuPathDB"
              processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="geneParams.single_gene_id" noTranslation="true"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <!-- wsColumn name="input_id" width="32"/ -->
    </processQuery>


  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- EC number -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByEcNumber" excludeProjects="EuPathDB"    >
<!--         <paramRef ref="organismParams.organism" queryRef="organismVQ.withEC"/> -->
        <!-- TEMPLATE_ANCHOR geneEcOrganismOverride -->                
        <paramRef ref="geneParams.ec_source"/>
        <paramRef ref="geneParams.ec_number_pattern"/>
        <paramRef ref="geneParams.ec_wildcard"/>
        <column name="project_id"/>
        <column name="gene_source_id"  />
        <column name="source_id"  />
        <column name="matched_result"/>
        <column name="source"  />
        <sql >
          select source_id,gene_source_id,matched_result,project_id,
          Listagg(source,',') within GROUP (order by source) as source
          from (
            SELECT ta.source_id, ta.gene_source_id, 'Y' as matched_result, '@PROJECT_ID@' as project_id,
            apidb.tab_to_string(set(cast(COLLECT(distinct decode(asec.evidence_code,'OrthoMCLDerived', 'inferred from OrthoMCL',
	      'gb', 'GenBank', 
              'Hagai', 'MPMP',evidence_code)) AS apidb.varchartab)), ', ') as source
            FROM dots.aaSequenceEnzymeClass asec, sres.enzymeClass ec,  ApidbTuning.transcriptattributes ta
            WHERE ta.taxon_id in ($$organism$$)
              AND ta.aa_sequence_id = asec.aa_sequence_id
              AND asec.enzyme_class_id = ec.enzyme_class_id
              AND (
                ec.ec_number LIKE REPLACE(REPLACE(REPLACE(REPLACE(lower($$ec_number_pattern$$),' ',''),'-', '%'),'*','%'),'any','%')
                OR
                ec.ec_number LIKE REPLACE(REPLACE(REPLACE(REPLACE(lower($$ec_wildcard$$),' ',''),'-', '%'),'*','%'),'any','%')
                OR
                ec.description LIKE REPLACE(REPLACE(REPLACE(REPLACE(lower($$ec_wildcard$$),' ',''),'-', '%'),'*','%'),'any','%')
              )
	      AND asec.evidence_code IN ($$ec_source$$)
              group by ta.source_id,ta.gene_source_id,asec.evidence_code)
              group by source_id,gene_source_id,matched_result,project_id
            ORDER BY source_id
       </sql>
    </sqlQuery>

    <processQuery name="GenesByEcNumber" 
             includeProjects="EuPathDB"
             processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
<!--        <paramRef ref="organismParams.organism" queryRef="organismVQ.withEC"/> -->
        <!-- TEMPLATE_ANCHOR geneEcOrganismOverridePortal -->                
        <paramRef ref="geneParams.ec_source"  quote="false"/>
        <paramRef ref="geneParams.ec_number_pattern" quote="false"/>
        <paramRef ref="geneParams.ec_wildcard"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
    </processQuery>

  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- Transmembrane domains -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByTransmembraneDomains" excludeProjects="EuPathDB"  >
        <paramRef ref="organismParams.organism"/>
        <paramRef ref="geneParams.min_tm"/>
        <paramRef ref="geneParams.max_tm"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <sql>
            <![CDATA[
            SELECT source_id, gene_source_id, 'Y' as matched_result, '@PROJECT_ID@' as project_id
            FROM ApidbTuning.TranscriptAttributes
            WHERE tm_count >= $$min_tm$$ 
            AND tm_count <= $$max_tm$$
            AND taxon_id IN ($$organism$$)
           ]]>
        </sql>
    </sqlQuery>

    <processQuery name="GenesByTransmembraneDomains" includeProjects="EuPathDB"
             processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="organismParams.organism"/>
        <paramRef ref="geneParams.min_tm"/>
        <paramRef ref="geneParams.max_tm"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
    </processQuery>

  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- Gene type -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByGeneType" excludeProjects="EuPathDB" >
        <paramRef ref="organismParams.organism"/>
        <paramRef ref="geneParams.geneType"/>
        <paramRef ref="geneParams.includePseudogenes"/>
        <column name="project_id"/>
        <column name="source_id" />
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <sql>
            <![CDATA[
            SELECT source_id, gene_source_id, 'Y' as matched_result, '@PROJECT_ID@' as project_id
            FROM ApidbTuning.TranscriptAttributes
            WHERE gene_type IN ($$geneType$$)
              AND is_pseudo in ($$includePseudogenes$$)
              AND taxon_id IN ($$organism$$)
              AND project_id = '@PROJECT_ID@'
           ]]>
       </sql>
    </sqlQuery>

    <processQuery name="GenesByGeneType" includeProjects="EuPathDB"
         processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
       <paramRef ref="organismParams.organism"/>
       <paramRef ref="geneParams.includePseudogenes"/>
       <paramRef ref="geneParams.geneType" quote="false"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
<!--       <wsColumn name="is_pseudo" width="32" wsName="is_pseudo"/> -->
    </processQuery>


  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- BLAST   when apidb using apifed (instead of wu-blast), remember to set useTermOnly in the organism param, in similarityParams.xml   -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <processQuery name="GenesBySimilarity" 
             processName="org.apidb.apicomplexa.wsfplugin.blast.GeneBlastPlugin">

        <testParamValues includeProjects="CryptoDB">
            <paramValue name="BlastQuerySequence">AACCCTAATCATTCCAACTTTGTTTCCAATTCCA</paramValue>
        </testParamValues>
        <testParamValues includeProjects="ToxoDB">
            <paramValue name="BlastQuerySequence">CTGCAAATCGTCAATGTCTTGTCTGCACAAGCAAACAGCCTCGGAGGCGGCGAAACACTCCGGGGCGAGCGCCTTGTTGACGCTAGCACCTTTCTGGTGATGGCGATCGGCATTCGCGGC</paramValue>
	   <paramValue name="BlastDatabaseOrganism">Toxoplasma gondii ME49</paramValue>
        </testParamValues>
        <testParamValues includeProjects="PlasmoDB">
           <paramValue name="BlastQuerySequence">GCAGGAAATATGATTCCAGATAATGATAAAAATTCAAATTATAAATATCCAGCTGTTTATGATGACAAAGATAAAAAGTGTCATATATTATATATTGCAGCTCAAGAAAATAATGGTCCT</paramValue>
            <paramValue name="BlastDatabaseOrganism">Plasmodium falciparum 3D7</paramValue>
        </testParamValues>
        <testParamValues includeProjects="GiardiaDB">
           <paramValue name="BlastQuerySequence">CTTAGAGACAAGTATGGCAGTATAGAAGGTCTAGCAAAAGAATTGGGGTCTGACCCTGCCACAGGCCTTTTGAAACCTACCGTTTTGCTCCATCGAAAAACCTATGGTAGCAATACAATG</paramValue>
        </testParamValues>
        <testParamValues includeProjects="TrichDB">
           <paramValue name="BlastQuerySequence">AAGACACTCGCTGAATTAAGAAAGCGCAAATTAGAGGGTGTTGTTCTCATCTACGGCTTCCCAGAGCCAACACGCGCCCACTGCGACTTCGAACCAGTCTTCCGCCAGGAATCCTGCTTC</paramValue>
            <paramValue name="BlastDatabaseOrganism">Trichomonas vaginalis G3</paramValue>
        </testParamValues>
        <!--TODO revisit the BLAST sequence..it was picked from Sanger-->
        <testParamValues includeProjects="TriTrypDB,EuPathDB">
           <paramValue name="BlastQuerySequence">ATGCAACTCCAAAGGTTGGGTGCTCCACTACTTAAAAGGCTTGTGGGGGGATGCATACGC</paramValue>
            <paramValue name="BlastDatabaseOrganism">Trypanosoma brucei TREU927</paramValue>
        </testParamValues>
        <testParamValues includeProjects="AmoebaDB">
           <paramValue name="BlastQuerySequence">ACCGATAGTATTTATTCCAGGGATTCTTGCGTCTATGTTAGAAGGGGATATTAATATAAAAGATATCAGTAAAACACCACTTCCAGAGAAATGTGATACACAAGTAGAATATGAAAGACTTTGGG</paramValue>
	   <paramValue name="BlastDatabaseOrganism">Entamoeba dispar SAW760</paramValue>
        </testParamValues>
        <testParamValues includeProjects="MicrosporidiaDB">
           <paramValue name="BlastQuerySequence">GTTTTGGCAGACGGTATGTTTAACAGGAAAATCTCCCATGAATCTGACGGGAATATTCATAGTATTGATTTCCATGGCCTAACCATGTGTGATATTCCGGTGATAAAAAGAGACAGATATAC</paramValue>
	   <paramValue name="BlastDatabaseOrganism">Encephalitozoon cuniculi GB-M1</paramValue>
        </testParamValues>
        <testParamValues includeProjects="PiroplasmaDB">
           <paramValue name="BlastQuerySequence">TATGCAATCAGGTATCTATCTCATCAATCCTTACGCTCAGCGCTGCCCAATTGGGAAGAGCAAATGTGGACCTGAGCATGATTCCACCCTAGGAAAGTGTGCCATGTACTCTGGTTG</paramValue>
	   <paramValue name="BlastDatabaseOrganism">Babesia bovis T2Bo</paramValue>
        </testParamValues>
        <testParamValues includeProjects="FungiDB,HostDB,SchistoDB,InitDB">
           <paramValue name="BlastQuerySequence"></paramValue>
	   <paramValue name="BlastDatabaseOrganism"></paramValue>
        </testParamValues>

       <paramRef ref="sharedParams.BlastDatabaseType" quote="false" noTranslation="false" default="Transcripts"/>
       <paramRef ref="sharedParams.BlastAlgorithm" quote="false" noTranslation="false" />
       <paramRef ref="sharedParams.BlastDatabaseOrganism" quote="false" noTranslation="false" default="%%primaryOrthoOrganism%%" />
       <paramRef ref="sharedParams.BlastQuerySequence"/>
       <paramRef ref="sharedParams.BlastRecordClass" default="TranscriptRecordClasses.TranscriptRecordClass" />
       <paramRef ref="sharedParams.-e"/>
  <!--     <paramRef ref="sharedParams.-v"/> -->
       <paramRef ref="sharedParams.-b"/>
       <paramRef ref="sharedParams.-filter" quote="false" />
        <wsColumn name="source_id" width="50" wsName="identifier"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" />
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="summary" width="3000"/>
        <wsColumn name="alignment" columnType="clob"/>
        <wsColumn name="evalue_mant" columnType="float" />
        <wsColumn name="evalue_exp" columnType="number" />
        <wsColumn name="score" columnType="float" />
    </processQuery>

<!--
                     
    <processQuery name="GenesBySimilarity" includeProjects="EuPathDB" 
          processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
       <paramRef ref="geneParams.BlastDatabaseType"/>
       <paramRef ref="geneSimilarityParams.BlastDatabaseOrganism"/>
       <paramRef ref="sharedParams.BlastAlgorithm"/>
       <paramRef ref="sharedParams.BlastQuerySequence"/>
       <paramRef ref="sharedParams.-e"/>
       <paramRef ref="sharedParams.-v"/>
       <paramRef ref="sharedParams.-b"/>
       <paramRef ref="sharedParams.-filter"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="TabularRow" width="3000"/>
        <wsColumn name="Alignment" width="4000"/>
        <wsColumn name="Header" width="3000"/>
        <wsColumn name="Footer" width="3000"/>
    </processQuery>
-->

  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- Motif search -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <processQuery name="GenesByMotifSearch" excludeProjects="EuPathDB"  
             processName="org.apidb.apicomplexa.wsfplugin.motifsearch.ProteinMotifPlugin">
       <postCacheUpdateSql>
          <sql>
             <![CDATA[
                -- set gene_source_id
                update ##WDK_CACHE_TABLE##
                set gene_source_id = (select gene_source_id
                                      from apidbTuning.transcriptAttributes
                                      where source_id = ##WDK_CACHE_TABLE##.source_id)
                where wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##
                  and gene_source_id is null
             ]]>
          </sql>
       </postCacheUpdateSql>
       <postCacheUpdateSql>
          <sql>
          <![CDATA[
                -- insert missing transcripts of included genes
                insert into ##WDK_CACHE_TABLE## -- query-specific version
                            (wdk_instance_id, wdk_row_id, wdk_weight, source_id, gene_source_id, project_id, matched_result)
                with matches
                     as (select *
                         from ##WDK_CACHE_TABLE##
                         where wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##),
                     row_offset
                     as (select max(wdk_row_id) as the_max from matches),
                     mismatches
                     as (  select source_id, gene_source_id
                           from apidbTuning.transcriptAttributes
                           where gene_source_id in (select gene_source_id from matches)
                         minus
                           select source_id, gene_source_id
                           from matches)
                select ##WDK_CACHE_INSTANCE_ID##,
                       rownum + the_max, 0, source_id, gene_source_id,  '@PROJECT_ID@', 'N'
                from row_offset, mismatches
             ]]>
          </sql>
       </postCacheUpdateSql>
      <testParamValues includeProjects="PiroplasmaDB">
	<paramValue name="motif_organism">Theileria parva strain Muguga</paramValue>
      </testParamValues>
      <testParamValues includeProjects="PlasmoDB">
	<paramValue name="motif_organism">Plasmodium berghei ANKA</paramValue>
      </testParamValues>
      <testParamValues includeProjects="MicrosporidiaDB">
	<paramValue name="motif_organism">Encephalitozoon cuniculi EC1</paramValue>
      </testParamValues>


       <paramRef ref="sharedParams.motif_expression" noTranslation="true" />
       <paramRef ref="geneSimilarityParams.motif_organism" quote="false" />
        <wsColumn name="source_id" width="50" wsName="SourceID"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="Locations" width="3999"/>
        <wsColumn name="MatchCount" width="10"/>
        <wsColumn name="Sequence" width="3999"/>
    </processQuery>

    <processQuery name="GenesByMotifSearch" includeProjects="EuPathDB"  
              processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
       <paramRef ref="geneSimilarityParams.motif_organism" quote="false" />
       <paramRef ref="sharedParams.motif_expression"  noTranslation="true"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="Locations" width="4000"/>
        <wsColumn name="MatchCount" width="10"/>
        <wsColumn name="Sequence" width="4000"/>
    </processQuery>
                                                    
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- text search (based on Oracle Text) -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <processQuery name="GenesByTextSearch" includeProjects="CryptoDB,TriTrypDB,PlasmoDB,GiardiaDB,ToxoDB,TrichDB,AmoebaDB,MicrosporidiaDB,FungiDB,HostDB,SchistoDB,InitDB,PiroplasmaDB"
          processName="org.apidb.apicomplexa.wsfplugin.textsearch.TranscriptSearchPlugin">
       <postCacheUpdateSql>
          <sql>
             <![CDATA[
                update ##WDK_CACHE_TABLE##
                set gene_source_id = (select gene_source_id
                                      from apidbTuning.transcriptAttributes
                                      where source_id = ##WDK_CACHE_TABLE##.source_id)
                where wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##
                  and gene_source_id is null
             ]]>
          </sql>
       </postCacheUpdateSql>
       <postCacheUpdateSql>
          <sql>
             <![CDATA[
                update ##WDK_CACHE_TABLE##
                set project_id = '@PROJECT_ID@'
                where wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##
                  and project_id is null
             ]]>
          </sql>
       </postCacheUpdateSql>
       <postCacheUpdateSql>
          <sql>
          <![CDATA[
                insert into ##WDK_CACHE_TABLE## -- query-specific version
                            (wdk_instance_id, wdk_row_id, wdk_weight, source_id, gene_source_id, project_id, matched_result)
                with matches
                     as (select *
                         from ##WDK_CACHE_TABLE##
                         where wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##),
                     row_offset
                     as (select max(wdk_row_id) as the_max from matches),
                     mismatches
                     as (  select source_id, gene_source_id
                           from apidbTuning.transcriptAttributes
                           where gene_source_id in (select gene_source_id from matches)
                         minus
                           select source_id, gene_source_id
                           from matches)
                select ##WDK_CACHE_INSTANCE_ID##,
                       rownum + the_max, 0, source_id, gene_source_id,  '@PROJECT_ID@', 'N'
                from row_offset, mismatches
             ]]>
          </sql>
       </postCacheUpdateSql>
       <paramRef ref="organismParams.text_search_organism"/>
       <paramRef ref="sharedParams.text_expression"/>
       <paramRef ref="geneParams.text_fields"/>
       <paramRef ref="geneParams.max_pvalue" groupRef="paramGroups.advancedParams"/>
       <!-- the parameter below caches the results for 30 minutes -->
       <paramRef ref="sharedParams.timestamp" interval="1800" />
        <wsColumn name="source_id" width="50" wsName="RecordID"/>
        <wsColumn name="gene_source_id" width="50"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1"/>
        <wsColumn name="max_score" width="10" wsName="MaxScore" columnType="float"/>
        <wsColumn name="fields_matched" width="200" wsName="Datasets"/>
    </processQuery>

    <processQuery name="GenesByTextSearch" includeProjects="EuPathDB"
          processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
       <paramRef ref="organismParams.text_search_organism"  quote="false"/>
       <paramRef ref="sharedParams.text_expression" noTranslation="true"/>
       <paramRef ref="geneParams.text_fields"  quote="false"/>
       <paramRef ref="geneParams.max_pvalue" groupRef="paramGroups.advancedParams"/>
       <paramRef ref="sharedParams.timestamp" />
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="max_score" width="10" columnType="float"/>
        <wsColumn name="fields_matched" width="200"/>
    </processQuery>

  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- Orthologs -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByOrthologs" doNotTest="true"  >
        <paramRef ref="geneParams.gene_result"/>
        <paramRef ref="organismParams.organism" excludeProjects="EuPathDB"/>
        <paramRef ref="organismParams.organism" includeProjects="EuPathDB" noTranslation="true" quote="true"/>
        <paramRef ref="geneParams.isSyntenic" excludeProjects="EuPathDB"/>
        <column name="source_id" />
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <column name="project_id" />
        <column name="wdk_weight" />
        <column name="orthologs"/>

        <sql excludeProjects="EuPathDB" >
            <![CDATA[
                     WITH gene_result as $$gene_result$$
                     SELECT gene_source_id, source_id,'@PROJECT_ID@' as project_id, 'Y' as matched_result, max(wdk_weight) as wdk_weight,
                     apidb.tab_to_string(set(cast(COLLECT(distinct(input)) AS apidb.varchartab)),', ') AS orthologs 
                     FROM (
                     select ta.gene_source_id,ta.source_id, qr.gene_source_id as input, qr.wdk_weight
                     from gene_result qr, apidbtuning.orthologgenetable ogt, apidbtuning.transcriptattributes ta
                     where $$isSyntenic$$ = 'yes'
                     and qr.gene_source_id = ogt.gene_source_id
                     and ogt.ortho_gene_source_id = ta.gene_source_id
                     and ogt.is_syntenic = $$isSyntenic$$
                     and ta.taxon_id in ($$organism$$)
                     and ta.gene_type = 'protein coding'
                     UNION
                      select ta.gene_source_id,ta.source_id, qr.gene_source_id as input, qr.wdk_weight
                     from gene_result qr, apidbtuning.orthologgenetable ogt, apidbtuning.transcriptattributes ta
                     where $$isSyntenic$$ = 'no'
                     and qr.gene_source_id = ogt.gene_source_id
                     and ogt.ortho_gene_source_id = ta.gene_source_id
                     and ta.taxon_id in ($$organism$$)
                     and ta.gene_type = 'protein coding'
                     UNION
                     SELECT ta.gene_source_id, ta.source_id, qr.gene_source_id as input, qr.wdk_weight
                     FROM gene_result qr, ApidbTuning.TranscriptAttributes ta
                     WHERE qr.gene_source_id = ta.gene_source_id
                     AND ta.gene_type = 'protein coding' -- because non-protein-coding genes use orthmcl_name for counting distinct "ortholog" results
                     AND ta.taxon_id in ($$organism$$))
                     group by gene_source_id,source_id
           ]]>
       </sql>


       <!-- NOTE: the following works on component sites too if we get rid of the is_syntenic -->
       <sql includeProjects="EuPathDB">
            <![CDATA[
            SELECT gb.gene_source_id, gb.source_id, gb.project_id as project_id, gr.wdk_weight,
                   groups.orthologs
            FROM ApidbTuning.TranscriptAttributes gb,
                 (SELECT ga.orthomcl_name,
                         apidb.tab_to_string(set(cast(COLLECT(distinct(ga.gene_source_id)) AS apidb.varchartab)),', ') as orthologs 
                  FROM ApidbTuning.TranscriptAttributes ga, 
                       $$gene_result$$ gr
                  WHERE ga.gene_source_id = gr.gene_source_id 
                  GROUP BY ga.orthomcl_name) groups
            WHERE gb.orthomcl_name = groups.orthomcl_name
              AND gb.organism IN ($$organism$$)
           ]]>
       </sql>

    </sqlQuery>

  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- Go Term -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByGoTerm" excludeProjects="EuPathDB" >

        <testParamValues>
          <paramValue name="go_typeahead">N/A</paramValue>
          <paramValue name="go_term">binding</paramValue>
        </testParamValues>

        <paramRef ref="organismParams.organism"/>
        <paramRef ref="geneParams.go_term_source"/>
        <paramRef ref="geneParams.go_typeahead"/>
        <paramRef ref="geneParams.go_term"/>
        <column name="project_id"/>
        <column name="source_id" />
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <column name="evidence_code"/>
        <sql>
            <![CDATA[
                     SELECT ta.source_id, ta.gene_source_id, '@PROJECT_ID@' as project_id, 'Y' as matched_result,
                     apidb.tab_to_string(set(cast(COLLECT(distinct gs.evidence_code) AS apidb.varchartab)), ', ') as evidence_code
                     FROM ApidbTuning.TranscriptAttributes ta, ApidbTuning.ProteinAttributes pa, ApidbTuning.GoTermSummary gs
                     WHERE ta.taxon_id IN ($$organism$$)
                     AND ta.aa_sequence_id = pa.aa_sequence_id
                     AND gs.aa_sequence_id = pa.aa_sequence_id
                     AND (gs.go_id IN ($$go_typeahead$$)
                       OR (gs.go_term_name like REPLACE($$go_term$$, '*', '%')
                       OR gs.go_id like REPLACE($$go_term$$, '*', '%')
                       OR gs.go_id || ' : ' || gs.go_term_name like REPLACE($$go_term$$, '*', '%')))
                     GROUP BY ta.source_id, ta.gene_source_id
                     ORDER BY ta.source_id
           ]]>
       </sql>
    </sqlQuery>


    <processQuery name="GenesByGoTerm" includeProjects="EuPathDB" 
		processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="organismParams.organism"/>
        <paramRef ref="geneParams.go_typeahead"/>
        <paramRef ref="geneParams.go_term"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
    </processQuery>

  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- Signal Peptide -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesWithSignalPeptide" excludeProjects="EuPathDB" >
        <paramRef ref="organismParams.organism"/>
        <paramRef ref="geneParams.min_sigp_sum_score" groupRef="paramGroups.advancedParams"/>
        <paramRef ref="geneParams.min_sigp_d_score" groupRef="paramGroups.advancedParams"/>
        <paramRef ref="geneParams.min_sigp_signal_probability" groupRef="paramGroups.advancedParams"/>
        <paramRef ref="geneParams.any_or_all_sigp" groupRef="paramGroups.advancedParams"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <column name="sigp_sum_score"/>
        <column name="nn_d_score" />
        <column name="hmm_signal_probability" />
        <sql>
            <![CDATA[
            SELECT DISTINCT ta.source_id, ta.gene_source_id, 'Y' as matched_result,
             '@PROJECT_ID@' as project_id,
             (spf.maxy_conclusion + spf.maxc_conclusion + 
              spf.maxs_conclusion + spf.means_conclusion ) as sigp_sum_score,
              to_char((spf.means_score + maxy_score) / 2 , '0.99') as nn_d_score,
              to_char(spf.signal_probability, '0.99') as hmm_signal_probability
            FROM ApidbTuning.TranscriptAttributes ta, 
                 dots.SignalPeptideFeature spf
            WHERE ta.taxon_id in ($$organism$$) 
              AND ta.aa_sequence_id = spf.aa_sequence_id
              AND ((spf.maxy_conclusion +
                   spf.maxc_conclusion +
                   spf.maxs_conclusion +
                   spf.means_conclusion ) >= $$min_sigp_sum_score$$ 
              $$any_or_all_sigp$$ ((spf.means_score + spf.maxy_score) / 2) >= $$min_sigp_d_score$$
              $$any_or_all_sigp$$ spf.signal_probability >= $$min_sigp_signal_probability$$)
           ]]>
       </sql>
    </sqlQuery>

    <processQuery name="GenesWithSignalPeptide" includeProjects="EuPathDB"
			processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="organismParams.organism"/>
        <paramRef ref="geneParams.min_sigp_sum_score" groupRef="paramGroups.advancedParams"/>
        <paramRef ref="geneParams.min_sigp_d_score" groupRef="paramGroups.advancedParams"/>
        <paramRef ref="geneParams.min_sigp_signal_probability" groupRef="paramGroups.advancedParams" />
        <paramRef ref="geneParams.any_or_all_sigp" groupRef="paramGroups.advancedParams" quote="false"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="sigp_sum_score" width="32" wsName="sigp_sum_score"/>
        <wsColumn name="nn_d_score" width="32" wsName="nn_d_score"/>
        <wsColumn name="hmm_signal_probability" width="32" wsName="hmm_signal_probability"/>
    </processQuery>


  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- IsoElectric Point -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByIsoelectricPoint" excludeProjects="EuPathDB"    >
        <paramRef ref="organismParams.organism"/>
        <paramRef ref="geneParams.min_isoelectric_point"/>
        <paramRef ref="geneParams.max_isoelectric_point"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <column name="isoelectric_point"/>
        <sql>
            <![CDATA[
            SELECT isoelectric_point, source_id, gene_source_id, 'Y' as matched_result, '@PROJECT_ID@' as project_id
            FROM ApidbTuning.TranscriptAttributes
            WHERE isoelectric_point BETWEEN $$min_isoelectric_point$$
              AND $$max_isoelectric_point$$
              AND taxon_id in ($$organism$$)
           ]]>
       </sql>
    </sqlQuery>

    <processQuery name="GenesByIsoelectricPoint"
                   includeProjects="EuPathDB"
                   processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="organismParams.organism"/>	  
        <paramRef ref="geneParams.min_isoelectric_point"/>
        <paramRef ref="geneParams.max_isoelectric_point"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
    </processQuery>


  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- Molecular Weight -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByMolecularWeight" excludeProjects="EuPathDB"   >
        <paramRef ref="organismParams.organism"/>
        <paramRef ref="geneParams.min_molecular_weight"/>
        <paramRef ref="geneParams.max_molecular_weight"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <sql>
            <![CDATA[
            SELECT source_id, gene_source_id, 'Y' as matched_result, '@PROJECT_ID@' as project_id
            FROM ApidbTuning.TranscriptAttributes
            WHERE molecular_weight <= $$max_molecular_weight$$
              AND molecular_weight >= $$min_molecular_weight$$
              AND taxon_id in ($$organism$$)
           ]]>
       </sql>
    </sqlQuery>


    <processQuery name="GenesByMolecularWeight" includeProjects="EuPathDB"
                processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="organismParams.organism"/>
        <paramRef ref="geneParams.min_molecular_weight"/>
        <paramRef ref="geneParams.max_molecular_weight"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
    </processQuery>

  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- ExonCount -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByExonCount" excludeProjects="EuPathDB" >
        <paramRef ref="organismParams.organism"/>
        <paramRef ref="geneParams.scope"/>
        <paramRef ref="geneParams.num_exons_gte"/>
        <paramRef ref="geneParams.num_exons_lte"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <sql>
            <![CDATA[
             SELECT distinct source_id, gene_source_id, 'Y' as matched_result, '@PROJECT_ID@' as project_id
             FROM ApidbTuning.TranscriptAttributes
             WHERE taxon_id IN ($$organism$$)
               AND $$scope$$  >= $$num_exons_gte$$ 
               AND $$scope$$ <= $$num_exons_lte$$
            ]]>
       </sql>
    </sqlQuery>

    <processQuery name="GenesByExonCount" 
	   includeProjects="EuPathDB"
       processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">

        <paramRef ref="organismParams.organism"/>
        <paramRef ref="geneParams.scope"/>
        <paramRef ref="geneParams.num_exons_gte"/>
        <paramRef ref="geneParams.num_exons_lte"/>

        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
    </processQuery>

  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- Ortholog pattern -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByOrthologPattern" excludeProjects="EuPathDB"    >

        <testParamValues includeProjects="FungiDB,HostDB,SchistoDB,InitDB">
          <paramValue name="included_species">FILL</paramValue>
          <paramValue name="excluded_species">FILL</paramValue>
          <paramValue name="organism">FILL</paramValue>
        </testParamValues>

        <testParamValues includeProjects="PiroplasmaDB">
          <paramValue name="included_species">Eukaryota</paramValue>
          <paramValue name="excluded_species">Bacteria</paramValue>
          <paramValue name="organism">Babesia bovis</paramValue>
          <paramValue name="phyletic_indent_map">ARCH</paramValue>
          <paramValue name="phyletic_term_map">rnor</paramValue>
        </testParamValues>

        <testParamValues includeProjects="AmoebaDB">
          <paramValue name="included_species">Eukaryota</paramValue>
          <paramValue name="excluded_species">Bacteria</paramValue>
          <paramValue name="organism">Entamoeba dispar</paramValue>
          <paramValue name="phyletic_indent_map">ARCH</paramValue>
          <paramValue name="phyletic_term_map">rnor</paramValue>
        </testParamValues>

        <testParamValues includeProjects="MicrosporidiaDB">
          <paramValue name="included_species">Fungi</paramValue>
          <paramValue name="excluded_species">Bacteria</paramValue>
          <paramValue name="organism">Encephalitozoon cuniculi</paramValue>
          <paramValue name="phyletic_indent_map">ARCH</paramValue>
          <paramValue name="phyletic_term_map">rnor</paramValue>
        </testParamValues>

        <testParamValues includeProjects="CryptoDB">
          <paramValue name="included_species">Alveolates</paramValue>
          <paramValue name="excluded_species">Bacteria</paramValue>
          <paramValue name="phyletic_indent_map">ARCH</paramValue>
          <paramValue name="phyletic_term_map">rnor</paramValue>
        </testParamValues>

        <testParamValues includeProjects="PlasmoDB">
          <paramValue name="included_species">fru</paramValue>
          <paramValue name="excluded_species">Fungi</paramValue>
          <paramValue name="organism">Plasmodium falciparum</paramValue>
          <paramValue name="phyletic_indent_map">ARCH</paramValue>
          <paramValue name="phyletic_term_map">rnor</paramValue>
        </testParamValues>

        <testParamValues includeProjects="GiardiaDB">
          <paramValue name="included_species">fru</paramValue>
          <paramValue name="excluded_species">Fungi</paramValue>
          <paramValue name="organism">Giardia Assemblage A isolate WB</paramValue>
          <paramValue name="phyletic_indent_map">ARCH</paramValue>
          <paramValue name="phyletic_term_map">rnor</paramValue>
        </testParamValues>

        <testParamValues includeProjects="TriTrypDB">
          <paramValue name="included_species">fru</paramValue>
          <paramValue name="excluded_species">Fungi</paramValue>
          <paramValue name="organism">Leishmania major</paramValue>
          <paramValue name="phyletic_indent_map">ARCH</paramValue>
          <paramValue name="phyletic_term_map">rnor</paramValue>
        </testParamValues>

        <testParamValues includeProjects="ToxoDB">
          <paramValue name="included_species">fru</paramValue>
          <paramValue name="excluded_species">Fungi</paramValue>
          <paramValue name="organism">Toxoplasma gondii</paramValue>
          <paramValue name="phyletic_indent_map">ARCH</paramValue>
          <paramValue name="phyletic_term_map">rnor</paramValue>
        </testParamValues>

        <testParamValues includeProjects="TrichDB">
          <paramValue name="included_species">fru</paramValue>
          <paramValue name="excluded_species">Fungi</paramValue>
          <paramValue name="organism">Trichomonas vaginalis</paramValue>
          <paramValue name="phyletic_indent_map">ARCH</paramValue>
          <paramValue name="phyletic_term_map">rnor</paramValue>
        </testParamValues>

        <paramRef ref="geneParams.profile_pattern"/>
        <paramRef ref="geneParams.included_species"/>
        <paramRef ref="geneParams.excluded_species"/>
        <paramRef ref="geneParams.phyletic_indent_map"/>
        <paramRef ref="geneParams.phyletic_term_map"/>
        <paramRef ref="organismParams.organism"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <sql>
            <![CDATA[
            SELECT * FROM (
              SELECT DISTINCT ta.source_id, ta.gene_source_id, 'Y' as matched_result,
                     '@PROJECT_ID@' as project_id, ta.taxon_id 
                FROM ApidbTuning.TranscriptAttributes ta
               WHERE ta.gene_ortholog_number = 0 
                 AND ta.gene_paralog_number = 0 
                 AND ta.gene_type = 'protein coding'
                 AND ta.taxon_id in ($$organism$$)
                 AND $$profile_pattern$$ not like '%:Y%'
               UNION
               SELECT DISTINCT ta.source_id, ta.gene_source_id, 'Y' as matched_result,
                      '@PROJECT_ID@' as project_id, ta.taxon_id
                FROM apidb.PhylogeneticProfile pp, ApidbTuning.TranscriptAttributes ta
               WHERE pp.profile_string LIKE $$profile_pattern$$
                 AND pp.source_id = ta.gene_source_id
                 AND ta.taxon_id in ($$organism$$)
            ) ORDER BY taxon_id,source_id 
           ]]>
       </sql>
    </sqlQuery>

<!-- 
 phlyetic_indent_map and phylectic_term_map are not used by the query.  They are for display purposes only.  Thus, the process query has trouble with these parameters and forces us to hard code default values into the WdkQueryPlugin.java file. 
Currently :
  phyletic_indent_map = ARCH
  phyletic_term_map = rnor

if these values change, then they must be updated in the WdkQueryPlugin.java file (search for "workaround" to find the lines) 
-->
    <processQuery name="GenesByOrthologPattern" includeProjects="EuPathDB"
             processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <testParamValues>
          <paramValue name="included_species">Alveolates</paramValue>
          <paramValue name="excluded_species">Bacteria</paramValue>
          <paramValue name="phyletic_indent_map">ARCH</paramValue>
          <paramValue name="phyletic_term_map">rnor</paramValue>
        </testParamValues>

	<paramRef ref="geneParams.profile_pattern" noTranslation="true"/>
	<paramRef ref="geneParams.included_species" noTranslation="true"/>
	<paramRef ref="geneParams.excluded_species" noTranslation="true"/>
	<paramRef ref="organismParams.organism"/>
	<paramRef ref="geneParams.phyletic_indent_map" noTranslation="false" quote="false"/>
	<paramRef ref="geneParams.phyletic_term_map" noTranslation="false" quote="false"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
    </processQuery>

  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- Metabolic Pathway -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByMetabolicPathwayHagai" includeProjects="ToxoDB,PlasmoDB" >
        <paramRef ref="organismParams.org_with_Hagai_pathways" />
        <paramRef ref="geneParams.metabolic_pathway"/>
        <column name="project_id"/>
        <column name="gene_source_id"/>
        <column name="source_id"/>
        <column name="matched_result"/>
        <sql>
            <![CDATA[
              SELECT ta.source_id, ta.gene_source_id, 'Y' as matched_result, '@PROJECT_ID@' as project_id
            FROM ApidbTuning.TranscriptAttributes ta, dots.DbRefNaFeature drnf, sres.DbRef dr,
              (SELECT idrnf.na_feature_id
               FROM dots.DbRefNaFeature idrnf, sres.DbRef idr
               WHERE idr.lowercase_secondary_identifier = $$metabolic_pathway$$
                 AND idrnf.db_ref_id = idr.db_ref_id) internal
            WHERE internal.na_feature_id = drnf.na_feature_id
            AND ta.gene_na_feature_id = drnf.na_feature_id
            AND drnf.db_ref_id = dr.db_ref_id
	    AND ta.organism = $$org_with_Hagai_pathways$$
            GROUP BY ta.source_id,ta.gene_source_id
           ]]>
        </sql>
    </sqlQuery>

    <processQuery name="GenesByMetabolicPathwayHagai" includeProjects="EuPathDB"
                  processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="organismParams.org_with_Hagai_pathways"  quote="false" />

        <paramRef ref="geneParams.metabolic_pathway" quote="false"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
    </processQuery>


  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- Taxon (Species) -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByTaxon" excludeProjects="EuPathDB" >
        <paramRef ref="organismParams.organism"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <sql>
            <![CDATA[
                SELECT ta.source_id, ta.gene_source_id, 'Y' as matched_result, '@PROJECT_ID@' as project_id
                FROM ApidbTuning.TranscriptAttributes ta
                WHERE ta.taxon_id in ($$organism$$)
                ORDER BY ta.source_id
           ]]>
       </sql>
    </sqlQuery>

    <processQuery name="GenesByTaxon" includeProjects="EuPathDB"
           processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="organismParams.organism"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
    </processQuery>


  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- Epitopes -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesWithEpitopes" includeProjects="CryptoDB,ToxoDB,PlasmoDB,GiardiaDB,TriTrypDB,PiroplasmaDB,FungiDB"  >
<!--        <paramRef ref="organismParams.organism" queryRef="organismVQ.withEpitopes"/> -->
        <!-- TEMPLATE_ANCHOR geneEpitopeOrganismOverride -->        

        <paramRef ref="geneParams.epitope_confidence"/>
        <column name="source_id" />
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <column name="project_id"/>
        <column name="confidence" />
        <column name="count" />
        <sql>
            <![CDATA[
        SELECT ta.source_id, ta.gene_source_id, 'Y' as matched_result, '@PROJECT_ID@' as project_id,
           count(ef.source_id) AS count,
           DECODE(MAX(
               DECODE(ef.type, 'Not Full Set Not on Blast Hit', 1,
                      'Not Full Set On Blast Hit', 2,
                      'Full Set Not on Blast Hit', 2,
                      'Full Set On Blast Hit', 3,
                       4)),
               1, 'Low',
               2, 'Medium',
               3, 'High',
               4, 'unknown epitope type') AS confidence
        FROM dots.EpitopeFeature ef, ApidbTuning.TranscriptAttributes ta,
             dots.MotifAaSequence mas
        WHERE ta.aa_sequence_id = ef.aa_sequence_id
          AND ef.motif_aa_sequence_id = mas.aa_sequence_id
          AND ta.taxon_id in ($$organism$$)
          AND ef.type IN ($$epitope_confidence$$)
        GROUP BY ta.source_id, ta.gene_source_id
        ORDER BY ta.source_id, ta.gene_source_id
           ]]>
        </sql>
    </sqlQuery>

    <processQuery name="GenesWithEpitopes" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" includeProjects="EuPathDB">
<!--        <paramRef ref="organismParams.organism" queryRef="organismVQ.withEpitopes" quote="false"/> -->
        <!-- TEMPLATE_ANCHOR geneEpitopeOrganismOverride -->        

        <paramRef ref="geneParams.epitope_confidence" quote="false"/>
        <wsColumn name="source_id" width="50" />
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="confidence" width="10" />
        <wsColumn name="count" width="10" />
    </processQuery>

  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- Mass Spec -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByMassSpec" includeProjects="PlasmoDB,ToxoDB,CryptoDB,GiardiaDB,TriTrypDB,TrichDB,AmoebaDB,PiroplasmaDB,HostDB" >

        <paramRef ref="geneParams.ms_assay"/>
        <paramRef ref="sharedParams.min_sequence_count"/>
        <paramRef ref="sharedParams.min_spectrum_count"/>
        <column name="source_id" />
        <column name="gene_source_id" />
        <column name="matched_result"/>
        <column name="project_id" />
        <column name="sample_count"/>
        <column name="sum_sequence_count" />
        <column name="unique_sequence_count"/>
        <column name="sum_spectrum_count" columnType="number" width="12" />
        <sql>
            <![CDATA[
select '@PROJECT_ID@' as project_id, 'Y' as matched_result, source_id, gene_source_id,sample_count, 
      sum_sequence_count, unique_sequence_count, sum_spectrum_count 
from 
        (
            select mps.source_id,mps.gene_source_id,
                   count(mps.peptide_sequence) as sum_sequence_count, 
                   count(distinct mps.peptide_sequence) as unique_sequence_count,
                   sum(mps.spectrum_count) as sum_spectrum_count,
                   count(distinct pan.PROTOCOL_APP_NODE_ID) as sample_count
              from apidbtuning.mspeptidesummary mps,STUDY.PROTOCOLAPPNODE pan
             where pan.name in ( $$ms_assay$$ ) 
             and   pan.PROTOCOL_APP_NODE_ID = mps.PROTOCOL_APP_NODE_ID
             group by mps.source_id,mps.gene_source_id)
         where unique_sequence_count >= $$min_sequence_count$$
         and sum_spectrum_count >= $$min_spectrum_count$$
            ]]>
       </sql>
 
    


    </sqlQuery>

    <processQuery name="GenesByMassSpec" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" includeProjects="EuPathDB">
        <testParamValues>
          <paramValue name="ms_assay">purified rhoptries</paramValue>
        </testParamValues>
        <paramRef ref="geneParams.ms_assay" quote="false"/>
        <paramRef ref="sharedParams.min_sequence_count" number="true" />
        <paramRef ref="sharedParams.min_spectrum_count" number="true"/>
        <wsColumn name="source_id" width="50" />
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" />
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="sample_count" width="10" />
        <wsColumn name="sum_sequence_count" width="10" />
        <wsColumn name="unique_sequence_count" width="10" />
        <wsColumn name="sum_spectrum_count" width="10" />
    </processQuery>



  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- GenesOrthologousToAGivenGene   COULD HAVE SQL ERRORS FOR APIDB -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesOrthologousToAGivenGene" includeProjects="CryptoDB,PlasmoDB,ToxoDB,TriTrypDB,GiardiaDB,AmoebaDB,MicrosporidiaDB,FungiDB,HostDB,SchistoDB,InitDB,PiroplasmaDB,EuPathDB"    >

        <testParamValues includeProjects="PlasmoDB">
          <paramValue name="single_gene_id">PVX_092275</paramValue>
        </testParamValues>

        <testParamValues includeProjects="CryptoDB">
          <paramValue name="single_gene_id">Chro.70036</paramValue>
        </testParamValues>


        <testParamValues includeProjects="PiroplasmaDB">
          <paramValue name="single_gene_id">BBOV_IV008150</paramValue>
        </testParamValues>

        <paramRef ref="organismParams.organism" excludeProjects="EuPathDB"/>
        <paramRef ref="organismParams.localorganism"  includeProjects="EuPathDB"/>
        <paramRef ref="geneParams.single_gene_id"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>

        <sql excludeProjects="EuPathDB">
            <![CDATA[
                SELECT gattr.source_id, 'Y' as matched_result, project_id
                FROM ApidbTuning.GeneAttributes gattr
                WHERE orthomcl_name in (
                  SELECT orthomcl_name 
                  FROM   ApidbTuning.GeneAttributes ga, ApidbTuning.GeneId gi 
                  WHERE  lower(gi.id) = lower($$single_gene_id$$)
                  AND    ga.source_id = gi.gene)
                AND gattr.taxon_id IN ($$organism$$)
                ORDER BY project_id, source_id
           ]]>
       </sql>

       <sql includeProjects="EuPathDB">
       <![CDATA[
                SELECT gattr.source_id, project_id
                FROM ApidbTuning.GeneAttributes gattr
                WHERE orthomcl_name in (
                  SELECT orthomcl_name 
                  FROM   ApidbTuning.GeneAttributes ga, ApidbTuning.GeneId gi 
                  WHERE  lower(gi.id) = lower($$single_gene_id$$)
                  AND    ga.source_id = gi.gene  ) 
                AND gattr.organism IN ($$localorganism$$)
                ORDER BY project_id, source_id
           ]]>
       </sql>
    </sqlQuery>


  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- Location -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

 <!-- TODO:  wdkSanityTest needs to handle dependent params -->
    <sqlQuery name="GenesByLocation" excludeProjects="EuPathDB"
               doNotTest="true">

      <!-- TODO:  check this param.  not there in trunk when merged-->

        <paramRef ref="organismParams.organismSinglePick" queryRef="organismVQ.withChromosomes" displayType="select" includeProjects="TriTrypDB,ToxoDB,PlasmoDB,MicrosporidiaDB,PiroplasmaDB,GiardiaDB,HostDB,FungiDB" quote="true"> <help>Select the organism you wish to query against.</help></paramRef>
        <paramRef ref="organismParams.organismSinglePick" queryRef="organismVQ.withChromosomes" displayType="select" includeProjects="CryptoDB" quote="true" default="Cryptosporidium parvum Iowa II"> <help>Select the organism you wish to query against.</help></paramRef>

        <paramRef ref="sharedParams.chromosomeOptional" includeProjects="PlasmoDB,ToxoDB,CryptoDB,TriTrypDB,MicrosporidiaDB,PiroplasmaDB,GiardiaDB,HostDB,FungiDB"  queryRef="SharedVQ.ChromosomeOrderNum"/>
        <paramRef ref="sharedParams.sequenceId"/>
        <paramRef ref="sharedParams.start_point"/>
        <paramRef ref="sharedParams.end_point"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <column name="dynamic_location"/>

        <sql includeProjects="TriTrypDB,MicrosporidiaDB,PlasmoDB,CryptoDB,ToxoDB,PiroplasmaDB,GiardiaDB,HostDB,FungiDB">
            <![CDATA[
            SELECT gatr.source_id as source_id, 'Y' as matched_result,
                  '@PROJECT_ID@' as project_id, gatr.gene_source_id,
                  apidb.tab_to_string(set(cast(COLLECT(
                  fl.sequence_source_id || ': ' || trim(to_char(fl.start_min,'999,999,999')) || ' - ' || trim(to_char(fl.end_max,'999,999,999')) || decode(fl.is_reversed, 1, ' (-)', ' (+)')
                  )  AS apidb.varchartab)), '<br/>') as dynamic_location
            FROM ApidbTuning.FeatureLocation fl, ApidbTuning.TranscriptAttributes gatr
            WHERE ((gatr.organism = $$organismSinglePick$$ AND gatr.chromosome = $$chromosomeOptional$$  and fl.is_top_level=1)
                   OR lower(fl.sequence_source_id) = lower($$sequenceId$$))
              AND fl.NA_FEATURE_ID = gatr.NA_FEATURE_ID
              AND fl.end_max >= REGEXP_REPLACE('$$start_point$$', ',| ','')
              AND (fl.start_min <= REGEXP_REPLACE('$$end_point$$', ',| ','') OR REGEXP_REPLACE('$$end_point$$', ',| ','') = 0)
              AND gatr.project_id  = '@PROJECT_ID@'
            GROUP BY gatr.source_id,gatr.gene_source_id
           ]]>
       </sql>

        <sql includeProjects="TrichDB,AmoebaDB,SchistoDB,InitDB">
            <![CDATA[
            SELECT distinct gatr.source_id as source_id, '@PROJECT_ID@' as project_id,
              fl.sequence_source_id || ': ' || trim(to_char(fl.start_min,'999,999,999')) || ' - ' || trim(to_char(fl.end_max,'999,999,999')) || decode(fl.is_reversed, 1, ' (-)', ' (+)') as dynamic_location
            FROM ApidbTuning.FeatureLocation fl,ApidbTuning.GeneAttributes gatr
            WHERE  lower(gatr.sequence_id) = lower($$sequenceId$$)
              AND fl.na_sequence_id = gatr.na_sequence_id
              AND fl.na_feature_id = gatr.na_feature_id
              AND fl.end_max >= REGEXP_REPLACE('$$start_point$$', ',| ','')
              AND (fl.start_min <= REGEXP_REPLACE('$$end_point$$', ',| ','') OR REGEXP_REPLACE('$$end_point$$', ',| ','') = 0)
              AND gatr.project_id  = '@PROJECT_ID@'
           ]]>
       </sql>
    </sqlQuery>


    <processQuery name="GenesByLocation" includeProjects="EuPathDB" doNotTest="true"
		processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="organismParams.organism.organismSinglePick" queryRef="organismVQ.withChromosomes"  
           default="Cryptosporidium parvum Iowa II" multiPick="false"  
           noTranslation="true"><help>Select organism you wish to query against</help></paramRef>
        <paramRef ref="sharedParams.chromosomeOptional" quote="false" noTranslation="true"/>
        <paramRef ref="sharedParams.sequenceId" noTranslation="true"/>
        <paramRef ref="sharedParams.start_point"/>
        <paramRef ref="sharedParams.end_point"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="dynamic_location" width="100" wsName="dynamic_location"/>
                
    </processQuery>

    <sqlQuery name="GenesBySequenceSourceId" excludeProjects="EuPathDB"
               doNotTest="true">

        <paramRef ref="sharedParams.sequenceId"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>

        <sql>
        <![CDATA[
        select distinct feature_source_id as source_id, 'Y' as matched_result, project_id
        from ApidbTuning.FeatureLocation 
        where feature_type = 'GeneFeature' 
        and sequence_source_id = $$sequenceId$$
	]]>
        </sql>

    </sqlQuery>

    <processQuery name="GenesByLocations" includeProjects="EuPathDB" 
		     doNotTest="true"
		processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="sharedParams.sequenceId" noTranslation="true"/>
        <paramRef ref="sharedParams.start_point"/>
        <paramRef ref="sharedParams.end_point"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="dynamic_location" width="100" wsName="dynamic_location"/>
                
    </processQuery>


  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- Genes By Snps -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <processQuery name="GenesBySnps" includeProjects="PlasmoDB"
              processName="org.apidb.apicomplexa.wsfplugin.highspeedsnpsearch.FindGenesWithChipSnpCharsPlugin">

       <postCacheUpdateSql>
          <sql>
             <![CDATA[
                -- set source_id
                update ##WDK_CACHE_TABLE##
                set source_id = (select min(source_id)
                                      from apidbTuning.transcriptAttributes
                                      where gene_source_id = ##WDK_CACHE_TABLE##.gene_source_id)
                where wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##
                  and source_id is null
             ]]>
          </sql>
       </postCacheUpdateSql>
       <postCacheUpdateSql>
          <sql>
          <![CDATA[
                -- insert missing transcripts of included genes
                insert into ##WDK_CACHE_TABLE## -- query-specific version
                            (wdk_instance_id, wdk_row_id, wdk_weight, source_id, gene_source_id, project_id, matched_result,
cds_snp_density, chip_dn_ds_ratio, chip_num_synonymous, chip_num_non_synonymous, num_noncoding, num_nonsense, chip_total_snps)
                with matches
                     as (select *
                         from ##WDK_CACHE_TABLE##
                         where wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##),
                     row_offset
                     as (select max(wdk_row_id) as the_max from matches),
                     mismatches
                     as (  select source_id, gene_source_id
                           from apidbTuning.transcriptAttributes
                           where gene_source_id in (select gene_source_id from matches)
                         minus
                           select source_id, gene_source_id
                           from matches)
                select ##WDK_CACHE_INSTANCE_ID##,
                       rownum + the_max, 0, mm.source_id, mm.gene_source_id,  '@PROJECT_ID@', 'Y',
                       wct.cds_snp_density, wct.chip_dn_ds_ratio, wct.chip_num_synonymous,
                       wct.chip_num_non_synonymous, wct.num_noncoding, wct.num_nonsense, wct.chip_total_snps
                from row_offset ro, mismatches mm, ##WDK_CACHE_TABLE## wct
                where mm.gene_source_id = wct.gene_source_id
             ]]>
          </sql>
       </postCacheUpdateSql>

        <paramRef ref="organismParams.organismSinglePick" visible="false" quote="true"/>
        <paramRef ref="sharedParams.snp_assay_type"/>
        <paramRef ref="snpChipParams.ref_samples_filter_metadata" quote="false" prompt="Samples"/>
	<paramRef ref="snpParams.WebServicesPath"/>
	<paramRef ref="snpChipParams.ReadFrequencyPercent" visible="false"/>
        <paramRef ref="snpParams.MinPercentMinorAlleles" />
	<paramRef ref="snpParams.MinPercentIsolateCalls"  />
        <paramRef ref="geneParams.snp_class"/>
        <paramRef ref="geneParams.occurrences_lower"/>
        <paramRef ref="geneParams.occurrences_upper"/>
        <paramRef ref="geneParams.dn_ds_ratio_lower"/>
        <paramRef ref="geneParams.dn_ds_ratio_upper"/>
        <paramRef ref="geneParams.snp_density_lower"/>
        <paramRef ref="geneParams.snp_density_upper"/>
        <wsColumn name="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="cds_snp_density" columnType="float"/>
        <wsColumn name="chip_dn_ds_ratio" columnType="float"/>
        <wsColumn name="chip_num_synonymous" columnType="number"/>
        <wsColumn name="chip_num_non_synonymous" columnType="number"/>
        <wsColumn name="num_noncoding" columnType="number"/>
        <wsColumn name="num_nonsense" columnType="number"/>
        <wsColumn name="chip_total_snps" columnType="number"/>
    </processQuery>


    <processQuery name="GenesBySnps" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" includeProjects="EuPathDB"  doNotTest="true">

        <paramRef ref="organismParams.organismSinglePick" displayType="select"
                  noTranslation="true"  queryRef="organismVQ.withChromosomesSNPs">
                  <help>Select organism you wish to query against</help>
        </paramRef>
        <paramRef ref="snpChipParams.snp_assay_type" quote="false"/>
        <paramRef ref="sharedParams.snpchip_strain_meta"/>
        <paramRef ref="geneParams.snp_stat" groupRef="paramGroups.advancedParams"/>
        <paramRef ref="geneParams.occurrences_lower" groupRef="paramGroups.advancedParams"/>
        <paramRef ref="geneParams.occurrences_upper" groupRef="paramGroups.advancedParams"/>
        <paramRef ref="geneParams.dn_ds_ratio_lower" groupRef="paramGroups.advancedParams"/>
        <paramRef ref="geneParams.dn_ds_ratio_upper" groupRef="paramGroups.advancedParams"/>
        <paramRef ref="geneParams.snp_density_lower" groupRef="paramGroups.advancedParams"/>
        <paramRef ref="geneParams.snp_density_upper" groupRef="paramGroups.advancedParams"/>
        <wsColumn name="source_id" width="50"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="cds_snp_density" width="10"/>
        <wsColumn name="dn_ds_ratio" width="10"/>
        <wsColumn name="num_synonymous" width="10"/>
        <wsColumn name="num_non_synonymous" width="10"/>
        <wsColumn name="num_noncoding" width="10"/>
        <wsColumn name="num_nonsense" width="10"/>
        <wsColumn name="total_snps" width="10"/>
   </processQuery>

  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- Genes By NGS Snps -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <processQuery name="GenesByNgsSnps" includeProjects="TriTrypDB,PlasmoDB,ToxoDB,AmoebaDB,CryptoDB,FungiDB"
              processName="org.apidb.apicomplexa.wsfplugin.highspeedsnpsearch.FindGenesWithSnpCharsPlugin">

       <postCacheUpdateSql>
          <sql>
             <![CDATA[
                -- set source_id
                update ##WDK_CACHE_TABLE##
                set source_id = (select min(source_id)
                                      from apidbTuning.transcriptAttributes
                                      where gene_source_id = ##WDK_CACHE_TABLE##.gene_source_id)
                where wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##
                  and source_id is null
             ]]>
          </sql>
       </postCacheUpdateSql>
       <postCacheUpdateSql>
          <sql>
          <![CDATA[
                -- insert missing transcripts of included genes
                insert into ##WDK_CACHE_TABLE## -- query-specific version
                            (wdk_instance_id, wdk_row_id, wdk_weight, source_id, gene_source_id, project_id, matched_result,
                             cds_snp_density, ngs_dn_ds_ratio, ngs_num_synonymous, ngs_num_non_synonymous, num_noncoding,
                             num_nonsense, ngs_total_snps)
                with matches
                     as (select *
                         from ##WDK_CACHE_TABLE##
                         where wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##),
                     row_offset
                     as (select max(wdk_row_id) as the_max from matches),
                     mismatches
                     as (  select source_id, gene_source_id
                           from apidbTuning.transcriptAttributes
                           where gene_source_id in (select gene_source_id from matches)
                         minus
                           select source_id, gene_source_id
                           from matches)
                select ##WDK_CACHE_INSTANCE_ID##,
                       rownum + the_max, 0, mm.source_id, mm.gene_source_id,  '@PROJECT_ID@', 'Y',
                       wct.cds_snp_density, wct.ngs_dn_ds_ratio, wct.ngs_num_synonymous,
                       wct.ngs_num_non_synonymous, wct.num_noncoding, wct.num_nonsense, wct.ngs_total_snps
                from row_offset ro, mismatches mm, ##WDK_CACHE_TABLE## wct
                where mm.gene_source_id = wct.gene_source_id
             ]]>
          </sql>
       </postCacheUpdateSql>

       <testParamValues includeProjects="CryptoDB">
            <paramValue name="ngsSnp_strain_meta">IowaII</paramValue>
        </testParamValues>
        <testParamValues includeProjects="ToxoDB">
            <paramValue name="ngsSnp_strain_meta">GT1</paramValue>
        </testParamValues>
        <testParamValues includeProjects="TriTrypDB">
            <paramValue name="ngsSnp_strain_meta">Tb-927</paramValue>
        </testParamValues>
        <paramRef ref="organismParams.organismSinglePick" displayType="select" queryRef="organismVQ.withNgsSNPdatasets" quote="false" noTranslation="true">
          <help>The organism you choose will determine the organism from which to return genes.  That will also restrict the set of isolates you may choose as SNPs are identified by aligning the reads from those isolates to this genome.</help>
        </paramRef>

        <paramRef ref="snpParams.ngsSnp_strain_meta" quote="false" prompt="Samples"/>
	<paramRef ref="snpParams.WebServicesPath"/>
	<paramRef ref="snpParams.ReadFrequencyPercent" />
	<!-- <paramRef ref="snpParams.MinPercentMinorAlleles" groupRef="snpParamGroupSet.between_isolates"/>
	<paramRef ref="snpParams.MinPercentIsolateCalls" groupRef="snpParamGroupSet.between_isolates"/>  -->
  <paramRef ref="snpParams.MinPercentMinorAlleles" />
	<paramRef ref="snpParams.MinPercentIsolateCalls"  />
        <paramRef ref="geneParams.snp_class"/>
        <paramRef ref="geneParams.occurrences_lower"/>
        <paramRef ref="geneParams.occurrences_upper"/>
        <paramRef ref="geneParams.dn_ds_ratio_lower"/>
        <paramRef ref="geneParams.dn_ds_ratio_upper"/>
        <paramRef ref="geneParams.snp_density_lower"/>
        <paramRef ref="geneParams.snp_density_upper"/>
        <wsColumn name="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="cds_snp_density" columnType="float"/>
        <wsColumn name="ngs_dn_ds_ratio" columnType="float"/>
        <wsColumn name="ngs_num_synonymous" columnType="number"/>
        <wsColumn name="ngs_num_non_synonymous" columnType="number"/>
        <wsColumn name="num_noncoding" columnType="number"/>
        <wsColumn name="num_nonsense" columnType="number"/>
        <wsColumn name="ngs_total_snps" columnType="number"/>
    </processQuery>

  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- SecondaryStructure -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesBySecondaryStructure" includeProjects="CryptoDB,PlasmoDB,GiardiaDB,TrichDB,TriTrypDB,ToxoDB"   >
        <paramRef ref="organismParams.organism"/>
        <paramRef ref="geneParams.min_coil"/>
        <paramRef ref="geneParams.max_coil"/>
        <paramRef ref="geneParams.min_strand"/>
        <paramRef ref="geneParams.max_strand"/>
        <paramRef ref="geneParams.min_helix"/>
        <paramRef ref="geneParams.max_helix"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="project_id"/>
        <column name="matched_result"/>
        <column name="p_coil"/>
        <column name="p_strand"/>
        <column name="p_helix"/> 
        <sql>
            <![CDATA[
            SELECT ta.gene_source_id, ta.source_id, 
            1 * c.percentage as p_coil, 1 * e.percentage as p_strand, 1 * h.percentage as p_helix,
            'Y' as matched_result, '@PROJECT_ID@' as project_id
            FROM dots.SecondaryStructure ss, dots.SecondaryStructureCall c,
                 dots.SecondaryStructureCall e, dots.SecondaryStructureCall h, 
                 ApidbTuning.TranscriptAttributes ta
            WHERE ta.aa_sequence_id = ss.aa_sequence_id
              AND ss.secondary_structure_id = c.secondary_structure_id
              AND ss.secondary_structure_id = e.secondary_structure_id
              AND ss.secondary_structure_id = h.secondary_structure_id
              AND c.structure_type = 'C'
              AND e.structure_type = 'E'
              AND h.structure_type = 'H'
              AND c.percentage between $$min_coil$$ and $$max_coil$$
              AND e.percentage between $$min_strand$$ and $$max_strand$$
              AND h.percentage between $$min_helix$$ and $$max_helix$$
              AND ta.taxon_id IN ($$organism$$)
            ]]>
       </sql>
    </sqlQuery>


    <processQuery name="GenesBySecondaryStructure"
	    includeProjects="EuPathDB"        
		processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="organismParams.organism"/>
        <paramRef ref="geneParams.min_coil"/>
        <paramRef ref="geneParams.max_coil"/>
        <paramRef ref="geneParams.min_strand"/>
        <paramRef ref="geneParams.max_strand"/>
        <paramRef ref="geneParams.min_helix"/>
        <paramRef ref="geneParams.max_helix"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="percent_coil" width="32" wsName="percent_coil"/>
        <wsColumn name="percent_strand" width="32" wsName="percent_strand"/>
        <wsColumn name="percent_helix" width="32" wsName="percent_helix"/>
    </processQuery>


  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- Interpro -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

 <!-- TODO:  wdkSanityTest needs to handle dependent params -->
    <sqlQuery name="GenesByInterproDomain" excludeProjects="EuPathDB" 
	        doNotTest="true">

        <testParamValues includeProjects="CryptoDB,PlasmoDB,ToxoDB,GiardiaDB,TrichDB">
           <paramValue name="domain_database">PRODOM</paramValue>
           <paramValue name="domain_accession">PD001005: ISOMERASE TRIOSEPHOSPHATE TIM BIOSYNTHESIS GLUCONEOGENESIS PENTOSE GLYCOLYSIS SHUNT ACID FATTY</paramValue>
           <paramValue name="domain_wildcard">*kinase*</paramValue>
        </testParamValues>
        <!--TODO-domain accession value is not defined here for PD000018-->
        <testParamValues includeProjects="TriTrypDB">
           <paramValue name="domain_database">PRODOM</paramValue>
           <paramValue name="domain_typehead">PD000018:</paramValue>
           <paramValue name="domain_accession">*kinase*</paramValue>
        </testParamValues>
        <paramRef ref="organismParams.organism"/>
        <paramRef ref="geneParams.domain_database"/>
        <paramRef ref="geneParams.domain_typeahead"/>
        <paramRef ref="geneParams.domain_accession"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <column name="e_value"/>
        <sql>
            <![CDATA[
            SELECT ga.source_id, ga.gene_source_id, 'Y' as matched_result, '@PROJECT_ID@' as project_id,
                   to_char(avg(df.e_value),'9.9EEEE') as e_value
            FROM dots.DomainFeature df, ApidbTuning.TranscriptAttributes ga,
                 dots.DbRefAaFeature draf, sres.DbRef dr
            WHERE ga.aa_sequence_id = df.aa_sequence_id
              AND df.aa_feature_id = draf.aa_feature_id
              AND draf.db_ref_id = dr.db_ref_id
              AND dr.external_database_release_id = $$domain_database$$
              AND (dr.primary_identifier IN($$domain_typeahead$$)
                   OR (dr.secondary_identifier IN($$domain_typeahead$$)
                   OR dr.primary_identifier like REPLACE($$domain_accession$$, '*', '%')
                   OR dr.secondary_identifier like REPLACE($$domain_accession$$, '*', '%')
                   OR dr.primary_identifier || ' : ' || dr.secondary_identifier
                      like REPLACE($$domain_accession$$, '*', '%')
                   OR dr.remark like REPLACE($$domain_accession$$, '*', '%')))
              AND ga.taxon_id IN ($$organism$$)
              GROUP BY ga.source_id,ga.gene_source_id
            ]]>
       </sql>
    </sqlQuery>

    <processQuery name="GenesByInterproDomain" includeProjects="EuPathDB" doNotTest="true"
			processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="organismParams.organism"/>
        <paramRef ref="geneParams.domain_database" quote="false"/>
        <paramRef ref="geneParams.domain_typeahead"  quote="false"/>
        <paramRef ref="geneParams.domain_accession"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="e_value" width="12"/>
    </processQuery>

  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- ESTOverlap -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByESTOverlap" excludeProjects="HostDB,EuPathDB" >

        <testParamValues includeProjects="ToxoDB">
           <paramValue name="libraryIdGenes">TgME49 3 day invitro bradyzoite</paramValue>
        </testParamValues>
        <testParamValues includeProjects="TriTrypDB">
           <paramValue name="libraryIdGenes">TcAM (amastigote-like)</paramValue>
        </testParamValues>

       <paramRef ref="sharedParams.libraryIdGenes"/>
       <paramRef ref="sharedParams.bp_overlap_gte" groupRef="paramGroups.advancedParams"/>
       <paramRef ref="sharedParams.best_alignment_only" groupRef="paramGroups.advancedParams"/>
       <paramRef ref="sharedParams.max_number_best_alignments" groupRef="paramGroups.advancedParams"/>
       <paramRef ref="sharedParams.high_confidence_only" groupRef="paramGroups.advancedParams"/>
       <paramRef ref="sharedParams.min_percent_identity" groupRef="paramGroups.advancedParams"/>
       <paramRef ref="sharedParams.min_percent_est_aligned" groupRef="paramGroups.advancedParams"/>
       <paramRef ref="geneParams.min_number_est_aligned" groupRef="paramGroups.advancedParams"/>

        <column name="project_id"/>
        <column name="source_id" />
        <column name="gene_source_id" />
        <column name="matched_result"/>
        <column name="number_of_ests" />

       <sql>
            <![CDATA[
            SELECT ta.source_id, ta.gene_source_id, 'Y' as matched_result, '@PROJECT_ID@' as project_id, 
              count(*) as number_of_ests
            FROM ApidbTuning.EstAlignmentGeneSummary s, ApidbTuning.EstAttributes e,
              ApidbTuning.TranscriptAttributes ta, apidb.organism o
            WHERE s.est_gene_overlap_length >= $$bp_overlap_gte$$
            AND s.is_consistent in ($$high_confidence_only$$)
            AND s.is_best_alignment in ($$best_alignment_only$$)
            AND s.percent_identity >= $$min_percent_identity$$
            AND s.percent_est_bases_aligned >= $$min_percent_est_aligned$$
            AND s.library_id in ($$libraryIdGenes$$)
            AND s.gene = ta.gene_source_id
            and ta.taxon_id = o.taxon_id
            AND e.source_id = s.accession
            AND e.best_alignment_count <= $$max_number_best_alignments$$
            AND NOT (e.project_id = 'CryptoDB' AND s.accession = 'AA555437')
            GROUP by ta.source_id, ta.gene_source_id
            HAVING count(*) >= $$min_number_est_aligned$$
            ]]>
          </sql>
           <!--  special CASE for CryptoDB incorporated above - check if this is relevant - TO FIX for GUS4
             AA555437 has a gap that spans a huge portion of AAEE01000003,
             causing several genes to be erroneously returned as having overlap  -->
    </sqlQuery>


    <processQuery name="GenesByESTOverlap" includeProjects="EuPathDB"
        processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="sharedParams.libraryIdGenes"/>
        <paramRef ref="sharedParams.max_number_best_alignments" groupRef="paramGroups.advancedParams"/>
        <paramRef ref="geneParams.min_number_est_aligned" groupRef="paramGroups.advancedParams"/>
        <paramRef ref="sharedParams.bp_overlap_gte" groupRef="paramGroups.advancedParams"/>
        <paramRef ref="sharedParams.best_alignment_only" groupRef="paramGroups.advancedParams"/>
        <paramRef ref="sharedParams.high_confidence_only" groupRef="paramGroups.advancedParams"/>
        <paramRef ref="sharedParams.min_percent_identity" groupRef="paramGroups.advancedParams"/>
        <paramRef ref="sharedParams.min_percent_est_aligned" groupRef="paramGroups.advancedParams"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="number_of_ests" width="32" wsName="number_of_ests"/>

    </processQuery>

  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- Dont Care - fake query for internal use -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="DontCare" doNotTest="true" >
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <sql>
            select source_id, project_id, 'Y' as matched_result
            from ApidbTuning.GeneAttributes
            where source_id = 'life_is_sweet' 
        </sql>
    </sqlQuery>
    
    <sqlQuery name="DontCarePlasmoExpression" doNotTest="true" includeProjects="EuPathDB,PlasmoDB" >
        <paramRef ref="geneParams.extraerythrocytic_stages"/>
        <paramRef ref="geneParams.intraerythrocytic_stages" quote="false"/>
        <paramRef ref="geneParams.min_expression_percentile"/>
        <paramRef ref="geneParams.max_expression_percentile"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <column name="max_percentile"/>
        <column name="min_percentile"/>
        <sql>
            select '' as source_id, '' as project_id, 'Y' as matched_result, '' as max_percentile, '' as min_percentile from dual
        </sql>
    </sqlQuery>


  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- Query that retrieves all genes by organism -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GeneDumpQuery"  excludeProjects="EuPathDB">
        <paramRef ref="organismParams.gff_organism" queryRef="organismVQ.withGenesGFF"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <sql>
            <![CDATA[
                SELECT source_id AS source_id, 'Y' as matched_result,
                       '@PROJECT_ID@' as project_id
                FROM ApidbTuning.GeneAttributes
                WHERE taxon_id IN ($$gff_organism$$)
                  AND project_id = '@PROJECT_ID@'
            ]]>
        </sql>
    </sqlQuery>

  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!--  plasmoDB 4.4 dataset-->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByPlasmoDbDataset" doNotTest="true" includeProjects="PlasmoDB"   >
        <paramRef ref="geneParams.plasmodb_4-4_dataset"/>
        <column name="project_id"/>
        <column name="source_id"  />
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <sql>
            <!-- keep order or genes but remove duplicates -->
            <![CDATA[
                SELECT imported.source_id, 'Y' as matched_result, '@PROJECT_ID@' as project_id FROM (
                    SELECT ga.gene AS source_id, min(c.i) AS i
                    FROM cache$$plasmodb_4-4_dataset$$@apidb.cbilprod c,
                         apidb.plasmodb_genes@apidb.cbilprod pg,
                         ApidbTuning.GeneId ga
                    WHERE c.na_feature_id = pg.na_feature_id
                      AND lower(pg.source_id) = lower(ga.id)
                      AND ga.unique_mapping = 1
                    GROUP BY ga.gene) imported
                ORDER BY i
           ]]>
       </sql>
    </sqlQuery>

  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- Y2H Protein protein interaction -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByProteinProteinInteraction" includeProjects="PlasmoDB,FungiDB" >
        <paramRef ref="geneParams.single_gene_id" default="PF3D7_1205500" includeProjects="PlasmoDB"/>
        <paramRef ref="geneParams.single_gene_id" default="YGR120C" includeProjects="FungiDB"/>
        <paramRef ref="geneParams.min_searches"/>
        <paramRef ref="geneParams.min_observed"/>
        <paramRef ref="geneParams.bait_or_prey"/>
        <column name="project_id"/>
        <column name="source_id" />
        <column name="gene_source_id" />
        <column name="matched_result"/>
        <column name="interact_source_id" />
        <column name="bait_start" />
        <column name="bait_end" />
        <column name="prey_start" />
        <column name="prey_end" />
        <column name="times_observed" />
        <column name="number_of_searches" />
        <column name="prey_number_of_baits" />
        <column name="bait_number_of_preys" />
        <column name="bait_or_prey" />
        <sql>
            <![CDATA[
SELECT q.*, 'Y' as matched_result FROM
               (SELECT pf.gene_source_id, pf.source_id, '@PROJECT_ID@' as project_id, pf.gene_source_id as interact_source_id, bait_start, bait_end, prey_start, prey_end,
                       times_observed, number_of_searches,
                       (select distinct prey_number_of_baits
                         from apidb.geneinteraction igi
                         where igi.bait_gene_feature_id = pf.gene_na_feature_id) AS prey_number_of_baits,
                       bait_number_of_preys, 'bait' as bait_or_prey
                FROM ApidbTuning.GeneId ga, ApidbTuning.TranscriptAttributes bf, ApidbTuning.TranscriptAttributes pf,
                     apidb.GeneInteraction gi
                WHERE lower($$single_gene_id$$) = lower(ga.id)
                  AND ga.gene = bf.gene_source_id
                  AND gi.number_of_searches >= $$min_searches$$
                  AND gi.times_observed >= $$min_observed$$
                  AND bf.gene_na_feature_id = gi.bait_gene_feature_id
                  AND gi.prey_gene_feature_id = pf.gene_na_feature_id
                UNION
                SELECT bf.gene_source_id, bf.source_id, '@PROJECT_ID@' as project_id, bf.gene_source_id as interact_source_id, bait_start, bait_end, prey_start, prey_end,
                       times_observed, number_of_searches, prey_number_of_baits,
                       (select distinct bait_number_of_preys
                         from apidb.geneinteraction igi
                         where igi.prey_gene_feature_id = bf.gene_na_feature_id) AS bait_number_of_preys, 'prey' as bait_or_prey
                FROM ApidbTuning.GeneId ga, ApidbTuning.TranscriptAttributes bf, ApidbTuning.TranscriptAttributes pf,
                     apidb.GeneInteraction gi
                WHERE lower($$single_gene_id$$) = lower(ga.id)
                  AND ga.gene = pf.gene_source_id
                  AND gi.number_of_searches >= $$min_searches$$
                  AND gi.times_observed >= $$min_observed$$
                  AND bf.gene_na_feature_id = gi.bait_gene_feature_id
                  AND gi.prey_gene_feature_id = pf.gene_na_feature_id
                  ) q
            WHERE ($$bait_or_prey$$ = bait_or_prey
            OR $$bait_or_prey$$ = 'either')
           ]]>
       </sql>
    </sqlQuery>

    <processQuery name="GenesByProteinProteinInteraction" includeProjects="EuPathDB"
                        processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="geneParams.single_gene_id" default="PFL0275w" noTranslation="true"/>
        <paramRef ref="geneParams.min_searches"/>
        <paramRef ref="geneParams.min_observed"/>
        <paramRef ref="geneParams.bait_or_prey" quote="false"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="bait_start" width="32"/>
        <wsColumn name="bait_end" width="32"/>
        <wsColumn name="prey_start" width="32"/>
        <wsColumn name="prey_end" width="32"/>
        <wsColumn name="times_observed" width="32"/>
        <wsColumn name="number_of_searches" width="32"/>
        <wsColumn name="prey_number_of_baits" width="32"/>
        <wsColumn name="bait_number_of_preys" width="32"/>
        <wsColumn name="bait_or_prey" width="32"/>
    </processQuery>

  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- Expression Percentiles ToxoDB -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <sqlQuery name="GenesByGenericPercentile" includeProjects="AmoebaDB,CryptoDB,ToxoDB,TriTrypDB,FungiDB,PlasmoDB,PiroplasmaDB,GiardiaDB,MicrosporidiaDB,HostDB">

        <testParamValues>
         <paramValue name="samples_percentile_generic" selectMode="first"/>
        </testParamValues>

        <paramRef ref="geneParams.profileset_generic"/>
        <paramRef ref="geneParams.samples_percentile_generic"/>
        <paramRef ref="geneParams.min_expression_percentile" default="80"/>
        <paramRef ref="geneParams.max_expression_percentile" default="100"/>
        <paramRef ref="geneParams.any_or_all"/>
        <paramRef ref="geneParams.protein_coding_only"/>
        <paramRef ref="geneParams.channel"/>
        <column name="project_id"/>
        <column name="source_id" />
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <column name="max_percentile_chosen" />
        <column name="min_percentile_chosen" />
        <sql>
            <![CDATA[
	    SELECT ta.gene_source_id, ta.source_id, 'Y' as matched_result,
                   '@PROJECT_ID@' as project_id,
                   max(round(profile_min_max.max_value, 1)) as max_percentile_chosen,
                   min(round(profile_min_max.min_value, 1)) as min_percentile_chosen
            FROM ( SELECT res.na_feature_id, res.protocol_app_node_id  
	        FROM study.studylink sl, study.protocolappnode pan, results.nafeatureexpression res
		WHERE sl.protocol_app_node_id = pan.protocol_app_node_id
		AND pan.protocol_app_node_id in ($$samples_percentile_generic$$)
		AND pan.protocol_app_node_id = res.protocol_app_node_id
		AND res.percentile_channel1 BETWEEN 80 AND 100
		GROUP BY res.na_feature_id, res.protocol_app_node_id
            ) profile, 
	    ApidbTuning.TranscriptAttributes ta,
	    ( SELECT res.na_feature_id, min(res.percentile_channel1) as  min_value, 
	            max(res.percentile_channel1) as max_value
		FROM study.studylink sl, study.protocolappnode pan, results.nafeatureexpression res
		WHERE sl.protocol_app_node_id = pan.protocol_app_node_id
		AND pan.protocol_app_node_id in ($$samples_percentile_generic$$)
		AND pan.protocol_app_node_id = res.protocol_app_node_id
		AND res.percentile_channel1 BETWEEN 80 AND 100
		GROUP BY res.na_feature_id
            ) profile_min_max
	    WHERE ta.gene_na_feature_id = PROFILE.na_feature_id
	    AND ta.gene_na_feature_id = profile_min_max.na_feature_id
	    AND ( 'protein coding' = 'no' OR ta.gene_type = 'protein coding' )
	    GROUP BY ta.gene_source_id,ta.source_id
	    HAVING 'any' = 'any' OR count(*) = (SELECT count(*) AS total FROM study.protocolappnode WHERE protocol_app_node_id IN ( $$samples_percentile_generic$$ ))
            ]]>
          </sql>
    </sqlQuery>

    <processQuery name="GenesByGenericPercentile" includeProjects="EuPathDB"  
        displayName="By Expression Percentile" doNotTest="true"
        processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="geneParams.profileset_generic"/>
        <paramRef ref="geneParams.samples_percentile_generic"/>
        <paramRef ref="geneParams.min_expression_percentile" default="80"/>
        <paramRef ref="geneParams.max_expression_percentile" default="100"/>
        <paramRef ref="geneParams.any_or_all"/>
        <paramRef ref="geneParams.protein_coding_only" quote="false"/>
        <paramRef ref="geneParams.channel"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="min_percentile_chosen" width="32" wsName="min_percentile_chosen"/>
        <wsColumn name="max_percentile_chosen" width="32" wsName="max_percentile_chosen"/>
    </processQuery>


  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- Expression Timing -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByeQTLHaploGrpSimilarity" includeProjects="PlasmoDB"    >

        <paramRef ref="geneParams.pf_gene_id" default="PF3D7_0523000"/>
        <paramRef ref="geneParams.lod_score" default="1.5"/>
        <paramRef ref="geneParams.percentage_sim_haploblck"/>
        <!-- <paramRef ref="geneParams.any_or_all_hpgrp"/> -->
        <column name="project_id"/>
        <column name="gene_source_id"/>
        <column name="source_id"/>
        <column name="matched_result"/>
        <column name="lod_score"/>
        <column name="cut_off_score"/>
      <sql>
          <![CDATA[
select q.*,ta.source_id, 'Y' as matched_result from (
SELECT a.gene_source_id, 'PlasmoDB' as project_id, a.lod_score, b.cut_off_score
        FROM
            (SELECT gene_source_id, max(lod_score) as lod_score
             FROM   (select ga.gene_source_id,
                           CASE WHEN (gls.LOD_SCORE_EXP = 0) THEN to_char(gls.LOD_SCORE_MANT)
                           ELSE to_char(to_binary_double(gls.LOD_SCORE_MANT|| 'e' || gls.LOD_SCORE_EXP),'99.99EEEE') 
                           END as lod_score
                    from   apidbTuning.transcriptattributes ga, apidb.nafeaturehaploblock  gls
                    where  gls.na_feature_id = ga.gene_na_feature_id
                    and    to_binary_double(gls.LOD_SCORE_MANT || 'e' || gls.LOD_SCORE_EXP) >= $$lod_score$$
                    and    lower(ga.gene_source_id) != lower($$pf_gene_id$$)
                    and    gls.HAPLOTYPE_BLOCK_NAME in (
                           select distinct HAPLOTYPE_BLOCK_NAME 
                           from   apidbTuning.transcriptattributes ga, apidb.nafeaturehaploblock  gls
                           where  gls.na_feature_id = ga.gene_na_feature_id 
                           and lower(ga.gene_source_id) = lower($$pf_gene_id$$) 
                           and to_binary_double(LOD_SCORE_MANT || 'e' || LOD_SCORE_EXP) >= $$lod_score$$))
             GROUP BY gene_source_id
             HAVING ((count(*)*100)/(select count(*) 
                                    from apidbTuning.transcriptattributes ga, apidb.nafeaturehaploblock gls
                                    where  gls.na_feature_id = ga.gene_na_feature_id 
                                    and lower(ga.gene_source_id) = lower($$pf_gene_id$$)
                                    and to_binary_double(LOD_SCORE_MANT || 'e' || LOD_SCORE_EXP) >= $$lod_score$$)) >= $$percentage_sim_haploblck$$
            ) a,
            (Select max(cut_off) as cut_off_score, gene_source_id from  (select CASE WHEN (gls.LOD_SCORE_EXP = 0) THEN to_char(gls.LOD_SCORE_MANT)
                           ELSE to_char(to_binary_double(gls.LOD_SCORE_MANT|| 'e' || gls.LOD_SCORE_EXP),'99.99EEEE') 
                           END as cut_off, ga.gene_source_id 
                           from apidbTuning.transcriptattributes ga, apidb.nafeaturehaploblock gls
                           where  gls.na_feature_id = ga.gene_na_feature_id 
                           and lower(ga.gene_source_id) = lower($$pf_gene_id$$) 
                           and to_binary_double(LOD_SCORE_MANT || 'e' || LOD_SCORE_EXP) >= $$lod_score$$)
                           group by gene_source_id
            ) b
            WHERE a.gene_source_id != b.gene_source_id) q, apidbtuning.transcriptattributes ta
            where ta.gene_source_id = q.gene_source_id
         ]]>
      </sql>

    </sqlQuery>

    <processQuery name="GenesByeQTLHaploGrpSimilarity" includeProjects="EuPathDB"
        processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">

        <paramRef ref="geneParams.pf_gene_id" default="PFE1150w"/>
        <paramRef ref="geneParams.lod_score" default="1.5"/>
        <paramRef ref="geneParams.percentage_sim_haploblck"/>
        <!-- <paramRef ref="geneParams.any_or_all_hpgrp"/> -->
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="lod_score" wsName="lod_score"/>
        <wsColumn name="cut_off_score" wsName="cut_off_score"/>
    </processQuery>



    <sqlQuery name="GenesByeQTLSegments" includeProjects="PlasmoDB"   >

        <paramRef ref="sharedParams.pf_seqid"/>
        <paramRef ref="sharedParams.start_point" default="11180"/>
        <paramRef ref="sharedParams.end_point_segment" default="1120683"/>
        <paramRef ref="geneParams.lod_score" default="1.5"/>
        <paramRef ref="geneParams.liberal_conservative"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <column name="lod_score"/>
      <sql>
          <![CDATA[
           SELECT gene_source_id,source_id, '@PROJECT_ID@' as project_id, 'Y' as matched_result, max(lod_score) as lod_score
           FROM   (SELECT  distinct ga.source_id, ga.gene_source_id,
                          CASE WHEN (gls.LOD_SCORE_EXP = 0) THEN to_char(gls.LOD_SCORE_MANT)
                               ELSE to_char(to_binary_double(gls.LOD_SCORE_MANT|| 'e' || gls.LOD_SCORE_EXP),'99.99EEEE') 
                          END as lod_score
                   FROM   dots.chromosomeelementfeature  cef, apidb.nafeaturehaploblock gls, 
                          apidbTuning.transcriptattributes ga, dots.externalnasequence ens, dots.nalocation nl  
                   WHERE  ens.source_id = $$pf_seqid$$  
                   AND  cef.na_sequence_id = ens.na_sequence_id 
                   AND  nl.na_feature_id = cef.na_feature_id 
                   AND (($$liberal_conservative$$ = 'liberal' and nl.start_min <= $$end_point_segment$$  and nl.end_max >= $$start_point$$) 
                         OR ($$liberal_conservative$$ = 'conservative' and nl.start_max <= $$end_point_segment$$  and nl.end_min >= $$start_point$$))	
                   AND cef.name = gls.haplotype_block_name 
                   AND gls.na_feature_id = ga.gene_na_feature_id
                   AND to_binary_double(gls.LOD_SCORE_MANT || 'e' || gls.LOD_SCORE_EXP) >= $$lod_score$$)
           GROUP BY gene_source_id,source_id
          ]]>
      </sql>

    </sqlQuery>

    <processQuery name="GenesByeQTLSegments" includeProjects="EuPathDB"
        processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">

        <paramRef ref="sharedParams.pf_seqid" quote="false" />
        <paramRef ref="sharedParams.start_point" default="11180"/>
        <paramRef ref="sharedParams.end_point_segment" default="1120683"/>
        <paramRef ref="geneParams.lod_score" default="1.5"/>
        <paramRef ref="geneParams.liberal_conservative" />
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="lod_score" wsName="lod_score"/>
    </processQuery>





    <sqlQuery name="GenesByGenericFoldChangeWithConfidence" includeProjects="AmoebaDB,ToxoDB,FungiDB,PlasmoDB,PiroplasmaDB,GiardiaDB,TriTrypDB"  >

    <testParamValues>
      <paramValue name="samples_fc_ref_generic" selectMode="all"/>
      <paramValue name="samples_fc_comp_generic" selectMode="first"/>
    </testParamValues>

      <paramRef ref="geneParams.profileset_generic"/>
      <paramRef ref="geneParams.regulated_dir"/>
      <paramRef ref="geneParams.samples_fc_ref_generic"/>
      <paramRef ref="geneParams.samples_fc_comp_generic"/>
      <paramRef ref="geneParams.fold_change"/>
      <paramRef ref="geneParams.confidence"/>
      <paramRef ref="geneParams.protein_coding_only"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <column name="confidence"/>
        <column name="fold_change"/>
        <column name="group_one_value"/>
        <column name="group_two_value"/>

      <sqlParamValue name="isLogged">1</sqlParamValue>
      <sqlParamValue name="shift">1</sqlParamValue>
      <sql>
      <![CDATA[
                       select distinct grp1.source_id, 'Y' as matched_result,
                         '@PROJECT_ID@' as project_id,
                       de.confidence as confidence,
                       round((CASE WHEN grp1.value / grp2.value >= 1
                                  THEN grp1.value / grp2.value
                                  ELSE -1 * (grp2.value  / grp1.value)
                                  END),1) as fold_change,
                       round(grp1.value,1) as group_one_value,
                       round(grp2.value,1) as group_two_value
                from   (select    p.source_id,
                                  pen.profile_element_name_id,
                                  CASE WHEN &&isLogged&& != 1 THEN pe.value + &&shift&& ELSE power(2, pe.value) END as value
                        from      apidb.profileelementname pen, apidb.profile p, apidb.profileelement pe
                        where     pen.profile_element_name_id = $$samples_fc_comp_generic$$
                        and       p.profile_set_id = pen.profile_set_id
                        and       pe.profile_id = p.profile_id
                        and       pe.profile_element_name_id = pen.profile_element_name_id) grp1,
                       (select    p.source_id,
                                  pen.profile_element_name_id,
                                  CASE WHEN &&isLogged&& != 1 THEN pe.value + &&shift&& ELSE power(2, pe.value) END as value
                        from      apidb.profileelementname pen, 
                                  apidb.profile p, apidb.profileelement pe,
                                  apidb.profileset ps
                        where     pen.profile_element_name_id = $$samples_fc_ref_generic$$
                        and       p.profile_set_id = pen.profile_set_id
                        and       pe.profile_id = p.profile_id
                        and       ps.profile_set_id = p.profile_set_id
                        and       pe.profile_element_name_id = pen.profile_element_name_id) grp2,
                       rad.logicalgrouplink lgl1,
                       rad.logicalgrouplink lgl2,   
                       ApidbTuning.GeneAttributes ga,
                       rad.analysisinput ai, 
                       rad.differentialexpression de
                where grp1.profile_element_name_id = lgl1.row_id
                and   grp2.profile_element_name_id = lgl2.row_id
                and   grp1.source_id = grp2.source_id
                and   ga.source_id = grp2.source_id
                and   lgl1.logical_group_id = lgl2.logical_group_id
                and   ai.logical_group_id = lgl1.logical_group_id
                and   ai.analysis_id = de.analysis_id
                and   de.row_id = ga.na_feature_id
                and   ($$protein_coding_only$$ = 'no' OR ga.gene_type = $$protein_coding_only$$) 
                and   (de.confidence is null or de.confidence >= $$confidence$$)
                and   ($$regulated_dir$$ (grp1.value / grp2.value)  >= $$fold_change$$
                      OR $$regulated_dir$$ (-(grp2.value / grp1.value)) >= $$fold_change$$)
   ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesByGenericFoldChangeWithConfidence" includeProjects="EuPathDB"
        processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" doNotTest="true">
        <paramRef ref="geneParams.profileset_generic"/>
        <paramRef ref="geneParams.regulated_dir"/>
        <paramRef ref="geneParams.samples_fc_ref_generic"/>
        <paramRef ref="geneParams.samples_fc_comp_generic"/>
        <paramRef ref="geneParams.fold_change"/>
        <paramRef ref="geneParams.confidence"/>
        <paramRef ref="geneParams.protein_coding_only" quote="false"/>
     
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="confidence" wsName="confidence"/>
        <wsColumn name="fold_change" wsName="fold_change"/>
        <wsColumn name="group_one_value" wsName="group_one_value"/>
        <wsColumn name="group_two_value" wsName="group_two_value"/>
    </processQuery>				


    <sqlQuery name="GenesByGenericFoldChangeWithFDR" includeProjects="AmoebaDB,ToxoDB,FungiDB,PlasmoDB,PiroplasmaDB,GiardiaDB,TriTrypDB"  >

    <testParamValues>
      <paramValue name="samples_fc_ref_generic" selectMode="all"/>
      <paramValue name="samples_fc_comp_generic" selectMode="first"/>
    </testParamValues>

      <paramRef ref="geneParams.profileset_generic"/>
      <paramRef ref="geneParams.regulated_dir"/>
      <paramRef ref="geneParams.samples_fc_ref_generic"/>
      <paramRef ref="geneParams.samples_fc_comp_generic"/>
      <paramRef ref="geneParams.fold_change"/>
      <paramRef ref="geneParams.false_discovery_rate"/>
      <paramRef ref="geneParams.protein_coding_only"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <column name="false_discovery_rate"/>
        <column name="fold_change"/>
        <column name="group_one_value"/>
        <column name="group_two_value"/>

      <sqlParamValue name="isLogged">1</sqlParamValue>
      <sqlParamValue name="shift">1</sqlParamValue>

      <sql>
      <![CDATA[
                       select distinct grp1.source_id, 'Y' as matched_result,
                         '@PROJECT_ID@' as project_id,
                       de.false_discovery_rate as false_discovery_rate,
                       round((CASE WHEN grp1.value / grp2.value >= 1
                                  THEN grp1.value / grp2.value
                                  ELSE -1 * (grp2.value  / grp1.value)
                                  END),1) as fold_change,
                       round(grp1.value,1) as group_one_value,
                       round(grp2.value,1) as group_two_value
                from   (select    p.source_id,
                                  pen.profile_element_name_id,
                                  CASE WHEN &&isLogged&& != 1 THEN pe.value + &&shift&& ELSE power(2, pe.value) END as value
                        from      apidb.profileelementname pen, apidb.profile p, apidb.profileelement pe
                        where     pen.profile_element_name_id = $$samples_fc_comp_generic$$
                        and       p.profile_set_id = pen.profile_set_id
                        and       pe.profile_id = p.profile_id
                        and       pe.profile_element_name_id = pen.profile_element_name_id) grp1,
                       (select    p.source_id,
                                  pen.profile_element_name_id,
                                  CASE WHEN &&isLogged&& != 1 THEN pe.value + &&shift&& ELSE power(2, pe.value) END as value
                        from      apidb.profileelementname pen, 
                                  apidb.profile p, apidb.profileelement pe,
                                  apidb.profileset ps
                        where     pen.profile_element_name_id = $$samples_fc_ref_generic$$
                        and       p.profile_set_id = pen.profile_set_id
                        and       pe.profile_id = p.profile_id
                        and       ps.profile_set_id = p.profile_set_id
                        and       pe.profile_element_name_id = pen.profile_element_name_id) grp2,
                       rad.logicalgrouplink lgl1,
                       rad.logicalgrouplink lgl2,   
                       ApidbTuning.GeneAttributes ga,
                       rad.analysisinput ai, 
                       rad.differentialexpression de
                where grp1.profile_element_name_id = lgl1.row_id
                and   grp2.profile_element_name_id = lgl2.row_id
                and   grp1.source_id = grp2.source_id
                and   ga.source_id = grp2.source_id
                and   lgl1.logical_group_id = lgl2.logical_group_id
                and   ai.logical_group_id = lgl1.logical_group_id
                and   ai.analysis_id = de.analysis_id
                and   de.row_id = ga.na_feature_id
                and   ($$protein_coding_only$$ = 'no' OR ga.gene_type = $$protein_coding_only$$) 
                and   (de.false_discovery_rate is null or de.false_discovery_rate >= $$false_discovery_rate$$)
                and   ($$regulated_dir$$ (grp1.value / grp2.value)  >= $$fold_change$$
                      OR $$regulated_dir$$ (-(grp2.value / grp1.value)) >= $$fold_change$$)
   ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesByGenericFoldChangeWithFDR" includeProjects="EuPathDB"
        processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" doNotTest="true">
        <paramRef ref="geneParams.profileset_generic"/>
        <paramRef ref="geneParams.regulated_dir"/>
        <paramRef ref="geneParams.samples_fc_ref_generic"/>
        <paramRef ref="geneParams.samples_fc_comp_generic"/>
        <paramRef ref="geneParams.fold_change"/>
        <paramRef ref="geneParams.false_discovery_rate"/>
        <paramRef ref="geneParams.protein_coding_only" quote="false"/>
     
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="false_discovery_rate" wsName="false_discovery_rate"/>
        <wsColumn name="fold_change" wsName="fold_change"/>
        <wsColumn name="group_one_value" wsName="group_one_value"/>
        <wsColumn name="group_two_value" wsName="group_two_value"/>
    </processQuery>				
						   

    <sqlQuery name="GenesByGenericFoldChange" includeProjects="AmoebaDB,ToxoDB,TriTrypDB,FungiDB,CryptoDB,PlasmoDB,PiroplasmaDB,GiardiaDB,MicrosporidiaDB,HostDB"  >

      <testParamValues>
        <paramValue name="samples_fc_ref_generic" selectMode="all"/>
        <paramValue name="samples_fc_comp_generic" selectMode="first"/>
      </testParamValues>

      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.profileset_generic"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.regulated_dir"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.samples_fc_ref_generic"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.min_max_avg_ref"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.samples_fc_comp_generic"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.min_max_avg_comp"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.fold_change"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.protein_coding_only"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <column name="fold_change_avg"/>
        <column name="fold_change_chosen"/>
        <column name="avg_group_one"/>
        <column name="avg_group_two"/>
        <column name="max_group_one"/>
        <column name="max_group_two"/>
        <column name="min_group_one"/>
        <column name="min_group_two"/>
        <column name="median_group_one"/>
        <column name="median_group_two"/>
        <column name="chose_group_one"/>
        <column name="chose_group_two"/>

      <sqlParamValue includeProjects="CryptoDB" name="isLogged">0</sqlParamValue>
      <sqlParamValue includeProjects="CryptoDB" name="shift">0.01</sqlParamValue>
      <sqlParamValue excludeProjects="CryptoDB" name="isLogged">1</sqlParamValue>
      <sqlParamValue excludeProjects="CryptoDB" name="shift">0.0001</sqlParamValue>
   
      <sql>
      <![CDATA[
      select ga.source_id, ga.gene_source_id, 'Y' as matched_result,
             '@PROJECT_ID@' as project_id,
             round((CASE WHEN one.average / (two.average + &&shift&&) >= 1
                         THEN one.average / (two.average + &&shift&&)
                         ELSE -1 * (two.average  / (one.average + &&shift&&))
                     END), 1) as fold_change_avg,
             round((CASE WHEN one.chosen / two.chosen >= 1
                         THEN one.chosen / two.chosen
                         ELSE -1 * (two.chosen / one.chosen) 
                     END), 1) as fold_change_chosen,
             round(decode(one.average, 0, 0, log(2, one.average)), 2) as avg_group_one,
             round(decode(two.average, 0, 0, log(2, two.average)), 2) as avg_group_two,
             round(decode(one.maximum, 0, 0, log(2, one.maximum)), 2) as max_group_one,
             round(decode(two.maximum, 0, 0, log(2, two.maximum)), 2) as max_group_two,
             round(decode(one.minimum, 0, 0, log(2, one.minimum)), 2) as min_group_one,
             round(decode(two.minimum, 0, 0, log(2, two.minimum)), 2) as min_group_two,
             round(decode(one.median, 0, 0, log(2, one.median)), 2) as median_group_one,
             round(decode(two.median, 0, 0, log(2, two.median)), 2) as median_group_two,
             round(decode(one.chosen, 0, 0, log(2, one.chosen)), 2) as chose_group_one,
             round(decode(two.chosen, 0, 0, log(2, two.chosen)), 2) as chose_group_two
      from ( SELECT res.na_feature_id,
                    CASE WHEN &&isLogged&& = 1 AND $$min_max_avg_comp$$ = 'minimum'
                         THEN power(2, min(res.value))
                         WHEN &&isLogged&& = 1 AND $$min_max_avg_comp$$ = 'maximum'
                         THEN power(2, max(res.value))
                         WHEN &&isLogged&& = 1 AND $$min_max_avg_comp$$ = 'average'
                         THEN power(2, avg(res.value))
                         WHEN &&isLogged&& = 0 AND $$min_max_avg_comp$$ = 'minimum'
                         THEN min(res.value) + &&shift&&
                         WHEN &&isLogged&& = 0 AND $$min_max_avg_comp$$ = 'maximum'
                         THEN max(res.value) + &&shift&&
                         WHEN &&isLogged&& = 0 AND $$min_max_avg_comp$$ = 'average'
                         THEN avg(res.value) + &&shift&&
                         WHEN &&isLogged&& = 0 AND $$min_max_avg_comp$$ = 'median'
                         THEN median(res.value) + &&shift&&
                    END  as chosen,
                    decode(&&isLogged&&, 1, power(2, avg(res.value)), avg(res.value)) as average,
                    decode(&&isLogged&&, 1, power(2, max(res.value)), max(res.value)) as maximum,
                    decode(&&isLogged&&, 1, power(2, min(res.value)), min(res.value)) as minimum,
                    decode(&&isLogged&&, 1, power(2, median(res.value)), median(res.value)) as median
             FROM study.studylink sl, study.protocolappnode pan, results.nafeatureexpression res
             WHERE sl.protocol_app_node_id = pan.protocol_app_node_id
	     AND pan.protocol_app_node_id in ($$samples_fc_comp_generic$$)
	     AND pan.protocol_app_node_id = res.protocol_app_node_id
             GROUP BY res.na_feature_id ) one,
           ( SELECT res.na_feature_id,
                    CASE WHEN &&isLogged&& = 1 AND $$min_max_avg_ref$$ = 'minimum'
                         THEN power(2, min(res.value))
                         WHEN &&isLogged&& = 1 AND $$min_max_avg_ref$$ = 'maximum'
                         THEN power(2, max(res.value))
                         WHEN &&isLogged&& = 1 AND $$min_max_avg_ref$$ = 'average'
                         THEN power(2, avg(res.value))
                         WHEN &&isLogged&& != 1 AND $$min_max_avg_ref$$ = 'minimum'
                         THEN min(res.value) + &&shift&&
                         WHEN &&isLogged&& != 1 AND $$min_max_avg_ref$$ = 'maximum'
                         THEN max(res.value) + &&shift&&
                         WHEN &&isLogged&& != 1 AND $$min_max_avg_ref$$ = 'average'
                         THEN avg(res.value) + &&shift&&
                         WHEN &&isLogged&& != 1 AND $$min_max_avg_ref$$ = 'median'
                         THEN median(res.value) + &&shift&&
                    END  as chosen,
                    decode(&&isLogged&&, 1, power(2, avg(res.value)), avg(res.value)) as average,
                    decode(&&isLogged&&, 1, power(2, max(res.value)), max(res.value)) as maximum,
                    decode(&&isLogged&&, 1, power(2, min(res.value)), min(res.value)) as minimum,
                    decode(&&isLogged&&, 1, power(2, median(res.value)), median(res.value)) as median
             FROM study.studylink sl, study.protocolappnode pan, results.nafeatureexpression res
             WHERE sl.protocol_app_node_id = pan.protocol_app_node_id
	     AND pan.protocol_app_node_id in  ($$samples_fc_ref_generic$$)
	     AND pan.protocol_app_node_id = res.protocol_app_node_id
             GROUP BY res.na_feature_id) two,  
           ApidbTuning.TranscriptAttributes ga
      where one.na_feature_id = two.na_feature_id
        and ga.gene_na_feature_id = one.na_feature_id 
        and ga.gene_na_feature_id = two.na_feature_id 
        and ( $$protein_coding_only$$ = 'no' OR ga.gene_type = $$protein_coding_only$$ )
        and ($$regulated_dir$$ ( one.chosen / two.chosen)  >= $$fold_change$$
          OR $$regulated_dir$$ (-(two.chosen / one.chosen)) >= $$fold_change$$)
      ]]>
      </sql>

    </sqlQuery>

    <processQuery name="GenesByGenericFoldChange" includeProjects="EuPathDB"
        processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" doNotTest="true">
        <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.profileset_generic" quote="false"/>
        <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.regulated_dir"/>
        <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.samples_fc_ref_generic" quote="false"/>
        <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.min_max_avg_ref"/>
        <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.samples_fc_comp_generic"/>
        <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.min_max_avg_comp"/>
        <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.fold_change"/>
        <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.protein_coding_only"  quote="false"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="fold_change_avg" wsName="fold_change_avg"/>
        <wsColumn name="fold_change_chosen" wsName="fold_change_chosen"/>
        <wsColumn name="avg_group_one" wsName="avg_group_one"/>
        <wsColumn name="avg_group_two" wsName="avg_group_two"/>
        <wsColumn name="max_group_one" wsName="max_group_one"/>
        <wsColumn name="max_group_two" wsName="max_group_two"/>
        <wsColumn name="min_group_one" wsName="min_group_one"/>
        <wsColumn name="min_group_two" wsName="min_group_two"/>
        <wsColumn name="chose_group_one" wsName="chose_group_one"/>
        <wsColumn name="chose_group_two" wsName="chose_group_two"/>
    </processQuery>

    <sqlQuery name="GenesByTTestWithMetadata" includeProjects="PlasmoDB"  >

      <paramRef groupRef="paramGroups.dynamicParams" ref="sharedParams.metadata_datasets" quote="false"
                queryRef="SharedVQ.ComptonDataset" visible="false"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="sharedParams.ref_samples_filter_metadata" quote="false"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="sharedParams.comp_samples_filter_metadata" quote="false"/>
      <paramRef ref="geneParams.regulated_dir_immune_response" quote="false"/>
      <paramRef ref="geneParams.p_value" default="0.05"/>
      <!-- <paramRef groupRef="paramGroups.dynamicParams" ref="sharedParams.metadata_for_graph" quote="false"/> -->

      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>
      <column name="p_value" sortingColumn="sorting_p_value"/>
      <column name="sorting_p_value"/>
      <column name="avg_group_one"/>
      <column name="avg_group_two"/>

      <sqlParamValue includeProjects="PlasmoDB" name="isLogged">0</sqlParamValue>
      <sqlParamValue includeProjects="PlasmoDB" name="lowerBound">0.0001</sqlParamValue>
      <sqlParamValue includeProjects="PlasmoDB" name="function">'log2'</sqlParamValue>
      <sql>
      <![CDATA[
select ta.source_id, ta.gene_source_id, '@PROJECT_ID@' as project_id, 'Y' as matched_result,
       round(case 
               when (avg_comp / avg_ref) >= 1
                 then (avg_comp / avg_ref)
               else (-1 / (avg_comp / avg_ref))
             end, 6) as difference,
       round(case
               when lower(&&function&&) = 'arcsinh'
                 then apidb.arcsinh(avg_comp)
               when lower(&&function&&) = 'linear'
                 then avg_comp
               else log(2, avg_comp)
             end, 6) as avg_group_one,
       round(case
               when lower(&&function&&) = 'arcsinh'
                 then apidb.arcsinh(avg_ref)
               when lower(&&function&&) = 'linear'
                 then avg_ref
               else log(2, avg_ref)
             end, 6) as avg_group_two,
       to_char( p_value, '9.99EEEE') as p_value,
       p_value sorting_p_value
from apidbTuning.transcriptAttributes ta,
     (select na_feature_id,
             round(avg(decode(source_set, 'ref', reported_value, null)), 3) avg_ref,
             round(avg(decode(source_set, 'comp', reported_value, null)), 3) avg_comp,
             stats_t_test_indepu(source_set, reported_value) p_value
      from (  select na_feature_id, avg(power(2, value)) as reported_value, 'ref' as source_set
              from results.NaFeatureHostResponse
              where protocol_app_node_id in ($$ref_samples_filter_metadata$$)
              group by na_feature_id, protocol_app_node_id
            union
              select na_feature_id, avg(power(2, value)) as reported_value, 'comp' as source_set
              from results.NaFeatureHostResponse
              where protocol_app_node_id in ($$comp_samples_filter_metadata$$)
              group by na_feature_id, protocol_app_node_id
           )
      group by na_feature_id) one
where one.na_feature_id = ta.gene_na_feature_id
  and p_value <= $$p_value$$
  and ('$$regulated_dir_immune_response$$' = 'increased' and avg_comp > avg_ref
       or 
       '$$regulated_dir_immune_response$$' = 'decreased' and avg_ref > avg_comp)
      ]]>
      </sql>

    </sqlQuery>
    <processQuery name="GenesByTTestWithMetadata" includeProjects="EuPathDB"
        processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" doNotTest="true">
      <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.profileset_generic" quote="false"/>
      <!--
      <paramRef ref="sharedParams.profile_ontology_1" quote="false"/>
      <paramRef ref="sharedParams.profile_ontology_2" quote="false"/>
      <paramRef ref="geneParams.ref_samples_with_meta_data" quote="false"/>
      <paramRef ref="geneParams.comp_samples_with_meta_data"/>
      -->

      <paramRef groupRef="paramGroups.dynamicParams" ref="sharedParams.ref_samples_filter_metadata" noTranslation="true" quote="false"/>
      <paramRef groupRef="paramGroups.dynamicParams" ref="sharedParams.comp_samples_filter_metadata" noTranslation="true" quote="false"/>

      <paramRef ref="geneParams.regulated_dir_immune_response" quote="false"/>
      <paramRef ref="geneParams.p_value" default="0.05"/>

      <paramRef groupRef="paramGroups.dynamicParams" ref="sharedParams.metadata_for_graph" quote="false"/>

        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="avg_group_one" wsName="avg_group_one"/>
        <wsColumn name="avg_group_two" wsName="avg_group_two"/>
        <wsColumn name="p_value" wsName="p_value"/>
        <wsColumn name="sorting_p_value" wsName="sorting_p_value"/>
        <wsColumn name="difference" wsName="difference"/>
   </processQuery>

 <sqlQuery name="GenesByHostResponseWithMetaData" includeProjects="PlasmoDB" 
              isCacheable="true" doNotTest="true">

<!--
      <paramRef ref="geneParams.profileset_generic_all" quote="false" multiPick="true"/>
  -->

      <paramRef ref="geneParams.ref_samples_filter_metadata_all" quote="false"/>

      <paramRef ref="geneParams.comp_samples_filter_metadata_all" quote="false"/>

      <paramRef ref="geneParams.regulated_dir_immune_response" quote="false"/>
      <paramRef ref="geneParams.p_value" default="0.05"/>

<!--      <paramRef ref="sharedParams.metadata_for_graph" quote="false"/> -->

      <column name="project_id"/>
      <column name="source_id"/>
      <column name="gene_source_id"/>

<!--  <column name="difference"/> -->
      <column name="p_value" sortingColumn="sorting_p_value"/>
      <column name="sorting_p_value"/>
      <column name="avg_group_one"/>
      <column name="avg_group_two"/>

      <sqlParamValue includeProjects="PlasmoDB" name="isLogged">0</sqlParamValue>
      <sqlParamValue includeProjects="PlasmoDB" name="lowerBound">0.0001</sqlParamValue>
      <sqlParamValue includeProjects="PlasmoDB" name="function">'log2'</sqlParamValue>

      <sql>
        <![CDATA[
          select ta.source_id, ta.gene_source_id, '@PROJECT_ID@' as project_id, 'Y' as matched_result,
                 round(case 
                         when (avg_comp / avg_ref) >= 1
                           then (avg_comp / avg_ref)
                         else (-1 / (avg_comp / avg_ref))
                       end, 6) as difference,
                 round(case
                         when lower(&&function&&) = 'arcsinh'
                           then apidb.arcsinh(avg_comp)
                         when lower(&&function&&) = 'linear'
                           then avg_comp
                         else log(2, avg_comp)
                       end, 6) as avg_group_one,
                 round(case
                         when lower(&&function&&) = 'arcsinh'
                           then apidb.arcsinh(avg_ref)
                         when lower(&&function&&) = 'linear'
                           then avg_ref
                         else log(2, avg_ref)
                       end, 6) as avg_group_two,
                 to_char( p_value, '9.99EEEE') as p_value,
                 p_value sorting_p_value
          from apidbTuning.transcriptAttributes ta,
               (select na_feature_id,
                       round(avg(decode(source_set, 'ref', reported_value, null)), 3) avg_ref,
                       round(avg(decode(source_set, 'comp', reported_value, null)), 3) avg_comp,
                       stats_t_test_indepu(source_set, reported_value) p_value
                from (  select na_feature_id, avg(power(2, value)) as reported_value, 'ref' as source_set
                        from results.NaFeatureHostResponse
                        where protocol_app_node_id in ($$ref_samples_filter_metadata_all$$)
                        group by na_feature_id, protocol_app_node_id
                      union
                        select na_feature_id, avg(power(2, value)) as reported_value, 'comp' as source_set
                        from results.NaFeatureHostResponse
                        where protocol_app_node_id in ($$comp_samples_filter_metadata_all$$)
                        group by na_feature_id, protocol_app_node_id
                     )
                group by na_feature_id) one
          where one.na_feature_id = ta.gene_na_feature_id
            and p_value <= $$p_value$$
            and ('$$regulated_dir_immune_response$$' = 'increased' and avg_comp > avg_ref
                 or 
                 '$$regulated_dir_immune_response$$' = 'decreased' and avg_ref > avg_comp)
        ]]>
      </sql>

    </sqlQuery>

   <processQuery name="GenesByHostResponseWithMetaData" includeProjects="EuPathDB"
        processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" doNotTest="true">

      <paramRef ref="geneParams.ref_samples_filter_metadata_all" quote="false"/>
      <paramRef ref="geneParams.comp_samples_filter_metadata_all" quote="false"/>
      <paramRef ref="geneParams.p_value"/>
      <paramRef ref="geneParams.regulated_dir_immune_response" quote="false"/>

        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="avg_group_one" wsName="avg_group_one"/>
        <wsColumn name="avg_group_two" wsName="avg_group_two"/>
        <wsColumn name="p_value" wsName="p_value"/>
        <wsColumn name="sorting_p_value" wsName="sorting_p_value"/>
    <!--    <wsColumn name="difference" wsName="difference"/> -->
		
   </processQuery>

<!--
    <sqlQuery name="GenesByTimeSeriesFoldChangeBradyBoothroyd" includeProjects="ToxoDB" 
              isCacheable="true">

      <testParamValues>
	<paramValue name="ts_fc_one_matt">2 days</paramValue>
	<paramValue name="ts_fc_two_matt">4 days</paramValue>
      </testParamValues>

        <paramRef ref="geneParams.ts_fc_two_matt"/>
        <paramRef ref="geneParams.ts_fc_one_matt"/>
        <paramRef ref="geneParams.fold_change"/>
        <paramRef ref="geneParams.regulated_dir"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="fold_change"/>
        <column name="avg_group_one"/>
        <column name="avg_group_two"/>
      <sql includeProjects="ToxoDB">
          <![CDATA[
 select one.source_id, '@PROJECT_ID@' as project_id,
                   round((CASE WHEN power(2, one.average) / power(2,two.average) >= 1
                                 THEN power(2, one.average) / power(2,two.average)
                           ELSE -1 / (power(2,one.average) / power(2,two.average))
                   END),1) as fold_change,
        round(one.average,2) as avg_group_one,
        round(two.average,2) as avg_group_two
 from (
 select p.source_id, avg(pe.value) as average
 from  apidb.profileelementname pen, apidb.profile p, apidb.profileelement pe
 where pen.profile_element_name_id in ($$ts_fc_one_matt$$)
 and p.profile_set_id = pen.profile_set_id
 and pe.profile_id = p.profile_id
 and pe.element_order = pen.element_order
 group by p.source_id ) one,
 (
 select p.source_id, avg(pe.value) as average
 from apidb.profileelementname pen, apidb.profile p, apidb.profileelement pe
 where pen.profile_element_name_id in ($$ts_fc_two_matt$$)
 and p.profile_set_id = pen.profile_set_id
 and pe.profile_id = p.profile_id
 and pe.element_order = pen.element_order
 group by p.source_id ) two
 where one.source_id = two.source_id
 and  $$regulated_dir$$ (
               case when one.average >= two.average
                   then power(2,one.average) / power(2,two.average)
                   else -( power(2,two.average) / power(2,one.average))
                   end ) >= $$fold_change$$
          ]]>
      </sql>

    </sqlQuery>

    <processQuery name="GenesByTimeSeriesFoldChangeBradyBoothroyd" includeProjects="EuPathDB"
        processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <testParamValues>
	<paramValue name="ts_fc_one_matt">2 days</paramValue>
	<paramValue name="ts_fc_two_matt">4 days</paramValue>
      </testParamValues>

        <paramRef ref="geneParams.ts_fc_two_matt" quote="false"/>
        <paramRef ref="geneParams.ts_fc_one_matt" quote="false"/>
        <paramRef ref="geneParams.fold_change"/>
        <paramRef ref="geneParams.regulated_dir"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="fold_change" wsName="fold_change"/>
        <wsColumn name="avg_group_one" wsName="avg_group_one"/>
        <wsColumn name="avg_group_two" wsName="avg_group_two"/>

    </processQuery>

-->

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Expression profile similarity -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <processQuery name="GenesByGenericProfileSimilarity" includeProjects="PlasmoDB,ToxoDB,CryptoDB,HostDB"  
             processName="org.apidb.apicomplexa.wsfplugin.profile.ProfileSimilarityPlugin"
	     doNotTest="true">
       <postCacheUpdateSql>
          <sql>
             <![CDATA[
                update ##WDK_CACHE_TABLE##
                set source_id = (select min(source_id)
                                 from apidbTuning.transcriptAttributes
                                 where gene_source_id = ##WDK_CACHE_TABLE##.gene_source_id)
                where wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##
                  and source_id is null
             ]]>
          </sql>
       </postCacheUpdateSql>
       <postCacheUpdateSql>
          <sql>
          <![CDATA[
                insert into ##WDK_CACHE_TABLE## -- query-specific version
                            (wdk_instance_id, wdk_row_id, wdk_weight, source_id, gene_source_id, project_id, matched_result)
                with matches
                     as (select *
                         from ##WDK_CACHE_TABLE##
                         where wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##),
                     row_offset
                     as (select max(wdk_row_id) as the_max from matches),
                     mismatches
                     as (  select source_id, gene_source_id
                           from apidbTuning.transcriptAttributes
                           where gene_source_id in (select gene_source_id from matches)
                         minus
                           select source_id, gene_source_id
                           from matches)
                select ##WDK_CACHE_INSTANCE_ID##,
                       rownum + the_max, 0, source_id, gene_source_id,  '@PROJECT_ID@', 'Y'
                from row_offset, mismatches
             ]]>
          </sql>
       </postCacheUpdateSql>
        <paramRef ref="geneParams.ProfileGeneId" noTranslation="true"/>
        <paramRef ref="geneParams.ProfileDistanceMethod"  quote="false"/>
        <paramRef ref="geneParams.ProfileNumToReturn"/>
        <paramRef ref="geneParams.ProfileMissingPtsPercent"/>
        <paramRef ref="geneParams.profile_profile_set"/>
        <paramRef ref="geneParams.ProfileSearchGoal"  quote="false"/>
        <paramRef ref="geneParams.profile_time_shift"/>
        <paramRef ref="geneParams.ProfileScaleFactor"/>
        <paramRef ref="geneParams.ProfileMinPoints"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="GeneID"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="distance" wsName="Distance" width="50"/>
        <wsColumn name="time_shift" wsName="Shift" width="50"/>
        <wsColumn name="query_source_id" wsName="QueryGeneId" width="50"/>
    </processQuery>

    <processQuery name="GenesByGenericProfileSimilarity" includeProjects="EuPathDB" doNotTest="true"
             processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
   <!--    <paramRef ref="organismParams.organism" queryRef="organismVQ.pf"/>  -->
        <paramRef ref="geneParams.ProfileGeneId" default="PF3D7_1133400"/>
        <paramRef ref="geneParams.ProfileDistanceMethod" quote="false"/>
        <paramRef ref="geneParams.ProfileNumToReturn"/>
        <paramRef ref="geneParams.profile_profile_set" quote="false"/>
        <paramRef ref="geneParams.ProfileSearchGoal" quote="false"/>
        <paramRef ref="geneParams.profile_time_shift"/>
        <paramRef ref="geneParams.ProfileScaleFactor"/>
        <paramRef ref="geneParams.ProfileMinPoints"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="distance" wsName="distance" width="50"/>
        <wsColumn name="time_shift" wsName="time_shift" width="50"/>
        <wsColumn name="query_source_id" wsName="query_source_id" width="50"/>
    </processQuery>


  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- GenesByDifferentialExpression -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByDifferentialExpression" includeProjects="ToxoDB">
       <paramRef ref="geneParams.exprnsample"/>
       <paramRef ref="geneParams.confidence"/>
       <paramRef ref="geneParams.fold_change"/>
       <paramRef ref="geneParams.regulated_dir"/>
        <column name="project_id"/>
        <column name="source_id" />
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <column name="confidence" />
        <column name="fold_change" />
       <sql>
            <![CDATA[
          select '@PROJECT_ID@' as project_id, ga.source_id as source_id, 'Y' as matched_result,
                 round(d.fold_change, 1) as fold_change, d.confidence
          from rad.differentialexpression d, Core.tableInfo t , 
               ApidbTuning.GeneAttributes ga, rad.analysis a 
          where ga.na_feature_id = d.row_id 
           and t.table_id = d.table_id
           and a.analysis_id = d.analysis_id
           and t.name = 'GeneFeature'
           and $$regulated_dir$$(d.fold_change) >= $$fold_change$$
           and d.confidence >= $$confidence$$
           and a.name = $$exprnsample$$
            ]]>
          </sql>
    </sqlQuery>

    <processQuery name="GenesByDifferentialExpression" includeProjects="EuPathDB"
        processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="geneParams.exprnsample" quote="false"/>
        <paramRef ref="geneParams.confidence"/>
        <paramRef ref="geneParams.fold_change"/>
        <paramRef ref="geneParams.regulated_dir"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="confidence" />
        <wsColumn name="fold_change" />
    </processQuery>

    <sqlQuery name="GenesByDifferentialExpressionChooseComparisons" includeProjects="ToxoDB">

        <testParamValues includeProjects="ToxoDB">
            <paramValue name="lineages_b">GT1 (Type I) </paramValue>
        </testParamValues>
        <paramRef ref="geneParams.lineages_b"/>
        <paramRef ref="geneParams.lineages_a"/>
        <paramRef ref="geneParams.confidence"/>
        <paramRef ref="geneParams.fold_change"/>
        <paramRef ref="geneParams.regulated_dir"/>
        <column name="project_id"/>
        <column name="source_id" />
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <column name="confidence" />
        <column name="fold_change" />
        <sql>
            <![CDATA[
          select '@PROJECT_ID@' as project_id, ga.source_id as source_id, 'Y' as matched_result,
                 d.confidence, round(d.fold_change, 1) as fold_change
          from ApidbTuning.GeneAttributes ga, 
               (select r.row_id, r.confidence, 
                   case when lower(a.name) = $$lineages_a$$ || 'vs' || $$lineages_b$$
                        then r.fold_change
                        else -(r.fold_change)
                   end as fold_change
                from rad.analysis a, rad.differentialexpression r, core.tableinfo t
                where a.analysis_id = r.analysis_id
                  and r.table_id = t.table_id
                  and t.name = 'GeneFeature'
                  and (lower(a.name) = $$lineages_a$$ || 'vs' || $$lineages_b$$ 
                    or lower(a.name) = $$lineages_b$$ || 'vs' || $$lineages_a$$)
                ) d
           where ga.na_feature_id = d.row_id
             and $$regulated_dir$$(d.fold_change) >= $$fold_change$$
             and d.confidence >= $$confidence$$
            ]]>
          </sql>
    </sqlQuery>

    <processQuery name="GenesByDifferentialExpressionChooseComparisons" includeProjects="EuPathDB"
        processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <testParamValues>
            <paramValue name="lineages_b">GT1 (Type I) </paramValue>
        </testParamValues>
        <paramRef ref="geneParams.lineages_b" quote="false"/>
        <paramRef ref="geneParams.lineages_a" quote="false"/>
        <paramRef ref="geneParams.confidence"/>
        <paramRef ref="geneParams.fold_change"/>
        <paramRef ref="geneParams.regulated_dir"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="confidence" />
        <wsColumn name="fold_change" />
    </processQuery>

  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- GenesByDifferentialExpression -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GiardiaGenesByDifferentialExpression" includeProjects="GiardiaDB">
       <paramRef ref="geneParams.gl_exprnsample"/>
       <paramRef ref="geneParams.confidence"/>
       <paramRef ref="geneParams.fold_change"/>
       <paramRef ref="geneParams.regulated_dir"/>
        <column name="project_id"/>
        <column name="source_id" />
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <column name="confidence" />
        <column name="fold_change" />
       <sql>
            <![CDATA[
               SELECT g.source_id, '@PROJECT_ID@' as project_id, 'Y' as matched_result,
                      avg(round(de.fold_change, 2)) as fold_change,
                      max(round(de.confidence, 2)) as confidence                   
                 FROM rad.differentialExpression de, core.tableInfo ti, 
                      rad.compositeElementNaSequence cs, dots.transcript t, 
                      ApidbTuning.GeneAttributes g, rad.analysis a
                WHERE ti.name = 'ShortOligoFamily'
                  AND de.table_id = ti.table_id
                  AND de.row_id = cs.composite_element_id
                  AND cs.na_sequence_id = t.na_sequence_id
                  AND t.parent_id = g.na_feature_id
                  AND de.analysis_id = a.analysis_id
                  AND a.name = $$gl_exprnsample$$
                  AND de.confidence >= $$confidence$$
                  AND ($$regulated_dir$$ (de.fold_change) >= $$fold_change$$)
                  GROUP BY g.source_id
            ]]>
          </sql>
    </sqlQuery>

    <processQuery name="GiardiaGenesByDifferentialExpression" includeProjects="EuPathDB"
        processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="geneParams.gl_exprnsample"  quote="false"/>
        <paramRef ref="geneParams.confidence"/>
        <paramRef ref="geneParams.fold_change"/>
        <paramRef ref="geneParams.regulated_dir"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="confidence" />
        <wsColumn name="fold_change" />
    </processQuery>

    <sqlQuery name="GiardiaGenesByDifferentialExpressionTwo" includeProjects="GiardiaDB">
       <paramRef ref="geneParams.gl_exprnsample_two"/>
       <paramRef ref="geneParams.confidence"/>
       <paramRef ref="geneParams.fold_change"/>
       <paramRef ref="geneParams.regulated_dir"/>
        <column name="project_id"/>
        <column name="source_id" />
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <column name="confidence" />
        <column name="fold_change" />
       <sql>
            <![CDATA[
               SELECT g.source_id,  '@PROJECT_ID@' as project_id, 'Y' as matched_result,
                      round(de.fold_change, 2) as fold_change,
                      round(de.confidence, 2) as confidence
                 FROM rad.differentialExpression de, core.tableInfo ti,
                      ApidbTuning.GeneAttributes g, rad.analysis a
                 WHERE ti.name = 'GeneFeature'
                   AND de.table_id = ti.table_id
                   AND de.row_id = g.na_feature_id
                   AND de.analysis_id = a.analysis_id
                   AND a.name = $$gl_exprnsample_two$$
                   AND de.confidence >= $$confidence$$
                   AND ($$regulated_dir$$ (de.fold_change) >= $$fold_change$$)
            ]]>
          </sql>
    </sqlQuery>

    <processQuery name="GiardiaGenesByDifferentialExpressionTwo" includeProjects="EuPathDB"
        processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
       <paramRef ref="geneParams.gl_exprnsample_two"  quote="false"/>
       <paramRef ref="geneParams.confidence"/>
       <paramRef ref="geneParams.fold_change"/>
       <paramRef ref="geneParams.regulated_dir"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="confidence" />
        <wsColumn name="fold_change" />
    </processQuery>


    <sqlQuery name="GenesByDirectComparisonGeneric" includeProjects="PlasmoDB,GiardiaDB,TriTrypDB,FungiDB,CryptoDB"  >
      <paramRef ref="geneParams.regulated_dir"/>
      <paramRef ref="geneParams.samples_fc_ref_generic"/>
      <paramRef ref="geneParams.fold_difference" />
      <paramRef ref="geneParams.protein_coding_only"/>
      <paramRef ref="geneParams.profileset_generic"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <column name="fold_difference"/>

      <sqlParamValue name="isLogged">1</sqlParamValue>
      <sqlParamValue name="shift">0.0001</sqlParamValue>
      <sql>
      <![CDATA[
	 SELECT ta.gene_source_id, ta.source_id, 'Y' as matched_result,
             '@PROJECT_ID@' as project_id,
             round(max(expr.fold_difference), 2) as fold_difference
	  FROM (
            select res.na_feature_id as gene_feature_id,
                          case 
                            when &&isLogged&& != 1 
                            then 
                                   case 
                                   when res.value< 1 
                                   then -1/res.value + &&shift&&
                                   else res.value 
                                   end                                   
                            else (
                                 case 
                                   when res.value < 0
                                   then -1/nvl(power(2, res.value), 1)
                                   else  nvl(power(2, res.value), 1) 
                                   end
                                ) 
                            end as fold_difference
             FROM study.studylink sl, study.protocolappnode pan, results.nafeatureexpression res
             WHERE sl.protocol_app_node_id = pan.protocol_app_node_id
	     AND pan.protocol_app_node_id in  ($$samples_fc_ref_generic$$)
	     AND pan.protocol_app_node_id = res.protocol_app_node_id
           ) expr, apidbtuning.transcriptattributes ta
        where ( $$protein_coding_only$$ = 'no' OR ta.gene_type = $$protein_coding_only$$ )
        and $$regulated_dir$$ (expr.fold_difference)   >=  $$fold_difference$$ 
        and ta.gene_na_feature_id = expr.gene_feature_id
        group by ta.gene_source_id, ta.source_id
      ]]>
      </sql>

    </sqlQuery>
    <processQuery name="GenesByDirectComparisonGeneric" includeProjects="EuPathDB"
        processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" doNotTest="true">
      <paramRef ref="geneParams.regulated_dir"/>
      <paramRef ref="geneParams.samples_fc_ref_generic" />
      <paramRef ref="geneParams.fold_difference" />
      <paramRef ref="geneParams.protein_coding_only"/>
      <paramRef ref="geneParams.profileset_generic"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="fold_difference" wsName="fold_difference"/>
    </processQuery>




    <sqlQuery name="GenesByDirectComparisonGenericPage" includeProjects="PlasmoDB,GiardiaDB,TriTrypDB,AmoebaDB" >
      <testParamValues>
	<paramValue name="fold_change">0.55</paramValue>
	<paramValue name="regulated_dir">down-regulated</paramValue>
      </testParamValues>

       <paramRef ref="geneParams.samples_direct_comp_generic"/>
       <paramRef ref="geneParams.confidence" default="0.7"/>
       <paramRef ref="geneParams.fold_change"/>
       <paramRef ref="geneParams.regulated_dir" default="down-regulated"/>
       <paramRef ref="geneParams.protein_coding_only"/>
        <column name="project_id"/>
        <column name="source_id" />
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <column name="confidence"/>
        <column name="fold_change" />
       <sql>
            <![CDATA[
         SELECT ga.source_id, '@PROJECT_ID@' as project_id, 'Y' as matched_result,
                 round(de.fold_change, 2) as fold_change,
                 round(de.confidence, 2) as confidence
          from ApidbTuning.GeneAttributes ga, rad.differentialexpression de, 
               core.tableinfo ti, rad.logicalgrouplink lgl, rad.analysisinput ai,
               core.tableinfo ti2, (select logical_group_id from rad.logicalgrouplink GROUP BY logical_group_id having count(*) = 1) lg
          where ti.name = 'GeneFeature'
          and ti2.name = 'ProfileElementName'
          and ti.table_id = de.table_id
          and ga.na_feature_id = de.row_id
          and ai.analysis_id = de.analysis_id
          and $$regulated_dir$$ (de.fold_change) >= $$fold_change$$
          and de.confidence >= $$confidence$$
          and ai.logical_group_id  = lgl.logical_group_id
          and lgl.row_id = $$samples_direct_comp_generic$$ 
          and ti2.table_id = lgl.table_id
          and lg.logical_group_id = ai.logical_group_id
          and ( $$protein_coding_only$$ = 'no' OR ga.gene_type = $$protein_coding_only$$ )
        ]]>
       </sql>
    </sqlQuery>

    <processQuery name="GenesByDirectComparisonGenericPage" includeProjects="EuPathDB"
        doNotTest="true" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <testParamValues>
	<paramValue name="fold_change">0.55</paramValue>
	<paramValue name="regulated_dir">up-regulated</paramValue>
      </testParamValues>

       <paramRef ref="geneParams.samples_direct_comp_generic"/>
       <paramRef ref="geneParams.confidence" default="0.7"/>
       <paramRef ref="geneParams.fold_change"/>
       <paramRef ref="geneParams.regulated_dir"/>
       <paramRef ref="geneParams.protein_coding_only"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="confidence" />
        <wsColumn name="fold_change" />
    </processQuery>


    <sqlQuery name="GenesByDirectComparisonGenericFDR" includeProjects="PlasmoDB,GiardiaDB,TriTrypDB,AmoebaDB" >
      <testParamValues>
	<paramValue name="fold_change">0.55</paramValue>
	<paramValue name="regulated_dir">down-regulated</paramValue>
      </testParamValues>
       <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.profileset_generic"/>
       <paramRef groupRef="paramGroups.dynamicParams" ref="geneParams.samples_direct_comp_fdr_generic"/>
       <paramRef ref="geneParams.regulated_dir" default="down-regulated"/>
       <paramRef ref="geneParams.fold_difference"/>
       <paramRef ref="geneParams.false_discovery_rate" default="0.1"/>
       <paramRef ref="geneParams.protein_coding_only"/>
        <column name="project_id"/>
        <column name="source_id" />
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <column name="false_discovery_rate"/>
        <column name="fold_change" />
       <sql>
            <![CDATA[
     select source_id, 
             project_id, 'Y' as matched_result,
             fold_difference as fold_change,
             false_discovery_rate
      from (
         SELECT ga.source_id,
                ga.gene_type, 
                'TriTrypDB' as project_id, 
                round(fold_difference, 2) as fold_difference,
                round(de.false_discovery_rate, 2) as false_discovery_rate
          from ApidbTuning.GeneAttributes ga, 
               rad.differentialexpression de, 
               ( select p.subject_row_id as gene_feature_id,
                       case when pe.value < 0
                            then -1/nvl(power(2, pe.value), 1)
                            else  nvl(power(2, pe.value), 1) 
                       end as fold_difference
            from apidb.profileelement pe, apidb.profile p
            where pe.profile_element_name_id = $$samples_direct_comp_fdr_generic$$
            and pe.profile_id = p.profile_id
           ) expr,
               rad.logicalgrouplink lgl,
               rad.analysisinput ai,
               (select logical_group_id from rad.logicalgrouplink GROUP BY logical_group_id having count(*) = 1) lg
          where expr.gene_feature_id = de.row_id
          and ga.na_feature_id = expr.gene_feature_id
          and ai.analysis_id = de.analysis_id
          and $$regulated_dir$$ (expr.fold_difference) >=  $$fold_difference$$
          and de.false_discovery_rate <= $$false_discovery_rate$$
          and ai.logical_group_id  = lgl.logical_group_id
          and lgl.row_id = $$samples_direct_comp_fdr_generic$$ 
          and lg.logical_group_id = ai.logical_group_id)
          where ( $$protein_coding_only$$ = 'no' OR gene_type = $$protein_coding_only$$ )
        ]]>
       </sql>
    </sqlQuery>

    <processQuery name="GenesByDirectComparisonGenericFDR" includeProjects="EuPathDB"
        doNotTest="true" processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <testParamValues>
	<paramValue name="fold_change">0.55</paramValue>
	<paramValue name="regulated_dir">up-regulated</paramValue>
      </testParamValues>
       <paramRef ref="geneParams.profileset_generic" quote="false"/>
       <paramRef ref="geneParams.samples_direct_comp_fdr_generic"/>
       <paramRef ref="geneParams.false_discovery_rate" default="0.7"/>
       <paramRef ref="geneParams.fold_difference"/>
       <paramRef ref="geneParams.regulated_dir"/>
       <paramRef ref="geneParams.protein_coding_only"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="false_discovery_rate" />
        <wsColumn name="fold_change" />
    </processQuery>

  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- GenesWithMrnaHalfLife -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesWithMrnaHalfLife" includeProjects="PlasmoDB"  >
      <testParamValues>
	<paramValue name="halfLifeStage1">R</paramValue>
	<paramValue name="halfLifeStage2">S</paramValue>
      </testParamValues>

      <paramRef ref="geneParams.halfLifeStage1"/>
      <paramRef ref="geneParams.halfLifeStage2"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <column name="half_life_one"/>
        <column name="half_life_two"/>
      <sql>
	<![CDATA[
SELECT hl1.source_id, hl1.half_life as half_life_one, hl2.half_life as half_life_two, '@PROJECT_ID@' as project_id , 'Y' as matched_result
FROM
(select round(pe.value,2) as half_life, p.source_id as source_id
           from apidb.profileelement pe, apidb.profileelementname pen, apidb.profile p, ApidbTuning.GeneAttributes ga
           where p.profile_set_id = pen.profile_set_id
            and p.source_id = ga.source_id
            and ga.gene_type = 'protein coding'
            and pe.profile_id = p.profile_id
            and pe.element_order = pen.element_order
            and  pen.profile_element_name_id in (substr('$$halfLifeStage1$$', 1, instr('$$halfLifeStage1$$', ',') -1))
) hl1,
(select round(pe.value,2) as std_dev, p.source_id
           from apidb.profileelement pe, apidb.profileelementname pen, apidb.profile p, ApidbTuning.GeneAttributes ga
           where p.profile_set_id = pen.profile_set_id
            and p.source_id = ga.source_id
            and ga.gene_type = 'protein coding'
            and pe.profile_id = p.profile_id
            and pe.element_order = pen.element_order
            and  pen.profile_element_name_id in (substr('$$halfLifeStage1$$', (instr('$$halfLifeStage1$$', ',') + 1), instr('$$halfLifeStage1$$', ',') -1))
) sd1,
(select round(pe.value,2) as half_life, p.source_id
           from apidb.profileelement pe, apidb.profileelementname pen, apidb.profile p, ApidbTuning.GeneAttributes ga
           where p.profile_set_id = pen.profile_set_id
            and p.source_id = ga.source_id
            and ga.gene_type = 'protein coding'
            and pe.profile_id = p.profile_id
            and pe.element_order = pen.element_order
            and  pen.profile_element_name_id in (substr('$$halfLifeStage2$$', 1, instr('$$halfLifeStage2$$', ',') -1))
) hl2,
(select round(pe.value,2) as std_dev, p.source_id
           from apidb.profileelement pe, apidb.profileelementname pen, apidb.profile p, ApidbTuning.GeneAttributes ga
           where p.profile_set_id = pen.profile_set_id
            and p.source_id = ga.source_id
            and ga.gene_type = 'protein coding'
            and pe.profile_id = p.profile_id
            and pe.element_order = pen.element_order
            and  pen.profile_element_name_id in (substr('$$halfLifeStage2$$', (instr('$$halfLifeStage2$$', ',') + 1), instr('$$halfLifeStage2$$', ',') -1))
) sd2
WHERE hl1.source_id = sd1.source_id
AND   hl1.source_id = hl2.source_id
AND   hl1.source_id = sd2.source_id
AND (hl2.half_life - sd2.std_dev) > (hl1.half_life + sd1.std_dev)
ORDER BY hl1.source_id
	]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesWithMrnaHalfLife" includeProjects="EuPathDB"
        processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
      <testParamValues>
	<paramValue name="halfLifeStage1">R</paramValue>
	<paramValue name="halfLifeStage2">S</paramValue>
      </testParamValues>
      <paramRef ref="geneParams.halfLifeStage1" quote="false"/>
      <paramRef ref="geneParams.halfLifeStage2" quote="false"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="half_life_one"/>
        <wsColumn name="half_life_two"/>
    </processQuery>


  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- GenesBySubcellularLocalization -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesBySubcellularLocalization" includeProjects="PlasmoDB" >
        <paramRef ref="geneParams.localization"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <sql>
            <![CDATA[
              SELECT DISTINCT s.source_id as  gene_source_id, 'Y' as matched_result,
                ta.source_id, '@PROJECT_ID@' as project_id
              FROM ApidbTuning.Subcellular s, ApidbTuning.TranscriptAttributes ta
              WHERE s.source_id = ta.gene_source_id
              AND s.targetting_domain = $$localization$$
              ORDER BY s.source_id
           ]]>
       </sql>
    </sqlQuery>

    <processQuery name="GenesBySubcellularLocalization" includeProjects="EuPathDB"
        processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="geneParams.localization" quote="false"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
    </processQuery>

  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- GenesByProteomicsProfile -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByProteomicsProfile" includeProjects="PlasmoDB"    >
        <paramRef ref="geneParams.asexual_blood_stages_value"/>
        <paramRef ref="geneParams.gametocytes_value"/>
        <paramRef ref="geneParams.ookinetes_value"/>
        <paramRef ref="geneParams.oocysts_value"/>
        <paramRef ref="geneParams.sporozoites_value"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <sql>
            <![CDATA[
            SELECT DISTINCT pb.source_id, 'Y' as matched_result, '@PROJECT_ID@' as project_id FROM
            (SELECT p.source_id
            FROM apidb.profileElement pe, apidb.profile p, apidb.profileset ps, apidb.profileElementName pen
            WHERE ps.profile_set_id = pen.profile_set_id
            AND   ps.profile_set_id = p.profile_set_id
            AND   pe.profile_id = p.profile_id
            AND   pe.profile_element_name_id = pen.profile_element_name_id
            AND   ps.name = 'berghei_proteomic_Sinden'
            AND (pen.element_order = 1 AND ('any' = $$asexual_blood_stages_value$$ OR
                                           pe.value = $$asexual_blood_stages_value$$))
            INTERSECT
            SELECT p.source_id
            FROM apidb.profileElement pe, apidb.profile p, apidb.profileset ps, apidb.profileElementName pen
            WHERE ps.profile_set_id = pen.profile_set_id
            AND   ps.profile_set_id = p.profile_set_id
            AND   pe.profile_id = p.profile_id
            AND   pe.profile_element_name_id = pen.profile_element_name_id

            AND   ps.name = 'berghei_proteomic_Sinden'
            AND (pen.element_order = 2 AND ('any' = $$gametocytes_value$$ OR
                                           pe.value = $$gametocytes_value$$))
            INTERSECT
            SELECT p.source_id
            FROM apidb.profileElement pe, apidb.profile p, apidb.profileset ps, apidb.profileElementName pen
            WHERE ps.profile_set_id = pen.profile_set_id
            AND   ps.profile_set_id = p.profile_set_id
            AND   pe.profile_id = p.profile_id
            AND   pe.profile_element_name_id = pen.profile_element_name_id

            AND   ps.name = 'berghei_proteomic_Sinden'
            AND (pen.element_order = 3 AND ('any' = $$ookinetes_value$$ OR
                                           pe.value = $$ookinetes_value$$))
            INTERSECT
            SELECT p.source_id
            FROM apidb.profileElement pe, apidb.profile p, apidb.profileset ps, apidb.profileElementName pen
            WHERE ps.profile_set_id = pen.profile_set_id
            AND   ps.profile_set_id = p.profile_set_id
            AND   pe.profile_id = p.profile_id
            AND   pe.profile_element_name_id = pen.profile_element_name_id

            AND   ps.name = 'berghei_proteomic_Sinden'
            AND (pen.element_order = 4 AND ('any' = $$oocysts_value$$ OR
                                           pe.value = $$oocysts_value$$))
            INTERSECT
            SELECT p.source_id
            FROM apidb.profileElement pe, apidb.profile p, apidb.profileset ps, apidb.profileElementName pen
            WHERE ps.profile_set_id = pen.profile_set_id
            AND   ps.profile_set_id = p.profile_set_id
            AND   pe.profile_id = p.profile_id
            AND   pe.profile_element_name_id = pen.profile_element_name_id
            AND   ps.name = 'berghei_proteomic_Sinden'
            AND (pen.element_order = 5 AND ('any' = $$sporozoites_value$$ OR
                                           pe.value = $$sporozoites_value$$))) pb
           ]]>
       </sql>
    </sqlQuery>

    <processQuery name="GenesByProteomicsProfile" includeProjects="EuPathDB"
        processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="geneParams.asexual_blood_stages_value" quote="false"/>
        <paramRef ref="geneParams.gametocytes_value" quote="false"/>
        <paramRef ref="geneParams.ookinetes_value" quote="false"/>
        <paramRef ref="geneParams.oocysts_value" quote="false"/>
        <paramRef ref="geneParams.sporozoites_value" quote="false"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
    </processQuery>

  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- GenesByReagents -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByReagents" includeProjects="PlasmoDB,CryptoDB,ToxoDB"   >

        <paramRef ref="geneParams.reagent_type"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>

        <sqlParamValue name="edName"  includeProjects="CryptoDB">
                <![CDATA[
                   ed.name = 'cparIowaII_dbxref_protein2EinsteinAntibodies_RSRC'
                ]]>
        </sqlParamValue>

        <sqlParamValue name="edName"  includeProjects="ToxoDB">
                <![CDATA[
                   ed.name = 'tgonME49_dbxref_protein2EinsteinAntibodies_RSRC'
                ]]>
        </sqlParamValue>


        <sql includeProjects="PlasmoDB">
            <![CDATA[
               SELECT DISTINCT ta.source_id, ta.gene_source_id, '@PROJECT_ID@' as project_id, 'Y' as matched_result
               FROM ApidbTuning.TranscriptAttributes ta,
                dots.DbRefAaFeature df, sres.DbRef dbr, dots.TranslatedAAFeature taf,
                sres.ExternalDatabase ed, sres.ExternalDatabaseRelease edr                
               WHERE ed.name in ('MR4DBxRefs','pfal3D7_dbxref_simple_gene2MR4Reagents_RSRC')
                 AND edr.external_database_id = ed.external_database_id
                 AND dbr.external_database_release_id = edr.external_database_release_id
                 AND (LOWER(dbr.secondary_identifier) = $$reagent_type$$
                      OR $$reagent_type$$ = 'any')
                 AND df.db_ref_id = dbr.db_ref_id
                 AND taf.aa_feature_id = df.aa_feature_id
                 AND ta.na_feature_id = taf.na_feature_id
           ]]>
       </sql>
        <sql includeProjects="CryptoDB,ToxoDB">
            <![CDATA[
               SELECT DISTINCT gf.source_id, '@PROJECT_ID@' as project_id, 'Y' as matched_result
               FROM ApidbTuning.GeneAttributes gf,
                dots.DbRefNaFeature df,
                sres.DbRef dbr, sres.ExternalDatabaseRelease edr,
                sres.ExternalDatabase ed
               WHERE &&edName&&
                 AND edr.external_database_id = ed.external_database_id
                 AND dbr.external_database_release_id = edr.external_database_release_id
                 AND (LOWER(dbr.secondary_identifier) = $$reagent_type$$
                      OR $$reagent_type$$ = 'any')
                 AND df.db_ref_id = dbr.db_ref_id
                 AND gf.na_feature_id = df.na_feature_id
           ]]>
       </sql>
    </sqlQuery>

    <processQuery name="GenesByReagents" includeProjects="EuPathDB"
        processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
<!--
<paramRef ref="organismParams.organism" queryRef="organismVQ.pf"/>
        <paramRef ref="geneParams.mr4_reagent_type" quote="false"/>
-->
          <paramRef ref="geneParams.reagent_type" quote="false"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
    </processQuery>

  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- GenesByExportPrediction -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByExportPrediction" includeProjects="PlasmoDB"   >
        <paramRef ref="organismParams.organism"/>
        <paramRef ref="geneParams.min_exportpred_score"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <column name="exportpred_score"/>
        <sql>
            <![CDATA[
              SELECT ta.source_id, ta.gene_source_id, '@PROJECT_ID@' as project_id, 'Y' as matched_result,
                  max(df.score) as exportpred_score
                FROM dots.DomainFeature df, ApidbTuning.TranscriptAttributes ta
                WHERE  ta.taxon_id in ($$organism$$)
                   AND ta.aa_sequence_id = df.aa_sequence_id
                   AND df.algorithm_name = 'exportpred'
                   AND df.score >= $$min_exportpred_score$$
                   GROUP BY ta.source_id, ta.gene_source_id
           ]]>
       </sql>
    </sqlQuery>

    <processQuery name="GenesByExportPrediction" includeProjects="EuPathDB"
        processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="organismParams.organism" includeProjects="PlasmoDB,EuPathDB"/>
        <!--<paramRef ref="organismParams.organism" queryRef="organismVQ.withTriTrypGenes" includeProjects="TriTrypDB,EuPathDB"/> -->
        <paramRef ref="geneParams.min_exportpred_score"/>	
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="exportpred_score"/>
    </processQuery>

  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- GenesByCentromereProximity -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByCentromereProximity" includeProjects="PlasmoDB,ToxoDB,TriTrypDB"  >
        <paramRef ref="organismParams.org_with_centromere_genes" />
        <paramRef ref="geneParams.max_centromere_distance"/>
        <paramRef ref="sharedParams.centromere_chromosome"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <column name="dist_centromere"/>
        <sql>
            <![CDATA[
                SELECT ta.source_id, ta.gene_source_id, '@PROJECT_ID@' as project_id, 'Y' as matched_result,
                TRIM(TO_CHAR(tcd.centromere_distance,'9,999,999')) as dist_centromere
                FROM ApidbTuning.TranscriptCenDistance tcd, ApidbTuning.TranscriptAttributes ta
                WHERE ta.organism = $$org_with_centromere_genes$$
                  AND tcd.transcript = ta.source_id
                  AND tcd.centromere_distance <= $$max_centromere_distance$$
                  AND tcd.genomic_sequence in ($$centromere_chromosome$$)
                ORDER BY tcd.genomic_sequence, ta.coding_start
           ]]>
       </sql>
    </sqlQuery>

    <processQuery name="GenesByCentromereProximity" includeProjects="EuPathDB"
        processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="organismParams.org_with_centromere_genes" quote="false"/>
        <paramRef ref="geneParams.max_centromere_distance" noTranslation="true"/>
        <paramRef ref="sharedParams.centromere_chromosome" quote="false"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="dist_centromere"/>
    </processQuery>

  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- GenesByTelomereProximity -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->


    <sqlQuery name="GenesByTelomereProximity" includeProjects="PlasmoDB"  >
        <paramRef ref="organismParams.organismSinglePick" queryRef="organismVQ.withChromosomes" displayType="select" quote="true"> <help>Select the organism you wish to query against.</help></paramRef>
        <paramRef ref="sharedParams.telomere_chromosomes"/>
        <paramRef ref="geneParams.distanceFromTelomere"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <column name="dist_telomere"/>
        <sql>
            <![CDATA[
            SELECT ta.source_id, ta.gene_source_id, '@PROJECT_ID@' as project_id, 'Y' as matched_result,
            trim(to_char(LEAST(s.length - l.end_max,l.start_min),'999,999')) as dist_telomere
	    FROM ApidbTuning.TranscriptAttributes ta, apidbtuning.featurelocation l, dots.Externalnasequence s
	    WHERE ta.organism = $$organismSinglePick$$
	     AND ta.na_sequence_id = s.na_sequence_id
	     AND l.na_feature_id = ta.na_feature_id
	     AND s.source_id in ($$telomere_chromosomes$$)
	     AND (l.end_max >= s.length - $$distanceFromTelomere$$
                OR l.start_min <= 1 + $$distanceFromTelomere$$)
	     ORDER BY s.source_id,l.end_max
           ]]>
       </sql>
    </sqlQuery>

    <processQuery name="GenesByTelomereProximity" includeProjects="EuPathDB"
        processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">

        <paramRef ref="organismParams.organismSinglePick" queryRef="organismVQ.withChromosomes"
		  noTranslation="true"><help>Select organism you wish to query against</help></paramRef>
        <paramRef ref="sharedParams.telomere_chromosomes"  quote="false"/>
        <paramRef ref="geneParams.distanceFromTelomere" noTranslation="true"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="dist_telomere"/>
    </processQuery>

  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- GenesByNonnuclearGenomicRegion -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByNonnuclearGenomicRegion" includeProjects="PlasmoDB,ToxoDB"  >
        <paramRef ref="organismParams.org_with_nonnuclear_genes" />
        <paramRef ref="geneParams.nonnuclear_sequence"/>
        <paramRef ref="sharedParams.start_point"/>
        <paramRef ref="sharedParams.end_point"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <sql>
            <![CDATA[
            SELECT distinct gf.source_id, gf.gene_source_id, '@PROJECT_ID@' as project_id, 'Y' as matched_result
            FROM ApidbTuning.TranscriptAttributes gf, dots.NaSequence ens
            WHERE ens.source_id IN ($$nonnuclear_sequence$$)
              AND gf.organism = $$org_with_nonnuclear_genes$$
              AND gf.na_sequence_id = ens.na_sequence_id
              AND gene_end_max >= REGEXP_REPLACE('$$start_point$$', ',| ','') 
              AND (gene_start_min <= REGEXP_REPLACE('$$end_point$$', ',| ','') OR REGEXP_REPLACE('$$end_point$$', ',| ','') = 0)
           ]]>
       </sql>
    </sqlQuery>

    <processQuery name="GenesByNonnuclearGenomicRegion" includeProjects="EuPathDB"
        processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="organismParams.org_with_nonnuclear_genes"  quote="false"/>
        <paramRef ref="geneParams.nonnuclear_sequence"  quote="false"/>
        <paramRef ref="sharedParams.start_point"  noTranslation="true"/>
        <paramRef ref="sharedParams.end_point"  noTranslation="true"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
    </processQuery>


  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- GenesWithStructurePrediction -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesWithStructurePrediction" includeProjects="PlasmoDB"  >
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <sql>
            <![CDATA[
              select  DISTINCT ta.gene_source_id, ta.source_id, '@PROJECT_ID@' as project_id, 'Y' as matched_result
              from  dots.DbRefaaFeature drnf,  sres.DbRef dr, dots.aafeature paaf,
                sres.ExternalDatabaseRelease edr, sres.ExternalDatabase ed,ApidbTuning.TranscriptAttributes ta
              where drnf.db_ref_id = dr.db_ref_id
              AND dr.external_database_release_id = edr.external_database_release_id
              AND edr.external_database_id = ed.external_database_id
              AND ed.name = 'pfal3D7_dbxref_simple_gene2PredictedProteinStructures_RSRC'
              and paaf.aa_feature_id = drnf.aa_feature_id
              and paaf.aa_sequence_id = ta.aa_sequence_id
            ]]>
       </sql>
    </sqlQuery>

    <processQuery name="GenesWithStructurePrediction" includeProjects="EuPathDB"
        processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
    </processQuery>

  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- GenesByPdbSimilarity -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByPdbSimilarity" excludeProjects="EuPathDB,TrichDB"   >
        <paramRef ref="organismParams.organism"/>
        <paramRef ref="geneParams.clades"/>
        <paramRef ref="geneParams.pvalue_cutoff"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="pvalue"/>
        <column name="matched_result"/>
        <sql>
            <![CDATA[
            SELECT ta.source_id, ta.gene_source_id, '@PROJECT_ID@' as project_id, 'Y' as matched_result,
                   min(to_binary_double(ps.pvalue_mant || 'e' || ps.pvalue_exp)) pvalue
            FROM ApidbTuning.PdbSimilarity ps, ApidbTuning.TranscriptAttributes ta
            WHERE ps.pdb_taxon_id IN
                              (SELECT taxon_id FROM sres.taxon
                               CONNECT BY parent_id = PRIOR taxon_id
                               START WITH taxon_id IN ($$clades$$))
              AND ps.gene_taxon_id IN ($$organism$$)
              AND ps.pvalue_exp < $$pvalue_cutoff$$
              AND ps.source_id = ta.transcript_source_id
            GROUP BY ta.source_id, ta.gene_source_id
            ]]>
       </sql>
    </sqlQuery>

    <processQuery name="GenesByPdbSimilarity" includeProjects="EuPathDB"
        processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="organismParams.organism"/>
        <paramRef ref="geneParams.clades" quote="false"/>
        <paramRef ref="geneParams.pvalue_cutoff"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="pvalue" width="32"/>
    </processQuery>

  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- GenesByProteinDbAccession -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- query appears unused
    <sqlQuery name="GenesByProteinDbAccession" includeProjects="PlasmoDB"  >
        <paramRef ref="geneParams.accession"/>
        <paramRef ref="organismParams.organism" queryRef="organismVQ.withPlasmoGenes" includeProjects="PlasmoDB"/>
        <paramRef ref="organismParams.organism" queryRef="organismVQ.withTriTrypGenes" includeProjects="TriTrypDB"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <sql>
            <![CDATA[
            SELECT DISTINCT gf.source_id, '@PROJECT_ID@' as project_id
             FROM ApidbTuning.GeneAttributes gf, dots.DbRefNaFeature drnf,
                  sres.DbRef dr, sres.ExternalDatabaseRelease edr,
                  sres.ExternalDatabase ed, dots.ExternalNaSequence ens
             WHERE (dr.primary_identifier = $$accession$$
                    OR dr.secondary_identifier = $$accession$$)
               AND gf.na_feature_id = drnf.na_feature_id
               AND drnf.db_ref_id = dr.db_ref_id
               AND dr.external_database_release_id
                     = edr.external_database_release_id
               AND edr.external_database_id = ed.external_database_id
               AND ed.name IN ('NRDB_gb_dbXRefBySeqIdentity',
                           /*  'NRDB_pdb_dbXRefBySeqIdentity', */
                               'NRDB_ref_dbXRefBySeqIdentity',
                               'NRDB_sp_dbXRefBySeqIdentity',
                               'GenBank')
              AND gf.na_sequence_id = ens.na_sequence_id
              AND ens.taxon_id IN ($$organism$$)
            ORDER BY gf.source_id
            ]]>
       </sql>
    </sqlQuery>

   -->
<!-- I THINK IT I NOT USED 
    <processQuery name="GenesByProteinDbAccession" includeProjects="EuPathDB"
        processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="geneParams.accession"/>
        <paramRef ref="organismParams.organism" queryRef="organismVQ.withPlasmoGenes" includeProjects="PlasmoDB"/>
        <paramRef ref="organismParams.organism" queryRef="organismVQ.withTriTrypGenes" includeProjects="TriTrypDB"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
    </processQuery>
-->


  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- GenesWithProteinLowComplexity -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

  <!--
    <sqlQuery name="GenesWithProteinLowComplexity" includeProjects="PlasmoDB" >
        <paramRef ref="geneParams.percentLowComplexity"/>
        <paramRef ref="sharedParams.chromosome"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="matched_result"/>
        <sql>
            <![CDATA[
	    select gf.source_id, '@PROJECT_ID@' as project_id, 'Y' as matched_result
	    from Dots.LowComplexityAAFeature lc, ApidbTuning.GeneAttributes gf,
	         Dots.ExternalNASequence ens, Dots.AALocation al, 
                 Dots.AASequence s, Dots.Transcript t, Dots.TranslatedAAFeature taf
            where ens.source_id in ($$chromosome$$)
            and gf.na_sequence_id = ens.na_sequence_id
            and t.parent_id = gf.na_feature_id
            and taf.na_feature_id = t.na_feature_id
            and s.aa_sequence_id = taf.aa_sequence_id
            and lc.aa_sequence_id = s.aa_sequence_id
            and al.aa_feature_id = lc.aa_feature_id
	    group by gf.source_id
	    having sum(100 *(al.end_max - al.start_min)/s.length ) > $$percentLowComplexity$$
            ORDER BY gf.source_id
           ]]>
       </sql>
    </sqlQuery>

    <processQuery name="GenesWithProteinLowComplexity" includeProjects="EuPathDB"
        processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="geneParams.percentLowComplexity"/>
        <paramRef ref="sharedParams.chromosome"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
    </processQuery>
   -->


    <sqlQuery name="ByWeightFilter"  doNotTest="true">
        <paramRef ref="geneParams.gene_result"/>
        <paramRef ref="sharedParams.min_weight" default="0"/>
        <paramRef ref="sharedParams.max_weight" default="100"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <column name="wdk_weight" />
        <sql>
            <![CDATA[
            SELECT a.source_id, a.project_id, a.wdk_weight, 'Y' as matched_result
            FROM $$gene_result$$ a
            WHERE a.wdk_weight >= $$min_weight$$
              AND a.wdk_weight <= $$max_weight$$
            ]]>
       </sql>
    </sqlQuery>


  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- Generic Splice Site Query for TriTrypDB -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByGenericSpliceSites" includeProjects="TriTrypDB"  >
        <paramRef ref="geneParams.splice_site_generic"/>
        <paramRef ref="geneParams.splice_site_sample_one"/>
        <paramRef ref="geneParams.splice_site_sample_two"/>
        <paramRef ref="geneParams.percent_diff"/>
        <paramRef ref="geneParams.min_norm_count"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <column name="sample_one"/>
        <column name="sample_two"/>
        <column name="utr_len_one"/>
        <column name="utr_len_two"/>
        <column name="diff_cds_start"/>
      <sql>
          <![CDATA[
SELECT DISTINCT t1.source_id, 'Y' as matched_result, t1.sample_name AS sample_one,t2.sample_name AS sample_two,
   t1.dist_to_first_atg AS utr_len_one, t2.dist_to_first_atg AS utr_len_two,
   CASE WHEN (t1.first_atg_location = t2.first_atg_location) THEN 'no' ELSE 'yes' END as diff_cds_start,
  '@PROJECT_ID@' as project_id
FROM apidb.SpliceSiteGenes t1, apidb.SpliceSiteGenes t2
WHERE t1.external_database_release_id = $$splice_site_generic$$
AND t1.external_database_release_id = t2.external_database_release_id 
AND t1.is_dominant = 1 AND t2.is_dominant =1
AND t1.sample_name = '$$splice_site_sample_one$$'
AND t2.sample_name = '$$splice_site_sample_two$$'
AND t1.sample_name != t2.sample_name 
AND t1.source_id = t2.source_id 
AND t1.location != t2.location
AND t1.percent_fraction >= $$percent_diff$$
AND t2.percent_fraction >= $$percent_diff$$
AND t1.count_per_million >=$$min_norm_count$$
AND t2.count_per_million >=$$min_norm_count$$
          ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesByGenericSpliceSites" doNotTest="true" includeProjects="EuPathDB"
        processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="geneParams.splice_site_generic" quote="false"/>
        <paramRef ref="geneParams.splice_site_sample_one"/>
        <paramRef ref="geneParams.splice_site_sample_two"/>
        <paramRef ref="geneParams.percent_diff"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="sample_one" wsName="sample_one"/>
        <wsColumn name="utr_len_one" wsName="utr_len_one"/>
        <wsColumn name="sample_two" wsName="sample_two"/>
        <wsColumn name="utr_len_two" wsName="utr_len_two"/>
        <wsColumn name="diff_cds_start" wsName="diff_cds_start"/>
    </processQuery>



    <sqlQuery name="GenesWithUserComments" excludeProjects="EuPathDB">
        <paramRef ref="sharedParams.timestamp"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <sql>
            <![CDATA[
            SELECT DISTINCT ta.source_id, '@PROJECT_ID@' as project_id, ta.gene_source_id, 'Y' as matched_result
            FROM (SELECT stable_id
                         FROM @COMMENT_SCHEMA@MappedComment@COMMENT_DBLINK@
                         WHERE project_name = '@PROJECT_ID@'
                           AND is_visible = 1) comm, apidbtuning.transcriptattributes ta
            WHERE comm.stable_id = ta.gene_source_id
            or comm.stable_id = ta.source_id
            ]]>
       </sql>
    </sqlQuery>

    <processQuery name="GenesWithUserComments" includeProjects="EuPathDB"
             processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="sharedParams.timestamp"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
    </processQuery>

  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- Genes by Metabolic Pathways -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GenesByMetabolicPathway"  excludeProjects="EuPathDB,FungiDB"  >
        <paramRef ref="organismParams.organism"/>
        <paramRef ref="pathwayParams.pathways_source"/>
        <paramRef ref="pathwayParams.metabolic_pathway_id_with_genes"/>
	    <paramRef ref="pathwayParams.pathway_wildcard"/>
        <paramRef ref="pathwayParams.exact_match_only"/>
        <column name="project_id"/>
        <column name="gene_source_id"/>
        <column name="source_id"/>
        <column name="matched_result"/>
        <column name="ec_pathway"/>
        <column name="ec_gene"/>
      <sql>
          <![CDATA[
            SELECT DISTINCT gene_source_id
            , source_id
            , '@PROJECT_ID@' as project_id
            , 'Y' as matched_result
            , listagg (ec_pathway, ', ') within group (order by ec_pathway) as ec_pathway
            , listagg (ec_gene, ', ') within group (order by ec_pathway) as ec_gene
            FROM (
                SELECT DISTINCT gene_source_id
                , source_id
                , ec_pathway
                , listagg(ec_gene, ', ') within group (order by ec_gene) as ec_gene
                FROM (
                    SELECT DISTINCT gene_source_id
                    , source_id
                    , listagg (enzyme, ', ') within group (order by enzyme) as ec_pathway
                    , ec_number as ec_gene
                    FROM (
                        SELECT DISTINCT ta.gene_source_id
                        , ta.source_id
                        , pr.enzyme
                        , tp.ec_number
                        FROM apidbtuning.transcriptattributes ta
                        , apidbtuning.transcriptpathway tp
                        , apidbtuning.pathwayattributes pa
                        , apidbtuning.pathwaycompounds pc
                        , apidbtuning.pathwayreactions pr
                        WHERE (pa.pathway_id in ($$metabolic_pathway_id_with_genes$$)
                            OR lower(pa.name) LIKE REPLACE(REPLACE(REPLACE(REPLACE(lower($$pathway_wildcard$$),' ',''),'-', '%'),'*','%'),'any','%') )
                        AND pc.pathway_id = pa.pathway_id
                        AND tp.pathway_id = pa.pathway_id
                        AND ta.gene_source_id = tp.gene_source_id
                        AND pr.reaction_id = pc.reaction_id
                        AND pr.ext_db_name = pc.ext_db_name
                        AND ((tp.ec_number like replace (pr.enzyme, '-', '%') AND $$exact_match_only$$ = 0) OR (tp.ec_number = pr.enzyme AND $$exact_match_only$$ = 1))
                        AND ta.taxon_id in ($$organism$$)
                    )
                    GROUP BY gene_source_id, source_id, ec_number
                )
                GROUP BY gene_source_id, source_id, ec_pathway
            )
            GROUP BY gene_source_id, source_id
          ]]>
      </sql>
    </sqlQuery>

    <processQuery name="GenesByMetabolicPathway" includeProjects="EuPathDB"
        processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="pathwayParams.metabolic_pathway_id_with_genes" quote="false"/>
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
        <wsColumn name="name" wsName="name"/>
        <wsColumn name="pathway" wsName="pathway"/>
    </processQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Genes by Compounds -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <sqlQuery name="GenesByReactionCompounds"  excludeProjects="EuPathDB,FungiDB">
        <paramRef ref="organismParams.organism"/>
        <paramRef ref="compoundParams.chebi_compound_id"/>
        <paramRef ref="compoundParams.compound_type" />
        <paramRef ref="pathwayParams.exact_match_only"/>
        <paramRef ref="pathwayParams.pathways_source"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>
      <sql>
          <![CDATA[
            SELECT DISTINCT ta.source_id
            , ta.gene_source_id
            , 'Y' as matched_result
            , '@PROJECT_ID@' as project_id
            FROM apidbtuning.transcriptattributes ta
            , apidbtuning.transcriptpathway tp
            , apidbtuning.pathwaycompounds pc
            , apidbtuning.pathwayreactions pr
            , sres.externaldatabase ed
            , sres.externaldatabaserelease edr
            WHERE pc.chebi_accession in ($$chebi_compound_id$$)
            AND pr.reaction_id = pc.reaction_id
            AND pr.ext_db_name = pc.ext_db_name
            AND ((pr.is_reversible = 0 AND pc.type = $$compound_type$$) OR (pr.is_reversible = 1 AND $$compound_type$$ = 'substrate/product') OR $$compound_type$$ = 'either')
            AND tp.pathway_id = pc.pathway_id
            AND ((tp.ec_number like replace(pr.enzyme, '-', '%') AND $$exact_match_only$$ = 0) OR (tp.ec_number = pr.enzyme AND $$exact_match_only$$ = 1))
            AND ta.gene_source_id = tp.gene_source_id
            AND ta.taxon_id in ($$organism$$)
            AND ed.name = pc.ext_db_name
            AND edr.external_database_id = ed.external_database_id
            AND (edr.EXTERNAL_DATABASE_RELEASE_ID  = $$pathways_source$$ or $$pathways_source$$ = 1)
          ]]>
      </sql>
    </sqlQuery>
<!--
    <processQuery name="GenesByReactionCompounds" includeProjects="EuPathDB"
        processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="compoundParams.chebi_compound_id" noTranslation="true"/>
        <paramRef ref="compoundParams.compound_type" />
        <wsColumn name="source_id" width="50" wsName="source_id"/>
        <wsColumn name="gene_source_id" width="50" wsName="gene_source_id"/>
        <wsColumn name="project_id" width="20" wsName="ProjectId"/>
        <wsColumn name="matched_result" width="1" wsName="matched_result"/>
    </processQuery>
-->

    <sqlQuery name="GenesByPathwayIds" includeProjects="PlasmoDB"  >
        <paramRef ref="pathwayParams.pathway_result"/>
        <paramRef ref="organismParams.organism"/>
        <paramRef ref="pathwayParams.exact_match_only"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="wdk_weight" />
        <column name="gene_source_id"/>
        <column name="matched_result"/>
      <sql>
          <![CDATA[
            SELECT DISTINCT ta.source_id
            , ta.gene_source_id
            , '@PROJECT_ID@' as project_id
            , 'Y' as matched_result
            , max(ps.wdk_weight) as wdk_weight
            FROM apidbtuning.pathwayattributes pa
            , apidbtuning.transcriptpathway tp
            , apidbtuning.pathwaycompounds pc
            , apidbtuning.pathwayreactions pr
            , apidbtuning.transcriptattributes ta
            , ($$pathway_result$$) ps
            WHERE pa.source_id = ps.source_id
            AND pa.pathway_source = ps.pathway_source
            AND pc.pathway_id = pa.pathway_id
            AND tp.pathway_id = pa.pathway_id
            AND pr.reaction_id = pc.reaction_id
            AND pr.ext_db_name = pc.ext_db_name
            AND ((tp.ec_number like replace(pr.enzyme, '-', '%') AND $$exact_match_only$$ = 0) OR (tp.ec_number = pr.enzyme AND $$exact_match_only$$ = 1))
            AND ta.gene_source_id = tp.gene_source_id
            AND ta.taxon_id in ($$organism$$) 
            GROUP BY ta.source_id, ta.gene_source_id
          ]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="GenesByCompoundIds" includeProjects="PlasmoDB"  >
      <paramRef ref="compoundParams.compound_result"/>
      <paramRef ref="organismParams.organism"/>
      <paramRef ref="compoundParams.compound_type" />
      <paramRef ref="pathwayParams.pathways_source"/>
      <paramRef ref="pathwayParams.exact_match_only"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <column name="wdk_weight" />

      <sql>
          <![CDATA[
            SELECT DISTINCT ta.gene_source_id
            , ta.source_id
            , 'Y' as matched_result
            , '@PROJECT_ID@' as project_id
            , max (ds.wdk_weight) as wdk_weight
            FROM apidbtuning.pathwaycompounds pc
            , apidbtuning.pathwayreactions pr
            , apidbtuning.transcriptpathway tp
            , apidbtuning.transcriptattributes ta
            , sres.externaldatabase ed
            , sres.externaldatabaserelease edr
            , ($$compound_result$$) ds
            WHERE pc.chebi_accession = ds.source_id
            AND pr.reaction_id = pc.reaction_id
            AND pr.ext_db_name = pc.ext_db_name
            AND ((pr.is_reversible = 0 AND pc.type = $$compound_type$$) OR (pr.is_reversible = 1 AND $$compound_type$$ = 'substrate/product') OR $$compound_type$$ = 'either')
            AND ed.name = pc.ext_db_name
            AND edr.external_database_id = ed.external_database_id
            AND (edr.EXTERNAL_DATABASE_RELEASE_ID  = $$pathways_source$$ or $$pathways_source$$ = 1)
            AND tp.pathway_id = pc.pathway_id
            AND ((tp.ec_number like replace(pr.enzyme, '-', '%') AND $$exact_match_only$$ = 0) OR (tp.ec_number = pr.enzyme AND $$exact_match_only$$ = 1))
            AND ta.gene_source_id = tp.gene_source_id
            AND ta.taxon_id in ($$organism$$)
            GROUP BY ta.gene_source_id, ta.source_id
          ]]>
      </sql>
    </sqlQuery>

    <sqlQuery name="GenesByCopyNumber" includeProjects="TriTrypDB, PlasmoDB" >
        <paramRef ref="organismParams.organismSinglePick" queryRef="organismVQ.CNV"/>
        <paramRef ref="sharedParams.CNV_investigation"/>
        <paramRef ref="sharedParams.CNV_strain"/>
        <paramRef ref="geneParams.CNV_type" quote="false"/>
        <paramRef ref="geneParams.operator" quote="false"/>
        <paramRef ref="geneParams.copyNumber"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="wdk_weight"/>
        <column name="matched_result"/>
        <column name="strain"/>
        <column name="raw_estimate"/>
        <column name="ref_cn"/>
        <column name="haploid_number"/>
        <column name="ploidy"/>
        <column name="gene_dose"/>
        <sql>
            <![CDATA[
            select
            project_id
            , source_id
            , gene_source_id
            , 10 as wdk_weight
            , 'Y' as matched_result
            , strain
            , cast(raw_estimate as decimal(10,2)) as raw_estimate
            ,ref_cn
            , haploid_number
            , ploidy
            , haploid_number * ploidy as gene_dose
            from (
                select
                ta.PROJECT_ID
                , ta.SOURCE_ID
                , ta.GENE_SOURCE_ID
                , regexp_replace(pan.NAME, '_[A-Za-z0-9]+ (.+)$', '') as strain
                , gcn.HAPLOID_NUMBER as raw_estimate
                , gcn.REF_COPY_NUMBER as ref_cn
                , CASE WHEN (gcn.haploid_number < 0.01) THEN 0
                    WHEN (0.01 < gcn.haploid_number AND gcn.haploid_number < 1.85) THEN 1
                    ELSE round (gcn.haploid_number) END as haploid_number
                , ccn.CHR_COPY_NUMBER as ploidy
                from
                APIDB.GENECOPYNUMBER gcn
                , DOTS.GENEFEATURE gf
                , apidbtuning.transcriptattributes ta
                , STUDY.PROTOCOLAPPNODE pan
                , APIDB.CHRCOPYNUMBER ccn
                where gcn.PROTOCOL_APP_NODE_ID in ($$CNV_strain$$)
                and gcn.PROTOCOL_APP_NODE_ID = pan.PROTOCOL_APP_NODE_ID
                and gf.NA_FEATURE_ID = gcn.NA_FEATURE_ID
                and gf.SOURCE_ID = ta.gene_source_id
                and ccn.PROTOCOL_APP_NODE_ID in ($$CNV_strain$$)
                and ccn.NA_SEQUENCE_ID = gf.NA_SEQUENCE_ID
                and ta.GENE_TYPE = 'protein coding'
                and ta.CHROMOSOME is not null
            )   
            WHERE $$CNV_type$$ $$operator$$ $$copyNumber$$
            ORDER BY gene_source_id
            ]]>
          </sql>
    </sqlQuery>
    
    <sqlQuery name="GenesByCopyNumberComparison" includeProjects="TriTrypDB, PlasmoDB" >
        <paramRef ref="organismParams.organismSinglePick" queryRef="organismVQ.CNV"/>
        <paramRef ref="sharedParams.CNV_investigation"/>
        <paramRef ref="sharedParams.CNV_strain"/>
        <paramRef ref="geneParams.comparisonOperator" quote="false"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <column name="wdk_weight"/>
        <column name="strain"/>
        <column name="raw_estimate"/>
        <column name="ref_cn"/>
        <column name="haploid_number"/>
        <column name="ploidy"/>
        <column name="gene_dose"/>
        <sql>
            <![CDATA[
            select
            project_id
            , source_id
            , gene_source_id
            , 10 as wdk_weight
            , 'Y' as matched_result
            , strain
            , cast(raw_estimate as decimal(10,2)) as raw_estimate
            ,ref_cn
            , haploid_number
            , ploidy
            , haploid_number * ploidy as gene_dose
            from (
                select
                ta.PROJECT_ID
                , ta.SOURCE_ID
                , ta.GENE_SOURCE_ID
                , regexp_replace(pan.NAME, '_[A-Za-z0-9]+ (.+)$', '') as strain
                , gcn.HAPLOID_NUMBER as raw_estimate
                , gcn.REF_COPY_NUMBER as ref_cn
                , CASE WHEN (gcn.haploid_number < 0.01) THEN 0
                    WHEN (0.01 < gcn.haploid_number AND gcn.haploid_number < 1.85) THEN 1
                    ELSE round (gcn.haploid_number) END as haploid_number
                , ccn.CHR_COPY_NUMBER as ploidy
                from
                APIDB.GENECOPYNUMBER gcn
                , DOTS.GENEFEATURE gf
                , apidbtuning.transcriptattributes ta
                , STUDY.PROTOCOLAPPNODE pan
                , APIDB.CHRCOPYNUMBER ccn
                where gcn.PROTOCOL_APP_NODE_ID in ($$CNV_strain$$)
                and gcn.PROTOCOL_APP_NODE_ID = pan.PROTOCOL_APP_NODE_ID
                and gf.NA_FEATURE_ID = gcn.NA_FEATURE_ID
                and gf.SOURCE_ID = ta.gene_source_id
                and ccn.PROTOCOL_APP_NODE_ID in ($$CNV_strain$$)
                and ccn.NA_SEQUENCE_ID = gf.NA_SEQUENCE_ID
                and ta.GENE_TYPE = 'protein coding'
                and ta.CHROMOSOME is not null
            )
            WHERE haploid_number $$comparisonOperator$$ ref_cn
            ORDER BY gene_source_id
            ]]>
         </sql>
    </sqlQuery>
  
  </querySet>

  <querySet name="GeneTransforms" queryType="transform" isCacheable="true" doNotTest="true">

  <postCacheUpdateSql>
     <sql>
        <![CDATA[
           insert into ##WDK_CACHE_TABLE##
                       (wdk_instance_id, wdk_row_id, wdk_weight, source_id, gene_source_id, matched_result)
           with matches
                as (select *
                    from ##WDK_CACHE_TABLE##
                    where wdk_instance_id = ##WDK_CACHE_INSTANCE_ID##),
                row_offset
                as (select max(wdk_row_id) as the_max from matches),
                mismatches
                as (  select source_id, gene_source_id
                      from apidbTuning.transcriptAttributes
                      where gene_source_id in (select gene_source_id from matches)
                    minus
                      select source_id, gene_source_id
                      from matches)
           select ##WDK_CACHE_INSTANCE_ID##,
                  rownum + the_max, 0, source_id, gene_source_id, 'N'
           from row_offset, mismatches
        ]]>
     </sql>
  </postCacheUpdateSql>

    <sqlQuery name="GenesByMissingTranscripts"  >
        <paramRef ref="geneParams.gene_result"/>  <!-- actually transcripts -->
        <paramRef ref="geneParams.genesWithTranscripts" default="genes_missing_transcripts"/>
        <paramRef ref="geneParams.missingOrFoundTranscripts" default="missing_transcripts"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <column name="wdk_weight"/>
        <sql>
            <![CDATA[
               -- for the genes in this result, their transcripts that were not in the result (missing)
               WITH gene_result as $$gene_result$$,
               missing_transcripts as (
                 select ta.gene_source_id, ta.source_id, ta.project_id, 10 as wdk_weight
                 from (select distinct gene_source_id from gene_result) found_genes, apidbtuning.transcriptattributes ta
                 where found_genes.gene_source_id = ta.gene_source_id
                 minus
                 select gene_source_id, source_id, project_id, 10 as wdk_weight
                 from gene_result where matched_result = 'Y'
               )
              -- for the genes in this result that had missing transcripts, their missing transcripts
              select * from missing_transcripts
              where $$genesWithTranscripts$$ = 'genes_missing_transcripts'
              and   $$missingOrFoundTranscripts$$ = 'missing_transcripts'

              UNION

              -- for the genes in this result that had missing transcripts, all their transcripts
              select ta.gene_source_id, ta.source_id, ta.project_id, 10 as wdk_weight
              from missing_transcripts mt, apidbtuning.transcriptattributes ta
              where mt.gene_source_id = ta.gene_source_id
              and  $$genesWithTranscripts$$ = 'genes_missing_transcripts'
              and  $$missingOrFoundTranscripts$$ = 'all_transcripts'

              UNION

              -- for the genes in this result that had missing transcripts, all found transcripts
              select result.gene_source_id, result.source_id, result.project_id, 10 as wdk_weight
              from (select distinct gene_source_id from gene_result) found_genes, gene_result result
              where found_genes.gene_source_id = result.gene_source_id
              and  $$genesWithTranscripts$$ = 'genes_missing_transcripts'
              and  $$missingOrFoundTranscripts$$ = 'found_transcripts'

              UNION

              -- the genes in this result that did not have missing transcripts, and their transcripts (all)
              select gene_source_id, source_id, result.project_id, 10 as wdk_weight
              from gene_result result
              where result.gene_source_id not in (select distinct gene_source_id from missing_transcripts)
              and $$genesWithTranscripts$$ = 'genes_not_missing_transcripts'
            ]]>
       </sql>
    </sqlQuery>

    <sqlQuery name="GenesByExpandResult" includeProjects="ToxoDB"   >
        <paramRef ref="geneParams.gene_result"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="matched_result"/>
        <column name="wdk_weight"/>
        <sql>
            <![CDATA[
                    SELECT gb.source_id, gb.project_id, 'Y' as matched_result, max(c.wdk_weight) AS wdk_weight
                    FROM $$gene_result$$ c, ApidbTuning.GeneAttributes ga, ApidbTuning.GeneAttributes gb
                    WHERE ga.source_id = c.source_id
                    AND gb.gene_id = ga.gene_id
					GROUP BY gb.source_id, gb.project_id
            ]]>
       </sql>
    </sqlQuery>
<!--
    <sqlQuery name="GenesByExpandOrganism" includeProjects="ToxoDB">
        <paramRef ref="geneParams.gene_result"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="matched_result"/>
        <sql>
            <![CDATA[
                    SELECT gb.source_id, 'Y' as matched_result, gb.project_id
                    FROM $$gene_answer$$, ApidbTuning.GeneAttributes ga, ApidbTuning.GeneAttributes gb
                    WHERE $$gene_answer.condition$$
                    AND ga.source_id = $$gene_answer$$.source_id
                    AND gb.gene_id = ga.gene_id
                    AND gb.organism = ga.organism
            ]]>
       </sql>
    </sqlQuery>
-->

  </querySet>

  <querySet name="RealGeneTransforms" queryType="transform" isCacheable="true" doNotTest="true">

    <sqlQuery name="GenesFromTranscripts">
      <paramRef ref="geneParams.gene_result"/>
      <column name="project_id"/>
      <column name="source_id"/>
      <column name="wdk_weight"/>
      <sql>
        <![CDATA[
          SELECT distinct transcripts.gene_source_id as source_id, transcripts.project_id, sum(transcripts.wdk_weight) as wdk_weight
            FROM $$gene_result$$ transcripts
            GROUP BY (transcripts.gene_source_id, transcripts.project_id)
        ]]>
      </sql>
    </sqlQuery>

  </querySet>

</wdkModel>
