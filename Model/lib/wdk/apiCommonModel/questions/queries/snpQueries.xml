<wdkModel>

  <querySet name="SnpsBy" queryType="id" isCacheable="false" includeProjects="PlasmoDB,ToxoDB,EuPathDB,CryptoDB,AmoebaDB,TriTrypDB,FungiDB">

    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- ID -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
      <sqlQuery name="SnpBySourceId" doNotTest="true" includeProjects="PlasmoDB,ToxoDB,CryptoDB,AmoebaDB,TriTrypDB,FungiDB"  isCacheable="true">
          <paramRef ref="snpParams.snp_id"/>
	  <column name="source_id"/>
	  <column name="project_id"/>
        <sql>
	    <![CDATA[
	      SELECT distinct sf.source_id AS source_id, '@PROJECT_ID@' as project_id
	      FROM dots.SnpFeature sf, ($$snp_id$$) ds
	      WHERE sf.source_id = ds.source_id
	    ]]>
        </sql>
      </sqlQuery>

     <processQuery name="SnpBySourceId" includeProjects="EuPathDB" 
              doNotTest="true" 
              processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
          <paramRef ref="snpParams.snp_id" noTranslation="true" />
          <paramRef ref="sharedParams.wdk_user_signature" noTranslation="true"/>
	  <wsColumn name="source_id" width="50" wsName="source_id"/>
          <wsColumn name="project_id" width="32" wsName="project_id"/>
      </processQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Gene ID -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
      <sqlQuery name="SnpsByGeneId" doNotTest="true" includeProjects="PlasmoDB,ToxoDB,CryptoDB"
             isCacheable="true">
        <paramRef ref="sharedParams.ds_gene_ids" excludeProjects="CryptoDB,ToxoDB"/>
        <paramRef ref="sharedParams.ds_gene_ids" default="TGGT1_036630" includeProjects="ToxoDB"/>
        <paramRef ref="sharedParams.ds_gene_ids" default="cgd3_510" includeProjects="CryptoDB"/>
        <paramRef ref="organismParams.organism"  displayType="listBox" multiPick="false" 
                  quote="true" queryRef="organismVQ.withSNPs">
              <help>Select Organism you wish to query against</help>
        </paramRef>

        <paramRef ref="sharedParams.snp_strain_a"/>
        <paramRef ref="sharedParams.snp_strain_m"/>
        <column name="source_id"/>
        <column name="project_id"/>
        <column name="snp_location"/>
        <column name="ref_strain"/>
        <column name="comp_strains"/>
        <column name="ref_allele"/>
        <column name="comp_alleles"/>
        <column name="phenotype"/>
        <column name="prot_pos"/>
        <column name="ref_product"/>
        <column name="comp_products"/>

        <sql>
            <![CDATA[
select * from (
SELECT snpq.source_id, '@PROJECT_ID@' as project_id,snpq.snp_location,snpq.prot_pos,snpq.ref_allele,snpq.ref_product,                              
  apidb.tab_to_string(set(cast(COLLECT(distinct CASE WHEN snpq.allele_a != snpq.allele_b THEN snpq.comp_all END) AS apidb.varchartab)), ', ') as comp_alleles,                
  apidb.tab_to_string(set(cast(COLLECT(distinct CASE WHEN snpq.allele_a != snpq.allele_b THEN snpq.comp_product END) AS apidb.varchartab)), ', ') as comp_products,                
  apidb.tab_to_string(set(cast(COLLECT(distinct CASE WHEN snpq.allele_a != snpq.allele_b THEN snpq.phenotype END) AS apidb.varchartab)), ', ') as phenotype,                  
  apidb.tab_to_string(set(cast(COLLECT(CASE WHEN snpq.allele_a = snpq.allele_b THEN snpq.strain_b END) AS apidb.varchartab)), ', ') as ref_strain,              
  apidb.tab_to_string(set(cast(COLLECT(CASE WHEN snpq.allele_a != snpq.allele_b THEN snpq.strain_b END) AS apidb.varchartab)), ', ') as comp_strains 
FROM                 
  (SELECT /*+ ordered */ 
    hits.source_id as source_id,nas.source_id || ':' || trim(to_char(l.start_min,'999,999,999')) as snp_location,                               
    sva.strain as ref_strain, svb.strain as comp_strain,                               
    CASE WHEN gene_loc.is_reversed = 1 THEN apidb.reverse_complement(sva.allele)                                  
    ELSE sva.allele END as ref_allele,                 
    CASE WHEN gene_loc.is_reversed = 1 THEN apidb.reverse_complement(svb.allele)                                 
    ELSE svb.allele END as comp_all,                 
    CASE WHEN sva.product = svb.product then 'syn' WHEN sva.product != svb.product then 'non-syn' ELSE 'non-coding' END as phenotype,                               
    sva.product as ref_product, svb.product as comp_product,                           
    hits.position_in_protein as prot_pos,
    sva.allele as allele_a, svb.allele as allele_b, svb.strain as strain_b
  FROM 
    ( SELECT /*+ ordered */ 
      distinct gf.na_feature_id as gene_na_feature_id, gf.na_sequence_id, sf.na_feature_id as snp_na_feature_id,
      sf.position_in_protein,sf.source_id
      FROM ($$ds_gene_ids$$) ds,
           ApidbTuning.GeneId gi, dots.GeneFeature gf, dots.SnpFeature sf,
           dots.SeqVariation isva, dots.SeqVariation isvb,
            ( select distinct organism,extdb_name as name,external_database_release_id,is_queryable
              from apidbtuning.snpstrains) ss
      WHERE lower(gi.id) = lower(ds.source_id)
        AND gf.source_id = gi.gene
        AND gf.na_feature_id = sf.parent_id
        AND ss.organism = $$organism$$
        AND ss.is_queryable = 1
        AND sf.external_database_release_id = ss.external_database_release_id
        AND sf.na_feature_id = isva.parent_id
        AND sf.na_feature_id = isvb.parent_id
        AND isva.strain = $$snp_strain_a$$                               
        AND isvb.strain in ($$snp_strain_m$$)
        AND isva.allele != isvb.allele ) hits,
    dots.NaSequence nas, dots.NALocation gene_loc, dots.NALocation l,
    dots.SeqVariation sva, dots.SeqVariation svb
  WHERE hits.na_sequence_id = nas.na_sequence_id
    AND hits.gene_na_feature_id = gene_loc.na_feature_id
    AND hits.snp_na_feature_id = l.na_feature_id
    AND hits.snp_na_feature_id = sva.parent_id 
    AND hits.snp_na_feature_id = svb.parent_id 
    AND sva.strain = $$snp_strain_a$$                               
    AND svb.strain in ($$snp_strain_m$$)                             
    ) snpq                              
GROUP BY snpq.source_id,snpq.snp_location,snpq.prot_pos,snpq.ref_allele,snpq.ref_product
)
           ]]>
        </sql>

    </sqlQuery>

    <processQuery name="SnpsByGeneId" includeProjects="EuPathDB" doNotTest="true" 
             processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">

        <paramRef ref="sharedParams.ds_gene_ids" default="cgd3_510" noTranslation="true"/>
        <paramRef ref="organismParams.organism" displayType="listBox" multiPick="false" 
                  noTranslation="true"  queryRef="organismVQ.withSNPs">
              <help>Select Organism you wish to query against</help>
        </paramRef>
        <paramRef ref="sharedParams.snp_strain_a"  quote="false"/>
        <paramRef ref="sharedParams.snp_strain_m"  quote="false"/>
        <paramRef ref="sharedParams.wdk_user_signature" noTranslation="true"/>
        <wsColumn name="source_id"  width="50" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
        <wsColumn name="snp_location" width="32"/>
        <wsColumn name="ref_strain" width="32"/>
        <wsColumn name="comp_strains" width="32"/>
        <wsColumn name="ref_allele" width="32"/>
        <wsColumn name="comp_alleles" width="32"/>
        <wsColumn name="phenotype" width="32"/>
        <wsColumn name="prot_pos" width="32"/>
        <wsColumn name="ref_product" width="32"/>
        <wsColumn name="comp_products" width="32"/> 
    </processQuery>

      <sqlQuery name="HtsSnpsByGeneId" doNotTest="true" includeProjects="TriTrypDB,AmoebaDB,PlasmoDB,CryptoDB,FungiDB,ToxoDB"
             isCacheable="true">
        <paramRef ref="sharedParams.ds_gene_ids" default="EHI_012330" includeProjects="AmoebaDB"/>
        <paramRef ref="sharedParams.ds_gene_ids" default="TGME49_039250, TGGT1_075470" includeProjects="ToxoDB"/>
        <paramRef ref="sharedParams.ds_gene_ids" default="Tc00.1047053403869.10" includeProjects="TriTrypDB"/>
        <paramRef ref="sharedParams.ds_gene_ids" default="PF3D7_1133400" includeProjects="PlasmoDB"/>
        <paramRef ref="sharedParams.ds_gene_ids" default="cgd3_510" includeProjects="CryptoDB"/>
        <paramRef ref="sharedParams.ds_gene_ids" default="Afu1g00170" includeProjects="FungiDB"/>
        <paramRef ref="organismParams.organism" displayType="listBox" multiPick="false" 
                  quote="true" queryRef="organismVQ.withHtsSNPs">
              <help>Select Organism you wish to query against.</help>
        </paramRef>
        <paramRef ref="sharedParams.ontology_type"/>
        <paramRef ref="sharedParams.htsSnp_strain_a"/>
        <paramRef ref="sharedParams.htsSnp_strain_m"/>
        <paramRef ref="sharedParams.hts_snps_coverage" excludeProjects="ToxoDB,PlasmoDB"/>

        <paramRef ref="sharedParams.hts_snps_allele_freq" default="40" includeProjects="TriTrypDB,AmoebaDB"/> <!-- diploid -->
        <paramRef ref="sharedParams.hts_snps_allele_freq" default="80" includeProjects="CryptoDB,FungiDB"/> <!-- haploid -->
        <paramRef ref="sharedParams.hts_snps_pvalue" excludeProjects="ToxoDB,PlasmoDB"/>
        <column name="source_id"/>
        <column name="project_id"/>
        <column name="ref_strain"/>
        <column name="comp_strains"/>
        <column name="ref_allele"/>
        <column name="comp_alleles"/>
        <column name="phenotype"/>
        <column name="ref_product"/>
        <column name="comp_products"/>

        <sql includeProjects="PlasmoDB,ToxoDB">
            <![CDATA[
select snp.* from (
       with taxonQ as (select taxon_id from sres.TaxonName where name = $$organism$$)
       select source_id,
              '@PROJECT_ID@' as project_id, 
              apidb.tab_to_string(set(cast(COLLECT(distinct ref_allele) AS apidb.varchartab)), ', ') as ref_allele,
              apidb.tab_to_string(set(cast(COLLECT(distinct ref_product) AS apidb.varchartab)), ', ') as ref_product,
              apidb.tab_to_string(set(cast(COLLECT(distinct comp_allele) AS apidb.varchartab)), ', ') as comp_alleles,
              apidb.tab_to_string(set(cast(COLLECT(distinct comp_product) AS apidb.varchartab)), ', ') as comp_products,
              apidb.tab_to_string(set(cast(COLLECT(distinct phenotype) AS apidb.varchartab)), ', ') as phenotype,
              apidb.tab_to_string(set(cast(COLLECT(distinct ref_strain) AS apidb.varchartab)), ', ') as ref_strain,
              apidb.tab_to_string(set(cast(COLLECT(distinct comp_strain) AS apidb.varchartab)), ', ') as comp_strains
       from (
             SELECT -- variant-level info
                    ref.allele as ref_allele, 
                    ref.product as ref_product,
                    comp.allele as comp_allele, 
                    comp.product as comp_product,
                    case when ref.product = comp.product then 'syn'
                         when ref.product != comp.product then 'non-syn'
                         else 'non-coding'
                    end as phenotype,
                    ref.strain as ref_strain, 
                    comp.strain as comp_strain,
                    -- SNP-level info
                    ref.snp_source_id as source_id
             FROM   ApidbTuning.HtsVariant ref, ApidbTuning.HtsVariant comp, taxonQ
             WHERE  ref.snp_source_id = comp.snp_source_id
                AND ref.allele != comp.allele
                AND ref.species_taxon_id = taxonQ.taxon_id
                AND comp.species_taxon_id = taxonQ.taxon_id
                AND ref.strain = $$htsSnp_strain_a$$
                AND comp.strain in ($$htsSnp_strain_m$$)
          )
       group by source_id
       ) snp, APIDBTUNING.snpattributes sa, ($$ds_gene_ids$$) ds
       where snp.source_id = sa.source_id
       and sa.gene_source_id = ds.source_id
          ]]>
       </sql>


        <sql excludeProjects="PlasmoDB,ToxoDB">
            <![CDATA[
select distinct * from (
SELECT snpq.source_id, '@PROJECT_ID@' as project_id,snpq.snp_location,snpq.prot_pos,
  apidb.tab_to_string(set(cast(COLLECT(distinct snpq.ref_allele) AS apidb.varchartab)), ', ') as ref_allele,
  apidb.tab_to_string(set(cast(COLLECT(distinct snpq.ref_product) AS apidb.varchartab)), ', ') as ref_product,
  apidb.tab_to_string(set(cast(COLLECT(distinct CASE WHEN snpq.allele_a != snpq.allele_b THEN snpq.comp_all END) AS apidb.varchartab)), ', ') as comp_alleles,
  apidb.tab_to_string(set(cast(COLLECT(distinct CASE WHEN snpq.allele_a != snpq.allele_b THEN snpq.comp_product END) AS apidb.varchartab)), ', ') as comp_products,
  apidb.tab_to_string(set(cast(COLLECT(distinct CASE WHEN snpq.allele_a != snpq.allele_b THEN snpq.phenotype END) AS apidb.varchartab)), ', ') as phenotype,
  (SELECT DISTINCT strain FROM ApiDBTuning.SnpStrains WHERE strain = $$htsSnp_strain_a$$) as ref_strain,
  apidb.tab_to_string(set(cast(COLLECT(CASE WHEN snpq.allele_a != snpq.allele_b THEN snpq.strain_b END) AS apidb.varchartab)), ', ') as comp_strains
FROM
  (SELECT /*+ ordered */
    hits.source_id as source_id,nas.source_id || ':' || trim(to_char(l.start_min,'999,999,999')) as snp_location,
    sva.strain as ref_strain, svb.strain as comp_strain,
    CASE WHEN gene_loc.is_reversed = 1 THEN apidb.reverse_complement(sva.allele)
    ELSE sva.allele END as ref_allele,
    CASE WHEN gene_loc.is_reversed = 1 THEN apidb.reverse_complement(svb.allele)
    ELSE svb.allele END as comp_all,
    CASE WHEN sva.product = svb.product then 'syn' WHEN sva.product != svb.product then 'non-syn' ELSE 'non-coding' END as phenotype,
    sva.product as ref_product, svb.product as comp_product,
    hits.position_in_protein as prot_pos,
    sva.allele as allele_a, svb.allele as allele_b, svb.strain as strain_b
  FROM
    ( SELECT /*+ ordered */
      distinct gf.na_feature_id as gene_na_feature_id, gf.na_sequence_id, sf.na_feature_id as snp_na_feature_id,
      sf.position_in_protein,sf.source_id
      FROM ($$ds_gene_ids$$) ds,
           ApidbTuning.GeneId gi, dots.GeneFeature gf, dots.SnpFeature sf,
           dots.SeqVariation isva, dots.SeqVariation isvb,
            ( select distinct organism,extdb_name as name,external_database_release_id
              from apidbtuning.snpstrains) ss
      WHERE lower(gi.id) = lower(ds.source_id)
        AND gf.source_id = gi.gene
        AND gf.na_feature_id = sf.parent_id
        AND ss.organism = $$organism$$
        AND ss.name = 'InsertSnps.pm NGS SNPs INTERNAL'
        AND sf.external_database_release_id = ss.external_database_release_id
        AND sf.na_feature_id = isva.parent_id
        AND sf.na_feature_id = isvb.parent_id
        AND isva.strain = $$htsSnp_strain_a$$
        AND isvb.strain in ($$htsSnp_strain_m$$)
        AND isva.allele != isvb.allele
        AND (isva.pvalue is null or isva.pvalue <= $$hts_snps_pvalue$$)
        AND (isva.allele_percent is null or isva.allele_percent  >= $$hts_snps_allele_freq$$)
        AND (isva.coverage is null or isva.coverage >= $$hts_snps_coverage$$)
        AND (isvb.pvalue is null or isvb.pvalue <= $$hts_snps_pvalue$$)
        AND (isvb.allele_percent is null or isvb.allele_percent >= $$hts_snps_allele_freq$$)
        AND (isvb.coverage is null or isvb.coverage >= $$hts_snps_coverage$$)
        ) hits,
    dots.NaSequence nas, dots.NALocation gene_loc, dots.NALocation l,
    dots.SeqVariation sva, dots.SeqVariation svb
  WHERE hits.na_sequence_id = nas.na_sequence_id
    AND hits.gene_na_feature_id = gene_loc.na_feature_id
    AND hits.snp_na_feature_id = l.na_feature_id
    AND hits.snp_na_feature_id = sva.parent_id
    AND hits.snp_na_feature_id = svb.parent_id
    AND sva.strain = $$htsSnp_strain_a$$
    AND svb.strain in ($$htsSnp_strain_m$$)
    ) snpq
GROUP BY snpq.source_id,snpq.snp_location,snpq.prot_pos
)
           ]]>
        </sql>

    </sqlQuery>

    <processQuery name="HtsSnpsByGeneId" includeProjects="EuPathDB" doNotTest="true" 
             processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="sharedParams.ds_gene_ids"  default="EHI_012330" noTranslation="true"/>
        <paramRef ref="organismParams.organism" displayType="listBox" multiPick="false" 
                  noTranslation="true"  queryRef="organismVQ.withHtsSNPs">
              <help>Select Organism you wish to query against.</help>
        </paramRef>
        <paramRef ref="sharedParams.ontology_type"/>
        <paramRef ref="sharedParams.htsSnp_strain_a"  quote="false" />
        <paramRef ref="sharedParams.htsSnp_strain_m"  quote="false" />
        <paramRef ref="sharedParams.hts_snps_coverage" noTranslation="true"/>
        <paramRef ref="sharedParams.hts_snps_allele_freq" noTranslation="true"/>
        <paramRef ref="sharedParams.hts_snps_pvalue" noTranslation="true"/>
        <paramRef ref="sharedParams.wdk_user_signature" noTranslation="true"/>
        <wsColumn name="source_id"  width="50" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
        <wsColumn name="snp_location" width="32"/>
        <wsColumn name="ref_strain" width="32"/>
        <wsColumn name="comp_strains" width="32"/>
        <wsColumn name="ref_allele" width="32"/>
        <wsColumn name="comp_alleles" width="32"/>
        <wsColumn name="phenotype" width="32"/>
        <wsColumn name="prot_pos" width="32"/>
        <wsColumn name="ref_product" width="32"/>
        <wsColumn name="comp_products" width="32"/> 
    </processQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Location -->
    <!-- 
         This query contains two nested inline views.  The 
         inner, named "hits", identifies SNPs within the given 
         genomic region for which the reference strain has a 
         different allele from at least one of the others.  The 
         outer inline view, "snpq", has one row for each SNP for 
         each strain (e.g. (100 SNPs) x (1 reference + 3 other 
         strains) = 400 records).  At the top level, the query 
         itself then groups all rows of a SNP into a single row 
         (which, for the above example, would mean grouping four 
         rows into one).
         
         It seems necessary to have these three levels in the 
         query's structure, but it might be possible to optimize 
         within each level.  For instance, the innermost query must 
         join dots.SnpFeature to dots.NaLocation.  A big 
         materialized view could precompute this join. -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
    <sqlQuery name="SnpsByLocation" includeProjects="PlasmoDB,ToxoDB,CryptoDB" isCacheable="true">
 
        <testParamValues includeProjects="CryptoDB">
            <paramValue name="snp_strain_m">md</paramValue>
            <paramValue name="chromosomeOptional">2</paramValue>
        </testParamValues>
        <testParamValues includeProjects="ToxoDB">
            <paramValue name="snp_strain_m">ME49</paramValue>
	    <paramValue name="snp_strain_a">GT1</paramValue>
            <paramValue name="chromosomeOptional">III</paramValue>
        </testParamValues>
       <testParamValues includeProjects="PlasmoDB">
            <paramValue name="snp_strain_m">Pf-Dd2</paramValue>
            <paramValue name="snp_strain_a">Pf-3D7</paramValue>
            <paramValue name="chromosomeOptional">1</paramValue>
        </testParamValues>

        <paramRef ref="organismParams.organism" displayType="listBox" multiPick="false" 
                  quote="true" queryRef="organismVQ.withChromosomesSNPs">
              <help>Select Organism you wish to query against.</help>
        </paramRef>

         <paramRef ref="sharedParams.chromosomeOptional" queryRef="SharedVQ.ChromosomeOrderNumMultipickForSnps" multiPick="false"/>
          <paramRef ref="sharedParams.sequenceId"/>
          <paramRef ref="sharedParams.start_point"/>
          <paramRef ref="sharedParams.end_point"/>
          <paramRef ref="sharedParams.snp_strain_a"/>
          <paramRef ref="sharedParams.snp_strain_m"/>
          <column name="source_id"/>
	  <column name="project_id"/>
          <column name="gene"/>
          <column name="snp_location"/>
          <column name="ref_strain"/>
          <column name="comp_strains"/>
          <column name="ref_allele"/>
          <column name="comp_alleles"/>
          <column name="phenotype"/>
          <column name="prot_pos"/>
          <column name="ref_product"/>
          <column name="comp_products"/>

        <sql includeProjects="PlasmoDB,ToxoDB,CryptoDB">
            <![CDATA[
SELECT snp.source_id, 
       '@PROJECT_ID@' as project_id, 
       snp.gene_source_id as gene, 
       snp.start_min as snp_location,
       snp.position_in_protein as prot_pos, 
       variants.ref_allele, 
       variants.ref_product, 
       variants.comp_alleles,
       variants.comp_products, 
       variants.phenotype, 
       variants.ref_strain, 
       variants.comp_strains
FROM ApidbTuning.SnpAttributes snp,
    ( SELECT parent_id,
             apidb.tab_to_string(set(cast(COLLECT(distinct ref_allele) AS apidb.varchartab)), ', ') as ref_allele,
             apidb.tab_to_string(set(cast(COLLECT(distinct ref_product) AS apidb.varchartab)), ', ') as ref_product,
             apidb.tab_to_string(set(cast(COLLECT(distinct comp_allele) AS apidb.varchartab)), ', ') as comp_alleles,
             apidb.tab_to_string(set(cast(COLLECT(distinct comp_product) AS apidb.varchartab)), ', ') as comp_products,
             apidb.tab_to_string(set(cast(COLLECT(distinct phenotype) AS apidb.varchartab)), ', ') as phenotype,
             apidb.tab_to_string(set(cast(COLLECT(distinct ref_strain) AS apidb.varchartab)), ', ') as ref_strain,
             apidb.tab_to_string(set(cast(COLLECT(distinct comp_strain) AS apidb.varchartab)), ', ') as comp_strains 
      FROM  (SELECT ref.parent_id, 
                    ref.allele as ref_allele, 
                    ref.product as ref_product,
                    comp.allele as comp_allele, 
                    comp.product as comp_product,
                    case when ref.product = comp.product then 'syn'
                         when ref.product != comp.product then 'non-syn'
                         else 'non-coding'
                    end as phenotype,
                    ref.strain as ref_strain, 
                    comp.strain as comp_strain
             FROM   dots.SeqVariation ref, dots.SeqVariation comp
             WHERE  ref.parent_id = comp.parent_id
                AND ref.allele != comp.allele
                AND ref.organism = $$organism$$
                AND ref.strain = $$snp_strain_a$$
                AND comp.strain in ($$snp_strain_m$$))
             GROUP BY parent_id) variants
WHERE snp.na_feature_id = variants.parent_id
  AND snp.dataset in ( select distinct ss.extdb_name from Apidbtuning.snpstrains ss where is_queryable = 1)
  AND (chromosome in ( $$chromosomeOptional$$ ) OR lower(source_id) = lower($$sequenceId$$) ) 
           ]]>
        </sql>
    </sqlQuery>

    <processQuery name="SnpsByLocation" includeProjects="EuPathDB" doNotTest="true"
             processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" >

        <testParamValues>
            <paramValue name="snp_strain_m">md</paramValue>
            <paramValue name="chromosomeOptional">2</paramValue>
            <paramValue name="organism">Cryptosporidium parvum Iowa II</paramValue>
        </testParamValues>

          <paramRef ref="organismParams.organism" queryRef="organismVQ.withChromosomesSNPs"  multiPick="false"  noTranslation="true">
              <help>Select Organism you wish to query against.</help>
          </paramRef>
          <paramRef ref="sharedParams.chromosomeOptional" quote="false" queryRef="SharedVQ.ChromosomeOrderNumMultipickForSnps" 
		    multiPick="false" noTranslation="true" />
          <paramRef ref="sharedParams.start_point"/>
          <paramRef ref="sharedParams.end_point"/>
          <paramRef ref="sharedParams.snp_strain_a" quote="false"/>
          <paramRef ref="sharedParams.snp_strain_m" quote="false"/>
          <wsColumn name="source_id" width="50" wsName="source_id"/>
          <wsColumn name="project_id" width="32" wsName="project_id"/>
          <wsColumn name="gene" width="32"/>
          <wsColumn name="snp_location" width="32"/>
          <wsColumn name="ref_strain" width="32"/>
          <wsColumn name="comp_strains" width="32"/>
          <wsColumn name="ref_allele" width="32"/>
          <wsColumn name="comp_alleles" width="32"/>
          <wsColumn name="phenotype" width="32"/>
          <wsColumn name="prot_pos" width="32"/>
          <wsColumn name="ref_product" width="32"/>
          <wsColumn name="comp_products" width="32"/>
      </processQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
    <sqlQuery name="HtsSnpsByLocation" includeProjects="TriTrypDB,AmoebaDB,PlasmoDB,CryptoDB,ToxoDB,FungiDB" isCacheable="true">
 
        <testParamValues includeProjects="ToxoDB">
            <paramValue name="snp_strain_m">Tg-VEG (type III)</paramValue>
            <paramValue name="chromosomeOptional">III</paramValue>
        </testParamValues>
        <testParamValues includeProjects="TriTrypDB">
            <paramValue name="htsSnp_strain_a">Tb-427</paramValue>
            <paramValue name="htsSnp_strain_m">Tb-927</paramValue>
            <paramValue name="chromosomeOptional">1</paramValue>
            <paramValue name="organism">Trypanosoma brucei TREU927</paramValue>
        </testParamValues>

        <paramRef ref="organismParams.organism" displayType="listBox" multiPick="false" quote="true" queryRef="organismVQ.withChromosomesHtsSNPs" excludeProjects="AmoebaDB">
              <help>Select Organism you wish to query against.</help>
        </paramRef>


        <paramRef ref="organismParams.organism" displayType="listBox" multiPick="false" quote="true" queryRef="organismVQ.withHtsSNPs" includeProjects="AmoebaDB">
              <help>Select Organism you wish to query against.</help>
        </paramRef>


         <paramRef ref="sharedParams.chromosomeOptional" queryRef="SharedVQ.ChromosomeOrderNumMultipick" multiPick="false" excludeProjects="AmoebaDB"/>
          <paramRef ref="sharedParams.sequenceId"/>
          <paramRef ref="sharedParams.start_point"/>
          <paramRef ref="sharedParams.end_point"/>
          <paramRef ref="sharedParams.ontology_type"/>
          <paramRef ref="sharedParams.htsSnp_strain_a"/>
          <paramRef ref="sharedParams.htsSnp_strain_m"/>
          <paramRef ref="sharedParams.hts_snps_coverage" excludeProjects="PlasmoDB,ToxoDB"/>
          <paramRef ref="sharedParams.hts_snps_allele_freq" default="40" includeProjects="TriTrypDB,AmoebaDB"/>
          <paramRef ref="sharedParams.hts_snps_allele_freq" default="80" includeProjects="CryptoDB,FungiDB"/>
          <paramRef ref="sharedParams.hts_snps_pvalue" excludeProjects="PlasmoDB,ToxoDB"/>
          <column name="source_id"/>
	  <column name="project_id"/>
          <column name="ref_strain"/>
          <column name="comp_strains"/>
          <column name="ref_allele"/>
          <column name="comp_alleles"/>
          <column name="phenotype"/>
          <column name="ref_product"/>
          <column name="comp_products"/>

     <sqlParamValue name="chrOptional" excludeProjects="AmoebaDB">
                <![CDATA[
	AND (snp.chromosome in ( $$chromosomeOptional$$ ) OR lower(snp.seq_source_id) = lower($$sequenceId$$) ) 
                ]]>
       </sqlParamValue>
       <sqlParamValue name="chrOptional" includeProjects="AmoebaDB" >
                <![CDATA[
	AND lower(snp.seq_source_id) = lower($$sequenceId$$)
                ]]>
       </sqlParamValue>



        <sql includeProjects="PlasmoDB,ToxoDB">
            <![CDATA[
select var.* from (
       with taxonQ as (select taxon_id from sres.TaxonName where name = $$organism$$)
       select source_id,
              '@PROJECT_ID@' as project_id, 
              apidb.tab_to_string(set(cast(COLLECT(distinct ref_allele) AS apidb.varchartab)), ', ') as ref_allele,
              apidb.tab_to_string(set(cast(COLLECT(distinct ref_product) AS apidb.varchartab)), ', ') as ref_product,
              apidb.tab_to_string(set(cast(COLLECT(distinct comp_allele) AS apidb.varchartab)), ', ') as comp_alleles,
              apidb.tab_to_string(set(cast(COLLECT(distinct comp_product) AS apidb.varchartab)), ', ') as comp_products,
              apidb.tab_to_string(set(cast(COLLECT(distinct phenotype) AS apidb.varchartab)), ', ') as phenotype,
              apidb.tab_to_string(set(cast(COLLECT(distinct ref_strain) AS apidb.varchartab)), ', ') as ref_strain,
              apidb.tab_to_string(set(cast(COLLECT(distinct comp_strain) AS apidb.varchartab)), ', ') as comp_strains
       from (
             SELECT -- variant-level info
                    ref.allele as ref_allele, 
                    ref.product as ref_product,
                    comp.allele as comp_allele, 
                    comp.product as comp_product,
                    case when ref.product = comp.product then 'syn'
                         when ref.product != comp.product then 'non-syn'
                         else 'non-coding'
                    end as phenotype,
                    ref.strain as ref_strain, 
                    comp.strain as comp_strain,
                    -- SNP-level info
                    ref.snp_source_id as source_id
             FROM   ApidbTuning.HtsVariant ref, ApidbTuning.HtsVariant comp, taxonQ
             WHERE  ref.snp_source_id = comp.snp_source_id
                AND ref.allele != comp.allele
                AND ref.species_taxon_id = taxonQ.taxon_id
                AND comp.species_taxon_id = taxonQ.taxon_id
                AND ref.strain = $$htsSnp_strain_a$$
                AND comp.strain in ($$htsSnp_strain_m$$)
          )
       group by source_id
       ) var, apidbtuning.snpattributes snp
       where var.source_id = snp.source_id
       AND snp.type = 'HTS'
       AND snp.start_min >= REGEXP_REPLACE('$$start_point$$', ',| ','')
       AND (snp.start_min <= REGEXP_REPLACE('$$end_point$$', ',| ','') OR REGEXP_REPLACE('$$end_point$$', ',| ','') = 0)
       &&chrOptional&&
          ]]>
       </sql>


        <sql excludeProjects="PlasmoDB,ToxoDB">
            <![CDATA[
SELECT snp.source_id, 
       '@PROJECT_ID@' as project_id, 
       snp.gene_source_id as gene, 
       snp.start_min as snp_location,
       snp.position_in_protein as prot_pos, 
       variants.ref_allele, 
       variants.ref_product, 
       variants.comp_alleles,
       variants.comp_products, 
       variants.phenotype, 
       variants.ref_strain, 
       variants.comp_strains
FROM ApidbTuning.SnpAttributes snp,
    ( SELECT parent_id,
             apidb.tab_to_string(set(cast(COLLECT(distinct ref_allele) AS apidb.varchartab)), ', ') as ref_allele,
             apidb.tab_to_string(set(cast(COLLECT(distinct ref_product) AS apidb.varchartab)), ', ') as ref_product,
             apidb.tab_to_string(set(cast(COLLECT(distinct comp_allele) AS apidb.varchartab)), ', ') as comp_alleles,
             apidb.tab_to_string(set(cast(COLLECT(distinct comp_product) AS apidb.varchartab)), ', ') as comp_products,
             apidb.tab_to_string(set(cast(COLLECT(distinct phenotype) AS apidb.varchartab)), ', ') as phenotype,
             apidb.tab_to_string(set(cast(COLLECT(distinct ref_strain) AS apidb.varchartab)), ', ') as ref_strain,
             apidb.tab_to_string(set(cast(COLLECT(distinct comp_strain) AS apidb.varchartab)), ', ') as comp_strains 
      FROM  (SELECT ref.parent_id, 
                    ref.allele as ref_allele, 
                    ref.product as ref_product,
                    comp.allele as comp_allele, 
                    comp.product as comp_product,
                    case when ref.product = comp.product then 'syn'
                         when ref.product != comp.product then 'non-syn'
                         else 'non-coding'
                    end as phenotype,
                    ref.strain as ref_strain, 
                    comp.strain as comp_strain
             FROM   dots.SeqVariation ref, dots.SeqVariation comp
             WHERE  ref.parent_id = comp.parent_id
                AND ref.allele != comp.allele
                AND ref.organism = $$organism$$
                AND comp.organism = $$organism$$
                AND ref.strain = $$htsSnp_strain_a$$
                AND (ref.coverage >= $$hts_snps_coverage$$ or ref.coverage is null)
                AND (ref.allele_percent >= $$hts_snps_allele_freq$$ or ref.allele_percent is null)
                AND (ref.pvalue <= $$hts_snps_pvalue$$ or ref.pvalue is null)
                AND comp.strain in ($$htsSnp_strain_m$$)
                AND (comp.coverage >= $$hts_snps_coverage$$ or comp.coverage is null)
                AND (comp.allele_percent >= $$hts_snps_allele_freq$$ or comp.allele_percent is null)
                AND (comp.pvalue <= $$hts_snps_pvalue$$ or comp.pvalue is null))
             GROUP BY parent_id) variants
WHERE snp.na_feature_id = variants.parent_id
  --AND snp.dataset = 'InsertSnps.pm NGS SNPs INTERNAL' 
  AND snp.type = 'HTS'
        &&chrOptional&&
           ]]>
        </sql>

    </sqlQuery>


    <processQuery name="HtsSnpsByLocation" includeProjects="EuPathDB"
             processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" >

        <testParamValues>
            <paramValue name="snp_strain_m">md</paramValue>
            <paramValue name="chromosomeOptional">chromosome 2</paramValue>
            <paramValue name="organism">Cryptosporidium parvum Iowa II</paramValue>
        </testParamValues>

          <paramRef ref="organismParams.organism" queryRef="organismVQ.withChromosomesHtsSNPs"  multiPick="false" default="Plasmodium falciparum 3D7" noTranslation="true">
              <help>Select Organism you wish to query against.</help>
          </paramRef>
          <paramRef ref="sharedParams.chromosomeOptional" quote="false" queryRef="SharedVQ.ChromosomeOrderNumMultipick" 
		    multiPick="false" noTranslation="true"/>
          <paramRef ref="sharedParams.sequenceId"  default="DS571145"/>
          <paramRef ref="sharedParams.start_point"/>
          <paramRef ref="sharedParams.end_point"/>
          <paramRef ref="sharedParams.ontology_type"/>
          <paramRef ref="sharedParams.htsSnp_strain_a"  quote="false"/>
          <paramRef ref="sharedParams.htsSnp_strain_m"  quote="false"/>
          <paramRef ref="sharedParams.hts_snps_coverage"/>
          <paramRef ref="sharedParams.hts_snps_allele_freq"/>
          <paramRef ref="sharedParams.hts_snps_pvalue"/>
          <wsColumn name="source_id" width="50" wsName="source_id"/>
          <wsColumn name="project_id" width="32" wsName="project_id"/>
          <wsColumn name="gene" width="32"/>
          <wsColumn name="snp_location" width="32"/>
          <wsColumn name="ref_strain" width="32"/>
          <wsColumn name="comp_strains" width="32"/>
          <wsColumn name="ref_allele" width="32"/>
          <wsColumn name="comp_alleles" width="32"/>
          <wsColumn name="phenotype" width="32"/>
          <wsColumn name="prot_pos" width="32"/>
          <wsColumn name="ref_product" width="32"/>
          <wsColumn name="comp_products" width="32"/>
      </processQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- by strain                                      -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
    <sqlQuery name="SnpsByStrain" includeProjects="PlasmoDB,ToxoDB,CryptoDB" isCacheable="true">
 
        <testParamValues includeProjects="CryptoDB">
            <paramValue name="snp_strain_m">md</paramValue>
        </testParamValues>
        <testParamValues includeProjects="ToxoDB">
            <paramValue name="snp_strain_m">ME49</paramValue>
	    <paramValue name="snp_strain_a">GT1</paramValue>
        </testParamValues>
       <testParamValues includeProjects="PlasmoDB">
            <paramValue name="snp_strain_m">Pf-Dd2</paramValue>
            <paramValue name="snp_strain_a">Pf-3D7</paramValue>
        </testParamValues>

        <paramRef ref="organismParams.organism" displayType="listBox" multiPick="false" 
                  quote="true" queryRef="organismVQ.withChromosomesSNPs">
              <help>Select Organism you wish to query against.</help>
        </paramRef>

          <paramRef ref="sharedParams.snp_strain_a"/>
          <paramRef ref="sharedParams.snp_strain_m"/>
          <column name="source_id"/>
          <column name="project_id"/>
          <column name="gene"/>
          <column name="snp_location"/>
          <column name="ref_strain"/>
          <column name="comp_strains"/>
          <column name="ref_allele"/>
          <column name="comp_alleles"/>
          <column name="phenotype"/>
          <column name="prot_pos"/>
          <column name="ref_product"/>
          <column name="comp_products"/>

        <sql includeProjects="PlasmoDB,ToxoDB,CryptoDB">
            <![CDATA[
SELECT snp.source_id, 
       '@PROJECT_ID@' as project_id, 
       snp.gene_source_id as gene, 
       snp.start_min as snp_location,
       snp.position_in_protein as prot_pos, 
       variants.ref_allele, 
       variants.ref_product, 
       variants.comp_alleles,
       variants.comp_products, 
       variants.phenotype, 
       variants.ref_strain, 
       variants.comp_strains
FROM ApidbTuning.SnpAttributes snp,
    ( SELECT parent_id,
             apidb.tab_to_string(set(cast(COLLECT(distinct ref_allele) AS apidb.varchartab)), ', ') as ref_allele,
             apidb.tab_to_string(set(cast(COLLECT(distinct ref_product) AS apidb.varchartab)), ', ') as ref_product,
             apidb.tab_to_string(set(cast(COLLECT(distinct comp_allele) AS apidb.varchartab)), ', ') as comp_alleles,
             apidb.tab_to_string(set(cast(COLLECT(distinct comp_product) AS apidb.varchartab)), ', ') as comp_products,
             apidb.tab_to_string(set(cast(COLLECT(distinct phenotype) AS apidb.varchartab)), ', ') as phenotype,
             apidb.tab_to_string(set(cast(COLLECT(distinct ref_strain) AS apidb.varchartab)), ', ') as ref_strain,
             apidb.tab_to_string(set(cast(COLLECT(distinct comp_strain) AS apidb.varchartab)), ', ') as comp_strains 
      FROM  (SELECT ref.parent_id, 
                    ref.allele as ref_allele, 
                    ref.product as ref_product,
                    comp.allele as comp_allele, 
                    comp.product as comp_product,
                    case when ref.product = comp.product then 'syn'
                         when ref.product != comp.product then 'non-syn'
                         else 'non-coding'
                    end as phenotype,
                    ref.strain as ref_strain, 
                    comp.strain as comp_strain
             FROM   dots.SeqVariation ref, dots.SeqVariation comp
             WHERE  ref.parent_id = comp.parent_id
                AND ref.allele != comp.allele
                AND ref.organism = $$organism$$
                AND ref.strain = $$snp_strain_a$$
                AND comp.strain in ($$snp_strain_m$$))
             GROUP BY parent_id) variants
WHERE snp.na_feature_id = variants.parent_id
  AND snp.dataset in ( select distinct ss.extdb_name from Apidbtuning.snpstrains ss where is_queryable = 1)
           ]]>
       </sql>
    </sqlQuery>

    <processQuery name="SnpsByStrain" includeProjects="EuPathDB" doNotTest="true"
             processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" >

        <testParamValues>
            <paramValue name="snp_strain_m">md</paramValue>
            <paramValue name="organism">Cryptosporidium parvum Iowa II</paramValue>
        </testParamValues>

          <paramRef ref="organismParams.organism" queryRef="organismVQ.withChromosomesSNPs"  multiPick="false"  noTranslation="true">
              <help>Select Organism you wish to query against.</help>
          </paramRef>
          <paramRef ref="sharedParams.snp_strain_a" quote="false"/>
          <paramRef ref="sharedParams.snp_strain_m" quote="false"/>
          <wsColumn name="source_id" width="50" wsName="source_id"/>
          <wsColumn name="project_id" width="32" wsName="project_id"/>
          <wsColumn name="gene" width="32"/>
          <wsColumn name="snp_location" width="32"/>
          <wsColumn name="ref_strain" width="32"/>
          <wsColumn name="comp_strains" width="32"/>
          <wsColumn name="ref_allele" width="32"/>
          <wsColumn name="comp_alleles" width="32"/>
          <wsColumn name="phenotype" width="32"/>
          <wsColumn name="prot_pos" width="32"/>
          <wsColumn name="ref_product" width="32"/>
          <wsColumn name="comp_products" width="32"/>
      </processQuery>

    <sqlQuery name="HtsSnpsByStrain" includeProjects="TriTrypDB,AmoebaDB,PlasmoDB,CryptoDB,ToxoDB,FungiDB" isCacheable="true">

        <testParamValues includeProjects="ToxoDB">
            <paramValue name="snp_strain_m">Tg-VEG (type III)</paramValue>
        </testParamValues>
        <testParamValues includeProjects="TriTrypDB">
            <paramValue name="htsSnp_strain_a">Tb-427</paramValue>
            <paramValue name="htsSnp_strain_m">Tb-927</paramValue>
            <paramValue name="organism">Trypanosoma brucei TREU927</paramValue>
        </testParamValues>
 
        <paramRef ref="organismParams.organism" displayType="listBox" multiPick="false" quote="true" queryRef="organismVQ.withHtsSNPs">
              <help>Select Organism you wish to query against.</help>
        </paramRef>
          <paramRef ref="sharedParams.ontology_type"/>
          <paramRef ref="sharedParams.htsSnp_strain_a"/>
          <paramRef ref="sharedParams.htsSnp_strain_m"/>
          <paramRef ref="sharedParams.hts_snps_coverage" excludeProjects="PlasmoDB,ToxoDB"/>
          <paramRef ref="sharedParams.hts_snps_allele_freq" default="40" includeProjects="TriTrypDB,AmoebaDB"/>
          <paramRef ref="sharedParams.hts_snps_allele_freq" default="80" includeProjects="CryptoDB,FungiDB"/>
          <paramRef ref="sharedParams.hts_snps_pvalue" excludeProjects="PlasmoDB,ToxoDB"/>
          <column name="source_id"/>
          <column name="project_id"/>
          <column name="ref_strain"/>
          <column name="comp_strains"/>
          <column name="ref_allele"/>
          <column name="comp_alleles"/>
          <column name="phenotype"/>
          <column name="ref_product"/>
          <column name="comp_products"/>

        <sql excludeProjects="PlasmoDB,ToxoDB">
            <![CDATA[
SELECT snp.source_id, 
       '@PROJECT_ID@' as project_id, 
       snp.start_min as snp_location,
       snp.position_in_protein as prot_pos, 
       variants.ref_allele, 
       variants.ref_product, 
       variants.comp_alleles,
       variants.comp_products, 
       variants.phenotype, 
       variants.ref_strain, 
       variants.comp_strains
FROM ApidbTuning.SnpAttributes snp,
    ( SELECT parent_id,
             apidb.tab_to_string(set(cast(COLLECT(distinct ref_allele) AS apidb.varchartab)), ', ') as ref_allele,
             apidb.tab_to_string(set(cast(COLLECT(distinct ref_product) AS apidb.varchartab)), ', ') as ref_product,
             apidb.tab_to_string(set(cast(COLLECT(distinct comp_allele) AS apidb.varchartab)), ', ') as comp_alleles,
             apidb.tab_to_string(set(cast(COLLECT(distinct comp_product) AS apidb.varchartab)), ', ') as comp_products,
             apidb.tab_to_string(set(cast(COLLECT(distinct phenotype) AS apidb.varchartab)), ', ') as phenotype,
             apidb.tab_to_string(set(cast(COLLECT(distinct ref_strain) AS apidb.varchartab)), ', ') as ref_strain,
             apidb.tab_to_string(set(cast(COLLECT(distinct comp_strain) AS apidb.varchartab)), ', ') as comp_strains
      FROM  (SELECT ref.parent_id, 
                    ref.allele as ref_allele, 
                    ref.product as ref_product,
                    comp.allele as comp_allele, 
                    comp.product as comp_product,
                    case when ref.product = comp.product then 'syn'
                         when ref.product != comp.product then 'non-syn'
                         else 'non-coding'
                    end as phenotype,
                    ref.strain as ref_strain, 
                    comp.strain as comp_strain
             FROM   dots.SeqVariation ref, dots.SeqVariation comp
             WHERE  ref.parent_id = comp.parent_id
                AND ref.allele != comp.allele
                AND ref.organism = $$organism$$
                AND comp.organism = $$organism$$
                AND ref.strain = $$htsSnp_strain_a$$
                AND (ref.coverage >= $$hts_snps_coverage$$ or ref.coverage is null)
                AND (ref.allele_percent >= $$hts_snps_allele_freq$$ or ref.allele_percent is null)
                AND (ref.pvalue <= $$hts_snps_pvalue$$ or ref.pvalue is null)
                AND comp.strain in ($$htsSnp_strain_m$$)
                AND (comp.coverage >= $$hts_snps_coverage$$ or comp.coverage is null)
                AND (comp.allele_percent >= $$hts_snps_allele_freq$$ or comp.allele_percent is null)
                AND (comp.pvalue <= $$hts_snps_pvalue$$ or comp.pvalue is null))
             GROUP BY parent_id) variants
WHERE snp.na_feature_id = variants.parent_id
  --AND snp.dataset = 'InsertSnps.pm NGS SNPs INTERNAL' 
  AND type = 'HTS'
          ]]>
       </sql>

        <sql includeProjects="PlasmoDB,ToxoDB">
            <![CDATA[
       with taxonQ as (select taxon_id from sres.TaxonName where name = $$organism$$)
       select source_id,
              '@PROJECT_ID@' as project_id, 
              apidb.tab_to_string(set(cast(COLLECT(distinct ref_allele) AS apidb.varchartab)), ', ') as ref_allele,
              apidb.tab_to_string(set(cast(COLLECT(distinct ref_product) AS apidb.varchartab)), ', ') as ref_product,
              apidb.tab_to_string(set(cast(COLLECT(distinct comp_allele) AS apidb.varchartab)), ', ') as comp_alleles,
              apidb.tab_to_string(set(cast(COLLECT(distinct comp_product) AS apidb.varchartab)), ', ') as comp_products,
              apidb.tab_to_string(set(cast(COLLECT(distinct phenotype) AS apidb.varchartab)), ', ') as phenotype,
              apidb.tab_to_string(set(cast(COLLECT(distinct ref_strain) AS apidb.varchartab)), ', ') as ref_strain,
              apidb.tab_to_string(set(cast(COLLECT(distinct comp_strain) AS apidb.varchartab)), ', ') as comp_strains
       from (
             SELECT -- variant-level info
                    ref.allele as ref_allele, 
                    ref.product as ref_product,
                    comp.allele as comp_allele, 
                    comp.product as comp_product,
                    case when ref.product = comp.product then 'syn'
                         when ref.product != comp.product then 'non-syn'
                         else 'non-coding'
                    end as phenotype,
                    ref.strain as ref_strain, 
                    comp.strain as comp_strain,
                    -- SNP-level info
                    ref.snp_source_id as source_id
             FROM   ApidbTuning.HtsVariant ref, ApidbTuning.HtsVariant comp, taxonQ
             WHERE  ref.snp_source_id = comp.snp_source_id
                AND ref.allele != comp.allele
                AND ref.species_taxon_id = taxonQ.taxon_id
                AND comp.species_taxon_id = taxonQ.taxon_id
                AND ref.strain = $$htsSnp_strain_a$$
                AND comp.strain in ($$htsSnp_strain_m$$)
          )
       group by source_id
          ]]>
       </sql>
    </sqlQuery>

    <processQuery name="HtsSnpsByStrain" includeProjects="EuPathDB"
             processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" >

        <testParamValues>
            <paramValue name="snp_strain_m">md</paramValue>
            <paramValue name="organism">Cryptosporidium parvum Iowa II</paramValue>
        </testParamValues>

          <paramRef ref="organismParams.organism" queryRef="organismVQ.withHtsSNPs"  multiPick="false" default="Plasmodium falciparum 3D7" noTranslation="true">
              <help>Select Organism you wish to query against.</help>
          </paramRef>
          <paramRef ref="sharedParams.ontology_type"/>
          <paramRef ref="sharedParams.htsSnp_strain_a"  quote="false"/>
          <paramRef ref="sharedParams.htsSnp_strain_m"  quote="false"/>
          <paramRef ref="sharedParams.hts_snps_coverage"/>
          <paramRef ref="sharedParams.hts_snps_allele_freq"/>
          <paramRef ref="sharedParams.hts_snps_pvalue"/>
          <wsColumn name="source_id" width="50" wsName="source_id"/>
          <wsColumn name="project_id" width="32" wsName="project_id"/>
          <wsColumn name="gene" width="32"/>
          <wsColumn name="snp_location" width="32"/>
          <wsColumn name="ref_strain" width="32"/>
          <wsColumn name="comp_strains" width="32"/>
          <wsColumn name="ref_allele" width="32"/>
          <wsColumn name="comp_alleles" width="32"/>
          <wsColumn name="phenotype" width="32"/>
          <wsColumn name="prot_pos" width="32"/>
          <wsColumn name="ref_product" width="32"/>
          <wsColumn name="comp_products" width="32"/>
      </processQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- HTS SNPs by Minor Allele Frequency -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
    <sqlQuery name="HTSSnpsByAlleleFrequency" includeProjects="AmoebaDB,CryptoDB,PlasmoDB,ToxoDB,TriTrypDB" 
          isCacheable="true">
        <paramRef ref="organismParams.organism" displayType="listBox" multiPick="false" quote="true" queryRef="organismVQ.withHtsSNPs5Strains">
            <help>Select Organism (which has at least 5 strains) you wish to query against.</help>
        </paramRef>
        <paramRef ref="snpParams.minor_allele_min"/>
        <paramRef ref="snpParams.minor_allele_max"/>
        <paramRef ref="snpParams.min_strain_count"/>
        <column name="source_id"/> 
        <column name="project_id"/>
        <column name="mjr_allele" includeProjects="PlasmoDB,ToxoDB"/>
        <column name="mnr_allele" includeProjects="PlasmoDB,ToxoDB"/>
        <column name="mjr_product" includeProjects="PlasmoDB,ToxoDB"/>
        <column name="mnr_product" includeProjects="PlasmoDB,ToxoDB"/>
        <column name="mjr_allele_frequency" includeProjects="PlasmoDB,ToxoDB"/>
        <column name="mnr_allele_frequency" includeProjects="PlasmoDB,ToxoDB"/>
        <sql excludeProjects="PlasmoDB,ToxoDB">
            <![CDATA[
              select source_id,project_id
              from ApidbTuning.SnpAttributes 
              where dataset = 'InsertSnps.pm NGS SNPs INTERNAL'
              and minor_allele_frequency >= $$minor_allele_min$$
              and minor_allele_frequency <= $$minor_allele_max$$
              and strain_count >= $$min_strain_count$$
              and organism = $$organism$$
           ]]>
        </sql>
        <sql includeProjects="PlasmoDB,ToxoDB">
            <![CDATA[
              select source_id, '@PROJECT_ID@' as project_id,
                     major_allele as mjr_allele, minor_allele as mnr_allele, major_product as mjr_product,
                     minor_product as mnr_product,
                     major_allele_frequency as mjr_allele_frequency, minor_allele_frequency as mnr_allele_frequency
              from ApidbTuning.GoodHtsSnp
              where minor_allele_frequency >= $$minor_allele_min$$
              and minor_allele_frequency <= $$minor_allele_max$$
              and strain_count >= $$min_strain_count$$
              and taxon_id = (select taxon_id from sres.TaxonName where name = $$organism$$)
           ]]>
        </sql>
    </sqlQuery>

    <processQuery name="HTSSnpsByAlleleFrequency" includeProjects="EuPathDB"
             processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">

        <paramRef ref="organismParams.organism" queryRef="organismVQ.withHtsSNPs5Strains"  multiPick="false"  noTranslation="true">
            <help>Select Organism (which has at least 5 strains) you wish to query against.</help>
        </paramRef> 
        <paramRef ref="snpParams.min_strain_count" />
        <paramRef ref="snpParams.minor_allele_min" />
        <paramRef ref="snpParams.minor_allele_max" />
        <wsColumn name="source_id" width="32" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
        <wsColumn name="minor_alleles"/>
        <wsColumn name="minor_products"/>
        <wsColumn name="minor_strains"/>
        <wsColumn name="major_strains"/>
    </processQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Isolate Pattern -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="SnpsByIsolatePattern" doNotTest="true" includeProjects="PlasmoDB" 
          isCacheable="true">
        <paramRef ref="snpParams.isolate_set_a"/>
        <paramRef ref="snpParams.set_a_percent"/>
        <paramRef ref="snpParams.isolate_set_b"/>
        <paramRef ref="snpParams.set_b_percent"/>
        <column name="source_id"/> 
        <column name="project_id"/>
        <column name="set_a_allele"/>
        <column name="set_b_allele"/>
        <column name="set_a_count"/>
        <column name="set_b_count"/>
        <sql>
            <![CDATA[
              select seta.snp_source_id as source_id,'@PROJECT_ID@' as project_id,
              seta.allele as set_a_allele,setb.allele as set_b_allele,
              seta.total as set_a_count, setb.total as set_b_count
              from (select isnp.snp_source_id,isnp.allele,count(*) as total
              from ApidbTuning.IsolateSNPs isnp, ($$isolate_set_a$$) ds
              where isnp.is_source_id = ds.source_id
              and isnp.allele is not null
              and isnp.snp_db_name = 'pfal3D7_SNP_combined_Su_Broad_Sanger_gff_RSRC'
              group by isnp.snp_source_id,isnp.allele
              having count(*) >= (select count(*) from ($$isolate_set_a$$)) * $$set_a_percent$$ / 100) seta,
              (select isnp.snp_source_id,isnp.allele, count(*) as total
              from ApidbTuning.IsolateSNPs isnp, ($$isolate_set_b$$) ds
              where isnp.is_source_id = ds.source_id
              and isnp.allele is not null
              and isnp.snp_db_name = 'pfal3D7_SNP_combined_Su_Broad_Sanger_gff_RSRC'
              group by isnp.snp_source_id,isnp.allele
              having count(*) >= (select count(*) from ($$isolate_set_b$$)) * $$set_b_percent$$ / 100) setb
              where seta.snp_source_id = setb.snp_source_id
              and seta.allele != setb.allele
           ]]>
       </sql>
    </sqlQuery>

    <processQuery name="SnpsByIsolatePattern" includeProjects="EuPathDB" doNotTest="true"
             processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="sharedParams.wdk_user_signature" noTranslation="true"/>
        <paramRef ref="snpParams.isolate_set_a"/>
        <paramRef ref="snpParams.set_a_percent"/>
        <paramRef ref="snpParams.isolate_set_b"/>
        <paramRef ref="snpParams.set_b_percent"/>
   
        <wsColumn name="source_id" width="32" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
        <wsColumn name="set_a_allele"/>
        <wsColumn name="set_b_allele"/>
        <wsColumn name="set_a_count"/>
        <wsColumn name="set_b_count"/>
    </processQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Isolate Comparison -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="HtsSnpsByIsolateComparison" doNotTest="true" includeProjects="AmoebaDB,PlasmoDB,TriTrypDB,ToxoDB" 
          isCacheable="true">
        <paramRef ref="organismParams.organism" displayType="listBox" multiPick="false" quote="true" queryRef="organismVQ.withHtsSNPs">
              <help>Select Organism you wish to query against.</help>
        </paramRef>
        <paramRef ref="sharedParams.ontology_type"/>
        <paramRef ref="snpParams.hts_isolate_set_a"/>
        <paramRef ref="snpParams.set_a_percent" default="80"/>
        <paramRef ref="snpParams.hts_isolate_set_b"/>
        <paramRef ref="snpParams.set_b_percent" default="80"/>
        <column name="source_id"/> 
        <column name="project_id"/>
        <column name="set_a_allele"/>
        <column name="set_b_allele"/>
        <column name="set_a_count" excludeProjects="PlasmoDB,ToxoDB"/>
        <column name="set_b_count" excludeProjects="PlasmoDB,ToxoDB"/>
        <column name="set_a_percent" includeProjects="PlasmoDB,ToxoDB"/>
        <column name="set_b_percent" includeProjects="PlasmoDB,ToxoDB"/>
        <sql excludeProjects="PlasmoDB,ToxoDB">
            <![CDATA[
SELECT sf.source_id, '@PROJECT_ID@' as project_id, 
       set_a_allele, set_b_allele, set_a_count, set_b_count
FROM   dots.snpfeature sf,
       ( SELECT seta.parent_id,
                apidb.tab_to_string(set(cast(COLLECT(distinct seta.allele) AS apidb.varchartab)), ', ') as set_a_allele,
                apidb.tab_to_string(set(cast(COLLECT(distinct setb.allele) AS apidb.varchartab)), ', ') as set_b_allele,
                sum(seta.total) as set_a_count, 
                sum(setb.total) as set_b_count
         FROM  ( SELECT isnp.parent_id,isnp.allele,count(*) as total
                 FROM   dots.seqvariation isnp
                 WHERE  isnp.strain in ( $$hts_isolate_set_a$$ )
                    AND isnp.allele is not null
                 GROUP BY isnp.parent_id,isnp.allele
                 HAVING count(*) >= ( SELECT count(*) 
                                      FROM TABLE( SYS.DBMS_DEBUG_VC2COLL( $$hts_isolate_set_a$$ ) ))  *  $$set_a_percent$$ / 100
               ) seta,
               ( SELECT isnp.parent_id,isnp.allele, count(*) as total
                 FROM   dots.seqvariation isnp
                 WHERE isnp.strain in ($$hts_isolate_set_b$$)
                   AND isnp.allele is not null
                 GROUP BY isnp.parent_id,isnp.allele
                 HAVING count(*) >= (SELECT count(*) 
                                     FROM TABLE( SYS.DBMS_DEBUG_VC2COLL( $$hts_isolate_set_b$$ ) ))  *  $$set_b_percent$$ / 100
               )  setb
         WHERE seta.parent_id = setb.parent_id
           AND seta.allele != setb.allele
         GROUP by seta.parent_id 
       ) iso
WHERE iso.parent_id = sf.na_feature_id
           ]]>
        </sql>
        <sql includeProjects="PlasmoDB,ToxoDB">
           <![CDATA[
              SELECT seta.snp_source_id as source_id, '@PROJECT_ID@' as project_id,
                     apidb.tab_to_string(set(cast(COLLECT(distinct seta.allele) AS apidb.varchartab)), ', ') as set_a_allele,
                     apidb.tab_to_string(set(cast(COLLECT(distinct setb.allele) AS apidb.varchartab)), ', ') as set_b_allele,
                     sum(seta_percent) as set_a_percent, 
                     sum(setb_percent) as set_b_percent
              FROM  ( SELECT isnp.snp_source_id, isnp.allele, count(*) as total,
                         round(count(*) / ( SELECT count(*) 
                          FROM TABLE( SYS.DBMS_DEBUG_VC2COLL( $$hts_isolate_set_a$$ ) )),3) * 100 as seta_percent
                      FROM ApidbTuning.HtsVariant isnp
                      WHERE  isnp.strain in ( $$hts_isolate_set_a$$ )
                      GROUP BY isnp.snp_source_id, isnp.allele
                      HAVING count(*) >= ( SELECT count(*) 
                                           FROM TABLE( SYS.DBMS_DEBUG_VC2COLL( $$hts_isolate_set_a$$ ) ))  *  $$set_a_percent$$ / 100
                    ) seta,
                    ( SELECT isnp.snp_source_id, isnp.allele, count(*) as total,
                         round(count(*) / ( SELECT count(*) 
                          FROM TABLE( SYS.DBMS_DEBUG_VC2COLL( $$hts_isolate_set_b$$ ) )),3) * 100 as setb_percent
                      FROM ApidbTuning.HtsVariant isnp
                      WHERE isnp.strain in ($$hts_isolate_set_b$$)
                      GROUP BY isnp.snp_source_id, isnp.allele
                      HAVING count(*) >= (SELECT count(*) 
                                          FROM TABLE( SYS.DBMS_DEBUG_VC2COLL( $$hts_isolate_set_b$$ ) ))  *  $$set_b_percent$$ / 100
                    )  setb
              WHERE seta.snp_source_id = setb.snp_source_id
                AND seta.allele != setb.allele
              GROUP by seta.snp_source_id
           ]]>
        </sql>
    </sqlQuery>

    <processQuery name="HtsSnpsByIsolateComparison" includeProjects="EuPathDB" doNotTest="true"
             processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="sharedParams.wdk_user_signature" noTranslation="true"/>
        <paramRef ref="snpParams.hts_isolate_set_a"/>
        <paramRef ref="snpParams.set_a_percent"/>
        <paramRef ref="snpParams.hts_isolate_set_b"/>
        <paramRef ref="snpParams.set_b_percent"/>
   
        <wsColumn name="source_id" width="32" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
        <wsColumn name="set_a_allele"/>
        <wsColumn name="set_b_allele"/>
        <wsColumn name="set_a_count"/>
        <wsColumn name="set_b_count"/>
    </processQuery>


  <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Isolate Pattern by history id -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="SnpsByIsolatePatternHistory" includeProjects="PlasmoDB" 
          isCacheable="true">
        <paramRef ref="sharedParams.isolateHistoryIdA"/>
        <paramRef ref="snpParams.set_a_count"/>
        <paramRef ref="sharedParams.isolateHistoryIdB"/>
        <paramRef ref="snpParams.set_b_count"/>
        <column name="source_id"/> 
        <column name="project_id"/>
        <column name="set_a_allele"/>
        <column name="set_b_allele"/>
        <column name="wdk_weight"/>
        <sql>
            <![CDATA[
              select seta.snp_source_id as source_id,'@PROJECT_ID@' as project_id,
              seta.allele as set_a_allele,setb.allele as set_b_allele,
              0 AS wdk_weight
              from (select isnp.snp_source_id,isnp.allele
              from ApidbTuning.IsolateSNPs isnp
              where isnp.is_source_id in (select distinct source_id from $$isolateHitoryIdA$$)
              and isnp.allele is not null
              and isnp.snp_db_name = 'pfal3D7_SNP_combined_Su_Broad_Sanger_gff_RSRC'
              group by isnp.snp_source_id,isnp.allele
              having count(*) >= $$set_a_count$$) seta,
              (select isnp.snp_source_id,isnp.allele
              from ApidbTuning.IsolateSNPs isnp
              where isnp.is_source_id in (select distinct source_id from $$isolateHitoryIdB$$)
              and isnp.allele is not null
              and isnp.snp_db_name = 'pfal3D7_SNP_combined_Su_Broad_Sanger_gff_RSRC'
              group by isnp.snp_source_id,isnp.allele
              having count(*) >= $$set_b_count$$) setb
              where seta.snp_source_id = setb.snp_source_id
              and seta.allele != setb.allele
           ]]>
       </sql>
    </sqlQuery>

    <processQuery name="SnpsByIsolatePatternHistory" includeProjects="EuPathDB"
             processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="sharedParams.isolateHistoryIdA"/>
        <paramRef ref="snpParams.set_a_count"/>
        <paramRef ref="sharedParams.isolateHistoryIdB"/>
        <paramRef ref="snpParams.set_b_count"/>
        <wsColumn name="source_id" width="32" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
        <wsColumn name="set_a_allele"/>
        <wsColumn name="set_b_allele"/>
        <wsColumn name="wdk_weight" columnType="number" width="12"/>
    </processQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Isolate assay type -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="SnpsByIsolateType" includeProjects="PlasmoDB" 
          isCacheable="true">
        <paramRef ref="isolateParams.snp_assay_type"/>
        <column name="source_id"/> 
        <column name="project_id"/>
        <sql>
            <![CDATA[
              select distinct snp_source_id as source_id, '@PROJECT_ID@' as project_id
              from ApidbTuning.IsolateSNPs isnp, ApidbTuning.IsolateAttributes atr
              where atr.source_id = isnp.is_source_id
              and atr.data_type in ($$snp_assay_type$$)
              and isnp.snp_db_name = 'pfal3D7_SNP_combined_Su_Broad_Sanger_gff_RSRC'
           ]]>
       </sql>
    </sqlQuery>

    <processQuery name="SnpsByIsolateType" includeProjects="EuPathDB"
             processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="isolateParams.snp_assay_type" quote="false" />
        <wsColumn name="source_id" width="32" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
    </processQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Isolate source id -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="SnpsByIsolateId" includeProjects="PlasmoDB" 
          isCacheable="true">
         <testParamValues includeProjects="PlasmoDB">
            <paramValue name="isolate_id">CPHD.273727</paramValue>
         </testParamValues>
        <paramRef ref="snpParams.isolate_id"/>
        <column name="source_id"/> 
        <column name="project_id"/>
        <column name="isolate_allele"/>
        <column name="is_source_id"/>
        <sql>
            <![CDATA[
              select isnp.snp_source_id as source_id, $$isolate_id$$ as is_source_id, 
                     isnp.allele as isolate_allele, '@PROJECT_ID@' as project_id
              from ApidbTuning.IsolateSNPs isnp, ApidbTuning.SnpAttributes sa
              where isnp.is_source_id = $$isolate_id$$
              and isnp.allele is not null
              and isnp.snp_db_name = 'pfal3D7_SNP_combined_Su_Broad_Sanger_gff_RSRC'
              and isnp.snp_source_id = sa.source_id
           ]]>
       </sql>
    </sqlQuery>


    <sqlQuery name="ByWeightFilter" isCacheable="true" doNotTest="true">
        <paramRef ref="snpParams.snp_result"/>
        <paramRef ref="sharedParams.min_weight" default="0"/>
        <paramRef ref="sharedParams.max_weight" default="100"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="wdk_weight" />
        <sql>
            <![CDATA[
            SELECT a.source_id, a.project_id, a.wdk_weight
            FROM $$snp_result$$ a
            WHERE a.wdk_weight >= $$min_weight$$
              AND a.wdk_weight <= $$max_weight$$
            ]]>
       </sql>
    </sqlQuery>




  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- Dont Care - fake query for internal use -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="DontCare" doNotTest="true" isCacheable="true">
        <column name="project_id"/>
        <column name="source_id"/>
        <sql>
            select source_id, project_id
            from ApidbTuning.snpattributes
            where source_id = 'life_is_sweet' 
        </sql>
    </sqlQuery>
    
  </querySet>

</wdkModel>
