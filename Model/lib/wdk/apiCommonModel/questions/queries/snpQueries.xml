<wdkModel>

  <querySet name="SnpsBy" queryType="id" isCacheable="false" includeProjects="PlasmoDB,ToxoDB,EuPathDB,CryptoDB,AmoebaDB,TriTrypDB">

    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- NGS SNP ID -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
      <sqlQuery name="NgsSnpBySourceId" doNotTest="true" includeProjects="PlasmoDB,ToxoDB,CryptoDB,AmoebaDB,TriTrypDB"  isCacheable="true">
          <paramRef ref="snpParams.ngs_snp_id"/>
	  <column name="source_id"/>
	  <column name="project_id"/>
        <sql>
	    <![CDATA[
	      SELECT distinct s.source_id AS source_id, '@PROJECT_ID@' as project_id
	      FROM apidb.snp s, ($$ngs_snp_id$$) ds
	      WHERE s.source_id = ds.source_id
	    ]]>
        </sql>
      </sqlQuery>

     <processQuery name="NgsSnpBySourceId" includeProjects="EuPathDB" 
              doNotTest="true" 
              processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
          <paramRef ref="snpParams.snp_id" noTranslation="true" />
          <paramRef ref="sharedParams.wdk_user_signature" noTranslation="true"/>
	  <wsColumn name="source_id" width="50" wsName="source_id"/>
          <wsColumn name="project_id" width="32" wsName="project_id"/>
      </processQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- SNP ID -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
      <sqlQuery name="SnpBySourceId" doNotTest="true" includeProjects="PlasmoDB"  isCacheable="true">
          <paramRef ref="snpParams.snp_id"/>
	  <column name="source_id"/>
	  <column name="project_id"/>
        <sql>
	    <![CDATA[
	      SELECT distinct sf.source_id AS source_id, '@PROJECT_ID@' as project_id
	      FROM dots.SnpFeature sf, ($$snp_id$$) ds
	      WHERE sf.source_id = ds.source_id
	    ]]>
        </sql>
      </sqlQuery>

     <processQuery name="SnpBySourceId" includeProjects="EuPathDB" 
              doNotTest="true" 
              processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
          <paramRef ref="snpParams.snp_id" noTranslation="true" />
          <paramRef ref="sharedParams.wdk_user_signature" noTranslation="true"/>
	  <wsColumn name="source_id" width="50" wsName="source_id"/>
          <wsColumn name="project_id" width="32" wsName="project_id"/>
      </processQuery>





    <processQuery name="NgsSnpsByIsolateGroup" includeProjects="PlasmoDB,ToxoDB,TriTrypDB,CryptoDB,AmoebaDB"  
             processName="org.apidb.apicomplexa.wsfplugin.highspeedsnpsearch.FindPolymorphismsPlugin">

      <!-- need to have quote=true so that dependent param query works.  the wsf plugin remove the for its use -->
      <paramRef ref="organismParams.organism" prompt="Organism" displayType="listBox" multiPick="false" quote="true" queryRef="organismVQ.withNgsSNPs">
        <help>Select the organism you wish to search.  Note: this is the genome to which the isolate resequencing reads were aligned.</help>
      </paramRef>
      <paramRef ref="sharedParams.ngsSnp_strain_meta" quote="false" />
      <paramRef ref="snpParams.WebServicesPath"/>
      <paramRef ref="snpParams.ReadFrequencyPercent" />
      <paramRef ref="snpParams.MinPercentMinorAlleles"/>
      <paramRef ref="snpParams.MinPercentIsolateCalls"/>
      <wsColumn name="source_id" width="60" wsName="SourceId"/>
      <wsColumn name="project_id" width="20" wsName="ProjectId"/>
      <wsColumn name="PercentMinorAlleles" width="3" columnType="float"/>
      <wsColumn name="PercentIsolateCalls" width="3" columnType="float"/>
      <wsColumn name="Phenotype" width="12"/>
    </processQuery>

    <processQuery name="NgsSnpsByLocation" includeProjects="PlasmoDB,ToxoDB,TriTrypDB,CryptoDB,AmoebaDB"  
             processName="org.apidb.apicomplexa.wsfplugin.highspeedsnpsearch.FindPolymorphismsWithSeqFilterPlugin">

      <!-- need to have quote=true so that dependent param query works.  the wsf plugin remove the for its use -->
      <paramRef ref="organismParams.organism" prompt="Organism" displayType="listBox" multiPick="false" quote="true" queryRef="organismVQ.withNgsSNPs">
        <help>Select the organism you wish to search.  Note: this is the genome to which the isolate resequencing reads were aligned.</help>
      </paramRef>
      <paramRef ref="sharedParams.chromosomeOptionalForNgsSnps" multiPick="false"/>
      <paramRef ref="sharedParams.sequenceId"/>
      <paramRef ref="sharedParams.start_point"/>
      <paramRef ref="sharedParams.end_point"/>
      <paramRef ref="sharedParams.ngsSnp_strain_meta" quote="false" />
      <paramRef ref="snpParams.WebServicesPath"/>
      <paramRef ref="snpParams.ReadFrequencyPercent" />
      <paramRef ref="snpParams.MinPercentMinorAlleles"/>
      <paramRef ref="snpParams.MinPercentIsolateCalls"/>
      <wsColumn name="source_id" width="60" wsName="SourceId"/>
      <wsColumn name="project_id" width="20" wsName="ProjectId"/>
      <wsColumn name="PercentMinorAlleles" width="3" columnType="float"/>
      <wsColumn name="PercentIsolateCalls" width="3" columnType="float"/>
      <wsColumn name="Phenotype" width="12"/>
    </processQuery>

    <processQuery name="NgsSnpsByGeneIds" includeProjects="PlasmoDB,ToxoDB,TriTrypDB,CryptoDB,AmoebaDB"  
             processName="org.apidb.apicomplexa.wsfplugin.highspeedsnpsearch.FindSnpsByGeneIdsPlugin">

      <!-- need to have quote=true so that dependent param query works.  the wsf plugin remove the for its use -->
      <paramRef ref="organismParams.organism" prompt="Organism" displayType="listBox" multiPick="false" quote="true" queryRef="organismVQ.withNgsSNPs">
        <help>Select the organism you wish to search.  Note: this is the genome to which the isolate resequencing reads were aligned.</help>
      </paramRef>
      <paramRef ref="sharedParams.ds_gene_ids" default="EHI_012330" includeProjects="AmoebaDB"/>
      <paramRef ref="sharedParams.ds_gene_ids" default="TGME49_039250, TGGT1_075470" includeProjects="ToxoDB"/>
      <paramRef ref="sharedParams.ds_gene_ids" default="TcCLB.403869.10" includeProjects="TriTrypDB"/>
      <paramRef ref="sharedParams.ds_gene_ids" default="PF3D7_1133400" includeProjects="PlasmoDB"/>
      <paramRef ref="sharedParams.ds_gene_ids" default="cgd3_510" includeProjects="CryptoDB"/>
      <paramRef ref="sharedParams.ngsSnp_strain_meta" quote="false" />
      <paramRef ref="snpParams.WebServicesPath"/>
      <paramRef ref="snpParams.ReadFrequencyPercent" />
      <paramRef ref="snpParams.MinPercentMinorAlleles"/>
      <paramRef ref="snpParams.MinPercentIsolateCalls"/>
      <wsColumn name="source_id" width="60" wsName="SourceId"/>
      <wsColumn name="project_id" width="20" wsName="ProjectId"/>
      <wsColumn name="PercentMinorAlleles" width="3" columnType="float"/>
      <wsColumn name="PercentIsolateCalls" width="3" columnType="float"/>
      <wsColumn name="Phenotype" width="12"/>
    </processQuery>

    <processQuery name="NgsSnpsByTwoIsolateGroups" includeProjects="PlasmoDB,ToxoDB,TriTrypDB,CryptoDB,AmoebaDB" 
             processName="org.apidb.apicomplexa.wsfplugin.highspeedsnpsearch.FindMajorAllelesPlugin">

      <!-- need to have quote=true so that dependent param query works.  the wsf plugin removes them for its use -->
      <paramRef ref="organismParams.organism" prompt="Organism" displayType="listBox" multiPick="false" quote="true" queryRef="organismVQ.withNgsSNPs">
        <help>Select the organism you wish to search.  Note: this is the genome to which the isolate resequencing reads were aligned.</help>
      </paramRef>
      <paramRef ref="sharedParams.ngsSnp_strain_meta_a" prompt="Set A Isolates" quote="false" />
      <paramRef ref="snpParams.WebServicesPath"/>
      <paramRef ref="snpParams.ReadFrequencyPercent"  prompt="Set A read frequency threshold &gt;= "/>
      <paramRef ref="snpParams.MinPercentMajorAlleles" prompt="Set A major allele frequency &gt;= "/>
      <paramRef ref="snpParams.MinPercentIsolateCalls" prompt="Set A percent isolates with base call &gt;= "/>
      <paramRef ref="sharedParams.ngsSnp_strain_meta_m" prompt="Set B Isolates" quote="false" />
      <paramRef ref="snpParams.ReadFrequencyPercentTwo"  prompt="Set B read frequency threshold &gt;= "/>
      <paramRef ref="snpParams.MinPercentMajorAllelesTwo" prompt="Set B major allele frequency &gt;= "/>
      <paramRef ref="snpParams.MinPercentIsolateCallsTwo" prompt="Set B percent isolates with base call &gt;= "/>
      <wsColumn name="source_id" width="60" wsName="SourceId"/>
      <wsColumn name="project_id" width="20" wsName="ProjectId"/>
      <wsColumn name="MajorAlleleA" width="3"/>
      <wsColumn name="MajorAllelePctA" width="6" columnType="float"/>
      <wsColumn name="IsTriallelicA" width="3"/>
      <wsColumn name="MajorProductA" width="3"/>
      <wsColumn name="MajorProductIsVariableA" width="3"/>
      <wsColumn name="MajorAlleleB" width="3"/>
      <wsColumn name="MajorAllelePctB" width="6" columnType="float"/>
      <wsColumn name="IsTriallelicB" width="3"/>
      <wsColumn name="MajorProductB" width="3"/>
      <wsColumn name="MajorProductIsVariableB" width="3"/>
    </processQuery>




    <!-- ===================================================================== -->
    <!-- ===================================================================== -->
    <!-- ====== QUERIES BELOW HERE MIGHT NEED RETIRING.  PLEASE REVIEW ======= -->
    <!-- ===================================================================== -->
    <!-- ===================================================================== -->



    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Gene ID -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
      <sqlQuery name="SnpsByGeneId" doNotTest="true" includeProjects="PlasmoDB"
             isCacheable="true">
        <paramRef ref="organismParams.organism"  displayType="listBox" 
				      multiPick="false" quote="true" queryRef="organismVQ.withSNPs">
              <help>Select Organism you wish to query against</help>
        </paramRef>

        <paramRef ref="sharedParams.snp_strain_a"/>
        <paramRef ref="sharedParams.snp_strain_m"/>
        <column name="source_id"/>
        <column name="project_id"/>
        <column name="snp_location"/>
        <column name="ref_strain"/>
        <column name="comp_strains"/>
        <column name="ref_allele"/>
        <column name="comp_alleles"/>
        <column name="phenotype"/>
        <column name="prot_pos"/>
        <column name="ref_product"/>
        <column name="comp_products"/>

        <sql>
            <![CDATA[
select * from (
SELECT snpq.source_id, '@PROJECT_ID@' as project_id,snpq.snp_location,snpq.prot_pos,snpq.ref_allele,snpq.ref_product,                              
  apidb.tab_to_string(set(cast(COLLECT(distinct CASE WHEN snpq.allele_a != snpq.allele_b THEN snpq.comp_all END) AS apidb.varchartab)), ', ') as comp_alleles,                
  apidb.tab_to_string(set(cast(COLLECT(distinct CASE WHEN snpq.allele_a != snpq.allele_b THEN snpq.comp_product END) AS apidb.varchartab)), ', ') as comp_products,                
  apidb.tab_to_string(set(cast(COLLECT(distinct CASE WHEN snpq.allele_a != snpq.allele_b THEN snpq.phenotype END) AS apidb.varchartab)), ', ') as phenotype,                  
  apidb.tab_to_string(set(cast(COLLECT(CASE WHEN snpq.allele_a = snpq.allele_b THEN snpq.strain_b END) AS apidb.varchartab)), ', ') as ref_strain,              
  apidb.tab_to_string(set(cast(COLLECT(CASE WHEN snpq.allele_a != snpq.allele_b THEN snpq.strain_b END) AS apidb.varchartab)), ', ') as comp_strains 
FROM                 
  (SELECT /*+ ordered */ 
    hits.source_id as source_id,nas.source_id || ':' || trim(to_char(l.start_min,'999,999,999')) as snp_location,                               
    sva.strain as ref_strain, svb.strain as comp_strain,                               
    CASE WHEN gene_loc.is_reversed = 1 THEN apidb.reverse_complement(sva.allele)                                  
    ELSE sva.allele END as ref_allele,                 
    CASE WHEN gene_loc.is_reversed = 1 THEN apidb.reverse_complement(svb.allele)                                 
    ELSE svb.allele END as comp_all,                 
    CASE WHEN sva.product = svb.product then 'syn' WHEN sva.product != svb.product then 'non-syn' ELSE 'non-coding' END as phenotype,                               
    sva.product as ref_product, svb.product as comp_product,                           
    hits.position_in_protein as prot_pos,
    sva.allele as allele_a, svb.allele as allele_b, svb.strain as strain_b
  FROM 
    ( SELECT /*+ ordered */ 
      distinct gf.na_feature_id as gene_na_feature_id, gf.na_sequence_id, sf.na_feature_id as snp_na_feature_id,
      sf.position_in_protein,sf.source_id
      FROM ($$ds_gene_ids$$) ds,
           ApidbTuning.GeneId gi, dots.GeneFeature gf, dots.SnpFeature sf,
           dots.SeqVariation isva, dots.SeqVariation isvb,
            ( select distinct organism,extdb_name as name,external_database_release_id,is_queryable
              from apidbtuning.snpstrains) ss
      WHERE lower(gi.id) = lower(ds.source_id)
        AND gf.source_id = gi.gene
        AND gf.na_feature_id = sf.parent_id
        AND ss.organism = $$organism$$
        AND ss.is_queryable = 1
        AND sf.external_database_release_id = ss.external_database_release_id
        AND sf.na_feature_id = isva.parent_id
        AND sf.na_feature_id = isvb.parent_id
        AND isva.strain = $$snp_strain_a$$                               
        AND isvb.strain in ($$snp_strain_m$$)
        AND isva.allele != isvb.allele ) hits,
    dots.NaSequence nas, dots.NALocation gene_loc, dots.NALocation l,
    dots.SeqVariation sva, dots.SeqVariation svb
  WHERE hits.na_sequence_id = nas.na_sequence_id
    AND hits.gene_na_feature_id = gene_loc.na_feature_id
    AND hits.snp_na_feature_id = l.na_feature_id
    AND hits.snp_na_feature_id = sva.parent_id 
    AND hits.snp_na_feature_id = svb.parent_id 
    AND sva.strain = $$snp_strain_a$$                               
    AND svb.strain in ($$snp_strain_m$$)                             
    ) snpq                              
GROUP BY snpq.source_id,snpq.snp_location,snpq.prot_pos,snpq.ref_allele,snpq.ref_product
)
           ]]>
        </sql>

    </sqlQuery>

    <processQuery name="SnpsByGeneId" includeProjects="EuPathDB" doNotTest="true" 
             processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">

        <paramRef ref="sharedParams.ds_gene_ids" default="cgd3_510" noTranslation="true"/>
        <paramRef ref="organismParams.organism" displayType="listBox" multiPick="false" 
                  noTranslation="true"  queryRef="organismVQ.withSNPs">
              <help>Select Organism you wish to query against</help>
        </paramRef>
        <paramRef ref="sharedParams.snp_strain_a"  quote="false"/>
        <paramRef ref="sharedParams.snp_strain_m"  quote="false"/>
        <paramRef ref="sharedParams.wdk_user_signature" noTranslation="true"/>
        <wsColumn name="source_id"  width="50" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
        <wsColumn name="snp_location" width="32"/>
        <wsColumn name="ref_strain" width="32"/>
        <wsColumn name="comp_strains" width="32"/>
        <wsColumn name="ref_allele" width="32"/>
        <wsColumn name="comp_alleles" width="32"/>
        <wsColumn name="phenotype" width="32"/>
        <wsColumn name="prot_pos" width="32"/>
        <wsColumn name="ref_product" width="32"/>
        <wsColumn name="comp_products" width="32"/> 
    </processQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Location -->
    <!-- 
         This query contains two nested inline views.  The 
         inner, named "hits", identifies SNPs within the given 
         genomic region for which the reference strain has a 
         different allele from at least one of the others.  The 
         outer inline view, "snpq", has one row for each SNP for 
         each strain (e.g. (100 SNPs) x (1 reference + 3 other 
         strains) = 400 records).  At the top level, the query 
         itself then groups all rows of a SNP into a single row 
         (which, for the above example, would mean grouping four 
         rows into one).
         
         It seems necessary to have these three levels in the 
         query's structure, but it might be possible to optimize 
         within each level.  For instance, the innermost query must 
         join dots.SnpFeature to dots.NaLocation.  A big 
         materialized view could precompute this join. -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
    <sqlQuery name="SnpsByLocation" includeProjects="PlasmoDB" isCacheable="true">
 
       <testParamValues includeProjects="PlasmoDB">
            <paramValue name="snp_strain_m">Pf-Dd2</paramValue>
            <paramValue name="snp_strain_a">Pf-3D7</paramValue>
            <paramValue name="chromosomeOptional">1</paramValue>
        </testParamValues>

        <paramRef ref="organismParams.organism" displayType="listBox" multiPick="false" 
                  quote="true" queryRef="organismVQ.withChromosomesSNPs">
              <help>Select Organism you wish to query against.</help>
        </paramRef>

         <paramRef ref="sharedParams.chromosomeOptional" queryRef="SharedVQ.ChromosomeOrderNumMultipickForSnps" multiPick="false"/>
          <paramRef ref="sharedParams.sequenceId"/>
          <paramRef ref="sharedParams.start_point"/>
          <paramRef ref="sharedParams.end_point"/>
          <paramRef ref="sharedParams.snp_strain_a"/>
          <paramRef ref="sharedParams.snp_strain_m"/>
          <column name="source_id"/>
	  <column name="project_id"/>
          <column name="gene"/>
          <column name="snp_location"/>
          <column name="ref_strain"/>
          <column name="comp_strains"/>
          <column name="ref_allele"/>
          <column name="comp_alleles"/>
          <column name="phenotype"/>
          <column name="prot_pos"/>
          <column name="ref_product"/>
          <column name="comp_products"/>

        <sql includeProjects="PlasmoDB">
            <![CDATA[
SELECT snp.source_id, 
       '@PROJECT_ID@' as project_id, 
       snp.gene_source_id as gene, 
       snp.start_min as snp_location,
       snp.position_in_protein as prot_pos, 
       variants.ref_allele, 
       variants.ref_product, 
       variants.comp_alleles,
       variants.comp_products, 
       variants.phenotype, 
       variants.ref_strain, 
       variants.comp_strains
FROM ApidbTuning.SnpAttributes snp,
    ( SELECT parent_id,
             apidb.tab_to_string(set(cast(COLLECT(distinct ref_allele) AS apidb.varchartab)), ', ') as ref_allele,
             apidb.tab_to_string(set(cast(COLLECT(distinct ref_product) AS apidb.varchartab)), ', ') as ref_product,
             apidb.tab_to_string(set(cast(COLLECT(distinct comp_allele) AS apidb.varchartab)), ', ') as comp_alleles,
             apidb.tab_to_string(set(cast(COLLECT(distinct comp_product) AS apidb.varchartab)), ', ') as comp_products,
             apidb.tab_to_string(set(cast(COLLECT(distinct phenotype) AS apidb.varchartab)), ', ') as phenotype,
             apidb.tab_to_string(set(cast(COLLECT(distinct ref_strain) AS apidb.varchartab)), ', ') as ref_strain,
             apidb.tab_to_string(set(cast(COLLECT(distinct comp_strain) AS apidb.varchartab)), ', ') as comp_strains 
      FROM  (SELECT ref.parent_id, 
                    ref.allele as ref_allele, 
                    ref.product as ref_product,
                    comp.allele as comp_allele, 
                    comp.product as comp_product,
                    case when ref.product = comp.product then 'syn'
                         when ref.product != comp.product then 'non-syn'
                         else 'non-coding'
                    end as phenotype,
                    ref.strain as ref_strain, 
                    comp.strain as comp_strain
             FROM   dots.SeqVariation ref, dots.SeqVariation comp
             WHERE  ref.parent_id = comp.parent_id
                AND ref.allele != comp.allele
                AND ref.organism = $$organism$$
                AND ref.strain = $$snp_strain_a$$
                AND comp.strain in ($$snp_strain_m$$))
             GROUP BY parent_id) variants
WHERE snp.na_feature_id = variants.parent_id
  AND snp.dataset in ( select distinct ss.extdb_name from Apidbtuning.snpstrains ss where is_queryable = 1)
  AND (chromosome in ( $$chromosomeOptional$$ ) OR lower(source_id) = lower($$sequenceId$$) ) 
           ]]>
        </sql>
    </sqlQuery>

    <processQuery name="SnpsByLocation" includeProjects="EuPathDB" doNotTest="true"
             processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" >

        <testParamValues>
            <paramValue name="snp_strain_m">md</paramValue>
            <paramValue name="chromosomeOptional">2</paramValue>
            <paramValue name="organism">Cryptosporidium parvum Iowa II</paramValue>
        </testParamValues>

          <paramRef ref="organismParams.organism" queryRef="organismVQ.withChromosomesSNPs"  multiPick="false"  noTranslation="true">
              <help>Select Organism you wish to query against.</help>
          </paramRef>
          <paramRef ref="sharedParams.chromosomeOptional" quote="false" queryRef="SharedVQ.ChromosomeOrderNumMultipickForSnps" 
		    multiPick="false" noTranslation="true" />
          <paramRef ref="sharedParams.start_point"/>
          <paramRef ref="sharedParams.end_point"/>
          <paramRef ref="sharedParams.snp_strain_a" quote="false"/>
          <paramRef ref="sharedParams.snp_strain_m" quote="false"/>
          <wsColumn name="source_id" width="50" wsName="source_id"/>
          <wsColumn name="project_id" width="32" wsName="project_id"/>
          <wsColumn name="gene" width="32"/>
          <wsColumn name="snp_location" width="32"/>
          <wsColumn name="ref_strain" width="32"/>
          <wsColumn name="comp_strains" width="32"/>
          <wsColumn name="ref_allele" width="32"/>
          <wsColumn name="comp_alleles" width="32"/>
          <wsColumn name="phenotype" width="32"/>
          <wsColumn name="prot_pos" width="32"/>
          <wsColumn name="ref_product" width="32"/>
          <wsColumn name="comp_products" width="32"/>
      </processQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->

    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- by strain                                      -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
    <sqlQuery name="SnpsByStrain" includeProjects="PlasmoDB" isCacheable="true">
 
       <testParamValues includeProjects="PlasmoDB">
            <paramValue name="snp_strain_m">Pf-Dd2</paramValue>
            <paramValue name="snp_strain_a">Pf-3D7</paramValue>
        </testParamValues>

        <paramRef ref="organismParams.organism" displayType="listBox" multiPick="false" 
                  quote="true" queryRef="organismVQ.withChromosomesSNPs">
              <help>Select Organism you wish to query against.</help>
        </paramRef>

          <paramRef ref="sharedParams.snp_strain_a"/>
          <paramRef ref="sharedParams.snp_strain_m"/>
          <column name="source_id"/>
          <column name="project_id"/>
          <column name="gene"/>
          <column name="snp_location"/>
          <column name="ref_strain"/>
          <column name="comp_strains"/>
          <column name="ref_allele"/>
          <column name="comp_alleles"/>
          <column name="phenotype"/>
          <column name="prot_pos"/>
          <column name="ref_product"/>
          <column name="comp_products"/>

        <sql>
            <![CDATA[
SELECT snp.source_id, 
       '@PROJECT_ID@' as project_id, 
       snp.gene_source_id as gene, 
       snp.start_min as snp_location,
       snp.position_in_protein as prot_pos, 
       variants.ref_allele, 
       variants.ref_product, 
       variants.comp_alleles,
       variants.comp_products, 
       variants.phenotype, 
       variants.ref_strain, 
       variants.comp_strains
FROM ApidbTuning.SnpAttributes snp,
    ( SELECT parent_id,
             apidb.tab_to_string(set(cast(COLLECT(distinct ref_allele) AS apidb.varchartab)), ', ') as ref_allele,
             apidb.tab_to_string(set(cast(COLLECT(distinct ref_product) AS apidb.varchartab)), ', ') as ref_product,
             apidb.tab_to_string(set(cast(COLLECT(distinct comp_allele) AS apidb.varchartab)), ', ') as comp_alleles,
             apidb.tab_to_string(set(cast(COLLECT(distinct comp_product) AS apidb.varchartab)), ', ') as comp_products,
             apidb.tab_to_string(set(cast(COLLECT(distinct phenotype) AS apidb.varchartab)), ', ') as phenotype,
             apidb.tab_to_string(set(cast(COLLECT(distinct ref_strain) AS apidb.varchartab)), ', ') as ref_strain,
             apidb.tab_to_string(set(cast(COLLECT(distinct comp_strain) AS apidb.varchartab)), ', ') as comp_strains 
      FROM  (SELECT ref.parent_id, 
                    ref.allele as ref_allele, 
                    ref.product as ref_product,
                    comp.allele as comp_allele, 
                    comp.product as comp_product,
                    case when ref.product = comp.product then 'syn'
                         when ref.product != comp.product then 'non-syn'
                         else 'non-coding'
                    end as phenotype,
                    ref.strain as ref_strain, 
                    comp.strain as comp_strain
             FROM   dots.SeqVariation ref, dots.SeqVariation comp
             WHERE  ref.parent_id = comp.parent_id
                AND ref.allele != comp.allele
                AND ref.organism = $$organism$$
                AND ref.strain = $$snp_strain_a$$
                AND comp.strain in ($$snp_strain_m$$))
             GROUP BY parent_id) variants
WHERE snp.na_feature_id = variants.parent_id
  AND snp.dataset in ( select distinct ss.extdb_name from Apidbtuning.snpstrains ss where is_queryable = 1)
           ]]>
       </sql>
    </sqlQuery>

    <processQuery name="SnpsByStrain" includeProjects="EuPathDB" doNotTest="true"
             processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin" >

        <testParamValues>
            <paramValue name="snp_strain_m">md</paramValue>
            <paramValue name="organism">Cryptosporidium parvum Iowa II</paramValue>
        </testParamValues>

          <paramRef ref="organismParams.organism" queryRef="organismVQ.withChromosomesSNPs"  multiPick="false"  noTranslation="true">
              <help>Select Organism you wish to query against.</help>
          </paramRef>
          <paramRef ref="sharedParams.snp_strain_a" quote="false"/>
          <paramRef ref="sharedParams.snp_strain_m" quote="false"/>
          <wsColumn name="source_id" width="50" wsName="source_id"/>
          <wsColumn name="project_id" width="32" wsName="project_id"/>
          <wsColumn name="gene" width="32"/>
          <wsColumn name="snp_location" width="32"/>
          <wsColumn name="ref_strain" width="32"/>
          <wsColumn name="comp_strains" width="32"/>
          <wsColumn name="ref_allele" width="32"/>
          <wsColumn name="comp_alleles" width="32"/>
          <wsColumn name="phenotype" width="32"/>
          <wsColumn name="prot_pos" width="32"/>
          <wsColumn name="ref_product" width="32"/>
          <wsColumn name="comp_products" width="32"/>
      </processQuery>



    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Isolate Pattern -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="SnpsByIsolatePattern" doNotTest="true" includeProjects="PlasmoDB" 
          isCacheable="true">
        <paramRef ref="snpParams.isolate_set_a"/>
        <paramRef ref="snpParams.set_a_percent"/>
        <paramRef ref="snpParams.isolate_set_b"/>
        <paramRef ref="snpParams.set_b_percent"/>
        <column name="source_id"/> 
        <column name="project_id"/>
        <column name="set_a_allele"/>
        <column name="set_b_allele"/>
        <column name="set_a_count"/>
        <column name="set_b_count"/>
        <sql>
            <![CDATA[
              select seta.snp_source_id as source_id,'@PROJECT_ID@' as project_id,
              seta.allele as set_a_allele,setb.allele as set_b_allele,
              seta.total as set_a_count, setb.total as set_b_count
              from (select isnp.snp_source_id,isnp.allele,count(*) as total
              from ApidbTuning.IsolateSNPs isnp, ($$isolate_set_a$$) ds
              where isnp.is_source_id = ds.source_id
              and isnp.allele is not null
              and isnp.snp_db_name = 'pfal3D7_SNP_combined_Su_Broad_Sanger_gff_RSRC'
              group by isnp.snp_source_id,isnp.allele
              having count(*) >= (select count(*) from ($$isolate_set_a$$)) * $$set_a_percent$$ / 100) seta,
              (select isnp.snp_source_id,isnp.allele, count(*) as total
              from ApidbTuning.IsolateSNPs isnp, ($$isolate_set_b$$) ds
              where isnp.is_source_id = ds.source_id
              and isnp.allele is not null
              and isnp.snp_db_name = 'pfal3D7_SNP_combined_Su_Broad_Sanger_gff_RSRC'
              group by isnp.snp_source_id,isnp.allele
              having count(*) >= (select count(*) from ($$isolate_set_b$$)) * $$set_b_percent$$ / 100) setb
              where seta.snp_source_id = setb.snp_source_id
              and seta.allele != setb.allele
           ]]>
       </sql>
    </sqlQuery>

    <processQuery name="SnpsByIsolatePattern" includeProjects="EuPathDB" doNotTest="true"
             processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="sharedParams.wdk_user_signature" noTranslation="true"/>
        <paramRef ref="snpParams.isolate_set_a"/>
        <paramRef ref="snpParams.set_a_percent"/>
        <paramRef ref="snpParams.isolate_set_b"/>
        <paramRef ref="snpParams.set_b_percent"/>
   
        <wsColumn name="source_id" width="32" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
        <wsColumn name="set_a_allele"/>
        <wsColumn name="set_b_allele"/>
        <wsColumn name="set_a_count"/>
        <wsColumn name="set_b_count"/>
    </processQuery>

  <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Isolate Pattern by history id -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="SnpsByIsolatePatternHistory" includeProjects="PlasmoDB" 
          isCacheable="true">
        <paramRef ref="sharedParams.isolateHistoryIdA"/>
        <paramRef ref="snpParams.set_a_count"/>
        <paramRef ref="sharedParams.isolateHistoryIdB"/>
        <paramRef ref="snpParams.set_b_count"/>
        <column name="source_id"/> 
        <column name="project_id"/>
        <column name="set_a_allele"/>
        <column name="set_b_allele"/>
        <column name="wdk_weight"/>
        <sql>
            <![CDATA[
              select seta.snp_source_id as source_id,'@PROJECT_ID@' as project_id,
              seta.allele as set_a_allele,setb.allele as set_b_allele,
              0 AS wdk_weight
              from (select isnp.snp_source_id,isnp.allele
              from ApidbTuning.IsolateSNPs isnp
              where isnp.is_source_id in (select distinct source_id from $$isolateHitoryIdA$$)
              and isnp.allele is not null
              and isnp.snp_db_name = 'pfal3D7_SNP_combined_Su_Broad_Sanger_gff_RSRC'
              group by isnp.snp_source_id,isnp.allele
              having count(*) >= $$set_a_count$$) seta,
              (select isnp.snp_source_id,isnp.allele
              from ApidbTuning.IsolateSNPs isnp
              where isnp.is_source_id in (select distinct source_id from $$isolateHitoryIdB$$)
              and isnp.allele is not null
              and isnp.snp_db_name = 'pfal3D7_SNP_combined_Su_Broad_Sanger_gff_RSRC'
              group by isnp.snp_source_id,isnp.allele
              having count(*) >= $$set_b_count$$) setb
              where seta.snp_source_id = setb.snp_source_id
              and seta.allele != setb.allele
           ]]>
       </sql>
    </sqlQuery>

    <processQuery name="SnpsByIsolatePatternHistory" includeProjects="EuPathDB"
             processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="sharedParams.isolateHistoryIdA"/>
        <paramRef ref="snpParams.set_a_count"/>
        <paramRef ref="sharedParams.isolateHistoryIdB"/>
        <paramRef ref="snpParams.set_b_count"/>
        <wsColumn name="source_id" width="32" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
        <wsColumn name="set_a_allele"/>
        <wsColumn name="set_b_allele"/>
        <wsColumn name="wdk_weight" columnType="number" width="12"/>
    </processQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Isolate assay type -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="SnpsByIsolateType" includeProjects="PlasmoDB" 
          isCacheable="true">
        <paramRef ref="isolateParams.snp_assay_type"/>
        <column name="source_id"/> 
        <column name="project_id"/>
        <sql>
            <![CDATA[
              select distinct snp_source_id as source_id, '@PROJECT_ID@' as project_id
              from ApidbTuning.IsolateSNPs isnp, ApidbTuning.IsolateAttributes atr
              where atr.source_id = isnp.is_source_id
              and atr.data_type in ($$snp_assay_type$$)
              and isnp.snp_db_name = 'pfal3D7_SNP_combined_Su_Broad_Sanger_gff_RSRC'
           ]]>
       </sql>
    </sqlQuery>

    <processQuery name="SnpsByIsolateType" includeProjects="EuPathDB"
             processName="org.apidb.apicomplexa.wsfplugin.apifed.ApiFedPlugin">
        <paramRef ref="isolateParams.snp_assay_type" quote="false" />
        <wsColumn name="source_id" width="32" wsName="source_id"/>
        <wsColumn name="project_id" width="32" wsName="project_id"/>
    </processQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Isolate source id -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="SnpsByIsolateId" includeProjects="PlasmoDB" 
          isCacheable="true">
         <testParamValues includeProjects="PlasmoDB">
            <paramValue name="isolate_id">CPHD.273727</paramValue>
         </testParamValues>
        <paramRef ref="snpParams.isolate_id"/>
        <column name="source_id"/> 
        <column name="project_id"/>
        <column name="isolate_allele"/>
        <column name="is_source_id"/>
        <sql>
            <![CDATA[
              select isnp.snp_source_id as source_id, $$isolate_id$$ as is_source_id, 
                     isnp.allele as isolate_allele, '@PROJECT_ID@' as project_id
              from ApidbTuning.IsolateSNPs isnp, ApidbTuning.SnpAttributes sa
              where isnp.is_source_id = $$isolate_id$$
              and isnp.allele is not null
              and isnp.snp_db_name = 'pfal3D7_SNP_combined_Su_Broad_Sanger_gff_RSRC'
              and isnp.snp_source_id = sa.source_id
           ]]>
       </sql>
    </sqlQuery>


    <sqlQuery name="ByWeightFilter" isCacheable="true" doNotTest="true">
        <paramRef ref="snpParams.snp_result"/>
        <paramRef ref="sharedParams.min_weight" default="0"/>
        <paramRef ref="sharedParams.max_weight" default="100"/>
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="wdk_weight" />
        <sql>
            <![CDATA[
            SELECT a.source_id, a.project_id, a.wdk_weight
            FROM $$snp_result$$ a
            WHERE a.wdk_weight >= $$min_weight$$
              AND a.wdk_weight <= $$max_weight$$
            ]]>
       </sql>
    </sqlQuery>




  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <!-- Dont Care - fake query for internal use -->
  <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="DontCare" doNotTest="true" isCacheable="true">
        <column name="project_id"/>
        <column name="source_id"/>
        <sql>
            select source_id, project_id
            from ApidbTuning.snpattributes
            where source_id = 'life_is_sweet' 
        </sql>
    </sqlQuery>
    
  </querySet>

</wdkModel>
