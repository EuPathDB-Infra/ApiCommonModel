<wdkModel>

  <querySet name="PathwayTables" queryType="table" isCacheable="false" excludeProjects="EuPathDB">

      <defaultTestParamValues>
         <paramValue name="source_id">ec00626</paramValue>
          <paramValue name="project_id">@PROJECT_ID@</paramValue>
      </defaultTestParamValues>


      <sqlQuery name="CompoundsFromMetabolicPathways" >
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="pathway_source"/>
            <column name="reaction_source_id"/>
            <column name="reaction_url"/>
            <column name="enzyme"/>
            <column name="expasy_url"/>
            <column name="expasy_html"/>
            <column name="equation"/>
            <column name="reversible"/>
            <column name="substrates_text"/>
            <column name="products_text"/>            
            <sql>
            <![CDATA[
            SELECT DISTINCT '@PROJECT_ID@' as project_id
            , pa.SOURCE_ID
            , pa.PATHWAY_SOURCE
            , pr.REACTION_SOURCE_ID
            , pr.REACTION_URL
            , pr.ENZYME
            , pr.EXPASY_URL
            , pr.EXPASY_HTML
            , pr.EQUATION_HTML as equation
            , decode (pr.IS_REVERSIBLE, '1', 'Y', '0', 'N') as reversible
            , pr.SUBSTRATES_TEXT
            , pr.PRODUCTS_TEXT
            FROM
            apidbtuning.pathwayattributes pa
            , apidbtuning.pathwaycompounds pc
            , apidbtuning.pathwayreactions pr
            , sres.pathwaynode pn
            WHERE pc.pathway_id = pa.PATHWAY_ID
            AND pn.PATHWAY_ID = pa.PATHWAY_ID
            AND pr.REACTION_ID = pc.REACTION_ID
            AND pr.EXT_DB_NAME = pc.EXT_DB_NAME
            AND pr.ENZYME = pn.DISPLAY_LABEL
            ORDER BY pr.ENZYME
            ]]>
           </sql>
        </sqlQuery>

        <sqlQuery name="PathwayReactionsXrefs">
            <column name="project_id"/>
            <column name="source_id"/>
            <column name="pathway_source"/>
            <column name="alt_pathway_source_id"/>
            <column name="alt_pathway_source"/>
            <column name="alt_pathway_url"/>
            <column name="name"/>
            <column name="reaction_count"/>
            <column name="alt_reaction_count"/>
            <column name="pct"/>
            <column name="overlap_count"/>
            <sql>
                <![CDATA[
                    select tbl.* from (
                    with pathway_reaction as (select distinct  pathway_id,
                    pathway_reaction_id from apidb.pathwayreactionrel),
                      pathway_counts as (select pathway_id, count(*) as ct from
                    pathway_reaction group by pathway_id)
                    select
                       '@PROJECT_ID@' as project_id
                       , pa1.source_id
                       , pa1.pathway_source
                       , pa2.pathway_source as alt_pathway_source
                       , pa2.source_id as alt_pathway_source_id
                       , pa2.name
                       , pc1.ct as reaction_count
                       , pc2.ct as alt_reaction_count
                       , case when pc1.ct < pc2.ct then count(*) / pc1.ct else count(*) /
                    pc2.ct end * 100 as pct
                       , count(*) as overlap_count
                    from apidbtuning.pathwayattributes pa1
                    , apidbtuning.pathwayattributes pa2
                    ,  pathway_reaction ap
                    ,  pathway_counts pc1
                    ,  pathway_counts pc2
                    ,(SELECT DISTINCT
                         pr.pathway_id
                       , prx.associated_reaction_id AS pathway_reaction_id
                       FROM
                         pathway_reaction pr
                       , apidb.pathwayreactionxref prx
                       WHERE
                         prx.pathway_reaction_id = pr.pathway_reaction_id
                       UNION
                       SELECT DISTINCT
                         pr.pathway_id
                       , pr.pathway_reaction_id
                       FROM
                         pathway_reaction pr
                       ) ax
                    WHERE
                       ap.pathway_reaction_id = ax.pathway_reaction_id
                       and pa1.pathway_id = ap.pathway_id
                       and pa2.pathway_id = ax.pathway_id
                       and pa1.pathway_id = pc1.pathway_id
                       and pa2.pathway_id = pc2.pathway_id
                       and pa1.pathway_id != pa2.pathway_id
                    HAVING count(*) >1
                    group by    pa1.source_id
                       , pa1.pathway_source
                       , pa2.source_id
                       , pa2.pathway_source
                       , pa2.name
                       , pc1.ct
                       , pc2.ct
                    ) tbl
                    order by tbl.pct desc
                ]]>
            </sql>
        </sqlQuery>

      <sqlQuery name="PathwayGraphs" >
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="pathway_source"/> 
            <column name="display_name"/>
            <column name="internal"/>
            <column name="xaxis_description"/>
            <sql>
            <![CDATA[
select pa.source_id, '@PROJECT_ID@' as project_id, pa.pathway_source,
       g.display_name, g.internal || '&template=' || decode(g.is_graph_custom, 'true', 0, 1) as internal, g.xaxis_description
from apidbtuning.pathwayattributes pa, (select '*** Default ***' as display_name, '' as internal, '' as is_graph_custom, '' as xaxis_description, '' as project_id from dual
      -- TEMPLATE_ANCHOR pathwayGraphs
) g
Where g.project_id = '@PROJECT_ID@'
AND NOT g.internal LIKE '%MassSpec%' 
            ]]>
           </sql>
        </sqlQuery>





      <sqlQuery name="PathwayEdges" >
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="pathway_source"/> 
            <column name="source"/>
            <column name="target"/>
            <column name="is_reversible"/>
            <sql>
            <![CDATA[
select pa.source_id
 , pa.pathway_source
 , '@PROJECT_ID@' as project_id
 , rel.*
from 
(
WITH
  nodes_with_types AS
  (SELECT
    pn.pathway_id
  , pn.pathway_node_id
  , ot.name AS type
  FROM
    sres.pathwaynode pn
  , sres.ontologyterm ot
  WHERE
    pn.pathway_node_type_id = ot.ontology_term_id
  )
, enzyme_edges AS
  (SELECT
    nodes_with_types.pathway_id AS pathway_id
  , nodes_with_types.pathway_node_id AS e_id
  , nodes_with_types.type
  , i.associated_node_id AS m1_id
  , i.is_reversible AS ir1
  , o.node_id AS m2_id
  , o.is_reversible AS ir2
  FROM
    sres.pathwayrelationship i
  , sres.pathwayrelationship o
  , nodes_with_types
  WHERE
    i.node_id = nodes_with_types.pathway_node_id
    AND o.associated_node_id = nodes_with_types.pathway_node_id
    AND nodes_with_types.type = 'enzyme'
  )
, parents AS
  (select
   m1_id || '_' || m2_id || '_' || ir1 || '_' || ir2 as io
   , listagg(e_id, '-') within group (order by e_id) as parent
  , pathway_id
  FROM
    enzyme_edges
  GROUP BY
    pathway_id
  , m1_id
  , m2_id
  , ir1
  , ir2
  HAVING
    COUNT( *) > 1
  )
select distinct 
 enzyme_edges.pathway_id
 , parents.parent as source
 ,to_char(enzyme_edges.m1_id) as target
, enzyme_edges.ir1 as is_reversible
FROM
  enzyme_edges
, parents
where
  m1_id || '_' || m2_id || '_' || ir1 || '_' || ir2 = parents.io
union
select distinct 
  enzyme_edges.pathway_id
 , to_char(enzyme_edges.m2_id) as source
 ,parents.parent as target
, enzyme_edges.ir2 as is_reversible
FROM
  enzyme_edges
, parents
where
  m1_id || '_' || m2_id || '_' || ir1 || '_' || ir2 = parents.io
UNION
select 
 enzyme_edges.pathway_id
 , to_char(e_id) as source
 ,to_char(enzyme_edges.m1_id) as target
, enzyme_edges.ir1 as is_reversible
FROM
  enzyme_edges
, parents
where
  m1_id || '_' || m2_id || '_' || ir1 || '_' || ir2 = parents.io (+)
  and parents.io is null
union
select 
 enzyme_edges.pathway_id
 , to_char(enzyme_edges.m2_id) as source
 , to_char(e_id) as target
, enzyme_edges.ir2 as is_reversible
FROM
  enzyme_edges
, parents
where
  m1_id || '_' || m2_id || '_' || ir1 || '_' || ir2 = parents.io (+)
  and parents.io is null
UNION
select pn1.pathway_id, to_char(pr.node_id), to_char(pr.associated_node_id), pr.is_reversible
from sres.pathwayrelationship pr
, sres.pathwaynode pn1
, sres.pathwaynode pn2
, sres.ontologyterm ot1
, sres.ontologyterm ot2
where pr.node_id = pn1.pathway_node_id
and pr.associated_node_id = pn2.pathway_node_id
and pn1.pathway_node_type_id = ot1.ontology_term_id
and pn2.pathway_node_type_id = ot2.ontology_term_id
and ot1.name != 'enzyme'
and ot2.name != 'enzyme'
) rel
, apidbtuning.pathwayattributes pa
where pa.pathway_id = rel.pathway_id
            ]]>
           </sql>
        </sqlQuery>


      <sqlQuery name="PathwayNodes" >
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="pathway_source"/> 
            <column name="id"/>
            <column name="node_identifier"/>
            <column name="display_label"/>
            <column name="url"/>
            <column name="name"/>
            <column name="node_type"/>
            <column name="x"/>
            <column name="y"/>
            <column name="width"/>
            <column name="height"/>
            <column name="parent"/>
            <column name="cellular_location"/>
            <column name="image"/>
            <column name="gene_count"/>
            <sql>
            <![CDATA[
WITH
  nodes_with_types as
  (select pn.pathway_id
  , pa.name as display_label
  , pa.url
  , pa.name as name
  , pa.source_id as node_identifier
  , to_char(pn.pathway_node_id) as pathway_node_id
  , pn.x
  , pn.y
  , pn.width
  , pn.height
  , pn.cellular_location 
  , ot.name as type
  , null as gene_count
  FROM
    sres.pathwaynode pn
  , sres.ontologyterm ot
  , apidbtuning.pathwayattributes pa
  WHERE
    pn.pathway_node_type_id = ot.ontology_term_id
    and pn.display_label = pa.source_id
    and ot.name = 'metabolic process'
  UNION
  select pn.pathway_id
  , pn.display_label
  , null as url
  , nvl(ec.description, pn.display_label) as name
  , ec.ec_number as node_identifier
  , to_char(pn.pathway_node_id) as pathway_node_id
  , pn.x
  , pn.y
  , pn.width
  , pn.height
  , pn.cellular_location 
  , ot.name as type
  , count(tp.gene_source_id) as gene_count
  FROM
    sres.pathwaynode pn
  , sres.ontologyterm ot
  , sres.enzymeclass ec
  , apidbtuning.pathwaynodegene tp
  WHERE
    pn.pathway_node_type_id = ot.ontology_term_id
    and ot.name = 'enzyme'
    and pn.row_id = ec.enzyme_class_id (+)
    and pn.pathway_node_id = tp.pathway_node_id (+)
    group by pn.pathway_id
  , pn.display_label
  , ec.description
  , ec.ec_number
  , to_char(pn.pathway_node_id)
  , pn.x
  , pn.y
  , pn.width
  , pn.height
  , pn.cellular_location 
  , ot.name 
  UNION
  select pn.pathway_id
  , pn.display_label
  , null as url
  , c.name as name
  , c.chebi_accession as node_identifier
  , to_char(pn.pathway_node_id) as pathway_node_id
  , pn.x
  , pn.y
  , pn.width
  , pn.height
  , pn.cellular_location 
  , ot.name as type
  , null as gene_count
  FROM
    sres.pathwaynode pn
  , sres.ontologyterm ot
  , chebi.compounds c
  WHERE
    pn.pathway_node_type_id = ot.ontology_term_id
    and ot.name = 'molecular entity'
    and pn.row_id = c.id
  )
, enzyme_edges AS
  (SELECT
    nodes_with_types.pathway_id AS pathway_id
  , nodes_with_types.pathway_node_id AS e_id
  , nodes_with_types.type
  , i.associated_node_id AS m1_id
  , i.is_reversible AS ir1
  , o.node_id AS m2_id
  , o.is_reversible AS ir2
  FROM
    sres.pathwayrelationship i
  , sres.pathwayrelationship o
  , nodes_with_types
  WHERE
    i.node_id = nodes_with_types.pathway_node_id
    AND o.associated_node_id = nodes_with_types.pathway_node_id
    AND nodes_with_types.type = 'enzyme'
  )
, parents as
  (select
    m1_id || '_' || m2_id || '_' || ir1 || '_' || ir2 AS io
 , listagg(e_id, '-') within group (order by e_id) as parent
  , pathway_id
  FROM
    enzyme_edges
  GROUP BY
    pathway_id
  , m1_id
  , m2_id
  , ir1
  , ir2
  HAVING
    COUNT( *) > 1
  )
, node_parents as
 (select
  e_id AS pathway_node_id
, parents.parent
, type as node_type
, enzyme_edges.pathway_id
FROM
  enzyme_edges
, parents
where
  m1_id || '_' || m2_id || '_' || ir1 || '_' || ir2 = parents.io
)

  
select
pa.source_id
, pa.pathway_source
, '@PROJECT_ID@' as project_id
, pn.display_label
, pn.x
, pn.y
, pn.width
, pn.height
, pn.cellular_location
, pn.url
, pn.name
, pn.node_identifier
, nodes_with_parents.pathway_node_id as id
, nodes_with_parents.parent
, nodes_with_parents.node_type
, null as image
, pn.gene_count
from
  (  
select
  e_id as pathway_node_id
, node_parents.parent
, type as node_type
, enzyme_edges.pathway_id
FROM
  enzyme_edges
, node_parents
where
  enzyme_edges.e_id = node_parents.pathway_node_id (+)
UNION
SELECT
  parents.parent
, null
, 'nodeOfNodes'
, pathway_id
FROM
  parents
UNION
SELECT
  nodes_with_types.pathway_node_id AS pathway_node_id
, NULL AS parent
, nodes_with_types.type
, nodes_with_types.pathway_id
FROM
  nodes_with_types
WHERE
  nodes_with_types.type != 'enzyme'
  ) nodes_with_parents
  , nodes_with_types pn
  , apidbtuning.pathwayattributes pa
where
  nodes_with_parents.pathway_node_id = pn.pathway_node_id (+)
  and nodes_with_parents.pathway_id = pa.pathway_id
            ]]>
           </sql>
        </sqlQuery>



<!-- not used in GUS4? TODO: comment out after QA if not required
      <sqlQuery name="ECNumberOrganismMap" >
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="pathway_source"/> 
            <column name="display_label"/>
            <column name="x1"/>
            <column name="y1"/>
            <column name="x2"/>
            <column name="y2"/>
            <column name="organisms"/>
            <column name="genes"/>

            <sql>
            <![CDATA[
               SELECT DISTINCT p.source_id as source_id, '@PROJECT_ID@' as project_id, ec.ec_number as display_label,
                       (pn.x - (pn.width/2)) as x1, (pn.y - (pn.height/2)) as y1,
                       (pn.x + (pn.width/2)) as x2, (pn.y + (pn.height/2)) as y2,
                       apidb.tab_to_string(set(cast(COLLECT(ga.organism) AS apidb.varchartab)), ', ') as organisms,
                       apidb.tab_to_string(set(cast(COLLECT(ga.source_id) AS apidb.varchartab)), ', ') as genes
                FROM    ApidbTuning.GenomicSeqAttributes gs,
                       sres.pathway p, sres.pathwaynode pn,
                       dots.aaSequenceEnzymeClass asec, sres.enzymeClass ec,ApidbTuning.TranscriptAttributes ga
                WHERE  gs.na_sequence_id = ga.na_sequence_id
                AND    ga.aa_sequence_id = asec.aa_sequence_id
                AND    asec.enzyme_class_id = ec.enzyme_class_id
                AND    p.pathway_id = pn.pathway_id
                AND    ec.ec_number = pn.display_label
                group by p.source_id, ec.ec_number, pn.x, pn.y,pn.width, pn.height
            ]]>
           </sql>
        </sqlQuery>

        <sqlQuery name="CompoundLabel" >
            <column name="source_id"/>
            <column name="pathway_source"/> 
            <column name="compound_source_id"/>
            <column name="project_id"/>
            <column name="display_label"/>
            <column name="x"/>
            <column name="y"/>
            <column name="radius"/>
            <sql>
              <![CDATA[
              Select p.source_id, pc.compound_source_id, '@PROJECT_ID@' as project_id,
                     pn.display_label, pn.x, pn.y, pn.height as radius 
              From   ApiDB.Pathway p, ApiDB.PathwayNode pn, ApiDBTuning.PathwayCompounds pc
              Where  p.pathway_id = pn.parent_id
              And    pn.pathway_node_type_id = 2
              AND    pn.display_label = pc.compound
              Group By p.source_id, pc.compound_source_id, pn.display_label, pn.x, pn.y, pn.height, pn.width
            ]]>
           </sql>
        </sqlQuery>
-->

 </querySet>
</wdkModel>



