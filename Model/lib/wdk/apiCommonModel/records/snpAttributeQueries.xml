
<wdkModel>
    <querySet name="SnpAttributes" queryType="attribute" isCacheable="false" includeProjects="PlasmoDB,ToxoDB,EuPathDB,CryptoDB,AmoebaDB,TriTrypDB,FungiDB">


      <defaultTestParamValues includeProjects="PlasmoDB">
         <paramValue name="source_id">NGS_SNP.Pf3D7_11_v3.1293957</paramValue>
         <paramValue name="project_id">PlasmoDB</paramValue>
      </defaultTestParamValues>

      <defaultTestParamValues includeProjects="ToxoDB,EuPathDB">
         <paramValue name="source_id">NGS_SNP.tgme49_asmbl.1154.490</paramValue>
         <paramValue name="project_id">ToxoDB</paramValue>
      </defaultTestParamValues>

      <defaultTestParamValues includeProjects="CryptoDB">
         <paramValue name="source_id">chr3-2_66329</paramValue>
         <paramValue name="project_id">CryptoDB</paramValue>
      </defaultTestParamValues>

      <defaultTestParamValues includeProjects="TriTrypDB">
         <paramValue name="source_id">NGS_SNP.Tb927_01_v4.36382</paramValue>
         <paramValue name="project_id">TriTrypDB</paramValue>
      </defaultTestParamValues>

      <defaultTestParamValues includeProjects="AmoebaDB">
         <paramValue name="source_id">NGS_SNP.DS571145.208</paramValue>
         <paramValue name="project_id">AmoebaDB</paramValue>
      </defaultTestParamValues>

      <defaultTestParamValues includeProjects="FungiDB">
         <paramValue name="source_id">NGS_SNP.AfumAf293_Chr1.120</paramValue>
         <paramValue name="project_id">FungiDB</paramValue>
      </defaultTestParamValues>

       <testRowCountSql>
	 SELECT count(*) FROM ApidbTuning.SnpAttributes
       </testRowCountSql>


       <sqlQuery name="PrimaryKey" doNotTest="true">
           <column name="source_id" ignoreCase="true"/>
           <column name="project_id" ignoreCase="true"/>
           <sql>
            <![CDATA[
                SELECT ids.source_id, ids.project_id
                FROM (##WDK_ID_SQL##) ids 
             ]]>
           </sql>
        </sqlQuery>



        <sqlQuery name="Bfmv">
            <column name="source_id" />
            <column name="project_id" />
            <column name="dataset" ignoreCase="true"/>
            <column name="dataset_internal" />
            <column name="seq_source_id"  sortingColumn="chromosome_order_num"/>
            <column name="location"  sortingColumn="location" />
            <column name="location_text"  sortingColumn="location" />
            <column name="chromosome_order_num"  sortingColumn="chromosome_order_num" />
            <column name="is_coding"  />
            <column name="position_in_CDS"  />
            <column name="position_in_protein"  />
            <column name="has_nonsynonymous_allele"  />
            <column name="gene_source_id"  ignoreCase="true"/>
            <column name="gene_strand"  />
            <column name="lflank"  ignoreCase="true"/>
            <column name="allele"  sortingColumn="reference_na" ignoreCase="true"/>
            <column name="rflank"  ignoreCase="true"/>
            <column name="lflank_gene_strand"  sortingColumn="lflank" ignoreCase="true"/>
            <column name="allele_gene_strand"  sortingColumn="allele" ignoreCase="true"/>
            <column name="rflank_gene_strand"  sortingColumn="rflank" ignoreCase="true"/>
            <column name="organism_text"  ignoreCase="true"/>
            <column name="formatted_organism"  sortingColumn="organism_text" />
            <column name="ncbi_tax_id"  />
            <column name="minor_allele_frequency"  />
            <column name="major_allele_frequency"  />
            <column name="distinct_strain_count"  />
            <column name="minor_product"  />
            <column name="major_product"  />
            <column name="minor_allele"  />
            <column name="major_allele"  />
            <column name="reference_na"  />
            <column name="reference_aa"  />
            <column name="reference_strain"  />
            <sqlParamValue  name="dataset_display_names">
                'InsertSnps.pm NGS SNPs INTERNAL', 'HTS SNPs'
            </sqlParamValue>
            <sql>
            <![CDATA[
           SELECT bfmv.source_id, bfmv.project_id, bfmv.chromosome_order_num,
                  nvl(dsa.display_name, DECODE(bfmv.dataset, &&dataset_display_names&&, bfmv.dataset)) as dataset,
                  bfmv.dataset as dataset_internal,
                  bfmv.seq_source_id, bfmv.location, 
                  CASE
                  WHEN bfmv.reference_strain = 'iowa_II' THEN 'IOWA II'
                  WHEN bfmv.reference_strain = 'md' THEN 'MD'
                  WHEN bfmv.reference_strain = 'tu114' THEN 'TU114'
                  ELSE bfmv.reference_strain
                  END as reference_strain,
                  bfmv.reference_na, 
                  decode(bfmv.is_coding, 1, 'coding', 'non-coding') is_coding, 
                  bfmv.position_in_CDS,
                  bfmv.position_in_protein, bfmv.reference_aa, 
                  decode(bfmv.has_nonsynonymous_allele, 1, 'Has Non-Synonymous', 'Synonymous') has_nonsynonymous_allele,
                  bfmv.gene_source_id, bfmv.gene_strand, bfmv.lflank,
                  bfmv.rflank, bfmv.reference_na as allele, bfmv.organism as organism_text, bfmv.ncbi_tax_id,
                  '<i>' || SUBSTR(bfmv.organism, 1, 1) || '.' ||
                  REGEXP_REPLACE(SUBSTR(bfmv.organism, INSTR(bfmv.organism, ' ')), '[[:space:]]+',
                                 chr(38) || 'nbsp;') || '</i>'
                    AS formatted_organism,
                  bfmv.minor_allele_frequency, bfmv.major_allele_frequency,
                  bfmv.distinct_strain_count,bfmv.minor_product,
                  bfmv.major_product,bfmv.major_allele,bfmv.minor_allele,
                  trim(to_char(bfmv.location,'99,999,999')) as location_text,
                  CASE WHEN bfmv.gene_strand = 'reverse' and bfmv.rflank is not null THEN apidb.reverse_complement(bfmv.rflank) 
                       WHEN bfmv.gene_strand is null THEN ''
                       ELSE bfmv.lflank  END as lflank_gene_strand,
                  CASE WHEN bfmv.gene_strand = 'reverse' and bfmv.lflank is not null THEN apidb.reverse_complement(bfmv.lflank) 
                       WHEN bfmv.gene_strand is null THEN ''
                       ELSE bfmv.rflank  END as rflank_gene_strand,
                  CASE WHEN bfmv.gene_strand = 'reverse' THEN apidb.reverse_complement(bfmv.reference_na) 
                       WHEN bfmv.gene_strand is null THEN ''
                       ELSE bfmv.reference_na END as allele_gene_strand
       FROM   ApidbTuning.SnpAttributes bfmv,  apidbtuning.DatasetPresenter dsa
       WHERE bfmv.dataset = dsa.name (+)
             ]]>
           </sql>

        </sqlQuery>

<!--
       <sqlQuery name="isolateSummary" isCacheable="false" includeProjects="PlasmoDB">
            <column name="source_id" />
            <column name="project_id" />
            <column name="iso_major_allele"/>
            <column name="iso_major_percent"/>
            <column name="iso_minor_allele"/>
            <column name="iso_minor_percent"/>
            <column name="iso_number_strains"/>
            <sql>
            <![CDATA[    
               select snp_source_id as source_id, '@PROJECT_ID@' as project_id,
                 major_allele as iso_major_allele,
                 round((to_number(major_count) / total),2) as iso_major_percent,
                 minor_allele as iso_minor_allele,
                 round((to_number(minor_count) / total),2) as iso_minor_percent,
                 total as iso_number_strains
               from (
               select snp_source_id,
                apidb.tab_to_string(set(cast(COLLECT(CASE WHEN row_number = 1 THEN allele END) AS apidb.varchartab)), ', ') as major_allele,
                apidb.tab_to_string(set(cast(COLLECT(CASE WHEN row_number = 1 THEN to_char(ct) END) AS apidb.varchartab)), ', ') as major_count,
                apidb.tab_to_string(set(cast(COLLECT(CASE WHEN row_number = 2 THEN allele END) AS apidb.varchartab)), ', ') as minor_allele,
                apidb.tab_to_string(set(cast(COLLECT(CASE WHEN row_number = 2 THEN to_char(ct) END) AS apidb.varchartab)), ', ') as minor_count,
                sum(ct) as total
               from (
               select rownum as row_number,snp_source_id,allele,ct from (
               select snp_source_id,allele,count(*) as ct
               from ApidbTuning.IsolateSNPs
               where  allele in ('A','C','G','T')
               group by snp_source_id,allele
               order by ct desc))
               group by snp_source_id)
             ]]>
           </sql>
        </sqlQuery>
-->

        <sqlQuery name="Sequence" excludeProjects="EuPathDB" doNotTest="1">
            <column name="source_id" />
            <column name="project_id" />
            <column name="lflank"/>
            <column name="allele"/>
            <column name="rflank"/>
            <sql>
            <![CDATA[    
            SELECT snp.source_id, '@PROJECT_ID@' AS project_id,
                   SUBSTR(nas.sequence,snp.location - 60,60) as lflank,
                   SUBSTR(nas.sequence,snp.location,1) as allele,
                   SUBSTR(nas.sequence,snp.location + 1,60) as rflank
            FROM   dots.nasequence nas, apidb.SNP snp
            WHERE  snp.na_sequence_id = nas.na_sequence_id
             ]]>
           </sql>
        </sqlQuery>
    </querySet>
</wdkModel>
