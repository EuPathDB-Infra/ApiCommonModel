<wdkModel>

<!-- notes

-Utility RecordClass Queries

--> 
 
<!-- ////////// UTILITY //////////// -->
    <querySet name="UtilityQueries" queryType="utility">

        <!-- UtilityQueries.PingCrypto (cryptolink hard coded in jsp) 
        <sqlQuery name="PingCrypto" isCacheable='false'>
            <paramRef ref="recordParams.source_id"/> 
            <column name="cryptolink" />
            <sql> 
            <![CDATA[           
            select 
                global_name as cryptolink
            from global_name@crypto
             ]]>
           </sql>
        </sqlQuery>
        -->
        <!-- UtilityQueries.PingToxo (toxolink hard coded in jsp) 
        <sqlQuery name="PingToxo" isCacheable='false'>
            <paramRef ref="recordParams.source_id"/> 
            <column name="toxolink" />
            <sql> 
            <![CDATA[           
            select 
                global_name as toxolink
            from global_name@toxo
             ]]>
           </sql>
        </sqlQuery>
        -->
        <!-- UtilityQueries.PingPlasmo (plasmolink hard coded in jsp) 
        <sqlQuery name="PingPlasmo" isCacheable='false'>
            <paramRef ref="recordParams.source_id"/> 
            <column name="plasmolink" />
            <sql> 
            <![CDATA[           
            select 
                global_name as plasmolink
            from global_name@plasmo
             ]]>
           </sql>
        </sqlQuery>
        -->

        <!-- UtilityQueries.CurrentInstance -->
        <!-- this is an attribute query -->
        <sqlQuery name="CurrentInstance" isCacheable='false'>
            <column name="source_id" />
            <column name="project_id" />
            <column name="global_name" />
            <column name="version" />
            <column name="server_name" />
            <column name="server_ip" />
            <column name="system_date" />
            <column name="login" />
            <column name="service_name" />
            <column name="db_name" />
            <column name="db_unique_name" />
            <column name="instance_name" />
            <column name="db_domain" />
            <column name="client_host" />
            <column name="os_user" />
           <sql> 
            <![CDATA[           
            select $$source_id$$ AS source_id, '@PROJECT_ID@' AS project_id,
                global_name, 
                ver.banner version,
                UTL_INADDR.get_host_name as server_name,
                UTL_INADDR.get_host_address as server_ip,
                to_char(sysdate, 'Dy DD-Mon-YYYY HH24:MI:SS') system_date,
                sys_context('USERENV', 'SESSION_USER'       ) login,
                sys_context('userenv', 'SERVICE_NAME'       ) service_name, 
                sys_context('userenv', 'DB_NAME'            ) db_name, 
                sys_context('USERENV', 'DB_UNIQUE_NAME'     ) db_unique_name,
                sys_context('USERENV', 'INSTANCE_NAME'      ) instance_name,
                sys_context('USERENV', 'DB_DOMAIN'          ) db_domain,
                sys_context('USERENV', 'HOST'               ) client_host,
                sys_context('USERENV', 'OS_USER'            ) os_user,
                sys_context('USERENV', 'CURRENT_USERID'     ) current_userid,
                sys_context('USERENV', 'SESSION_USER'       ) session_user,
                sys_context('USERENV', 'SESSION_USERID'     ) session_userid
            from global_name, v$version ver
            where lower(ver.banner) like '%oracle%'
             ]]>
           </sql>
        </sqlQuery>

        <!-- UtilityQueries.CacheState -->
        <sqlQuery name="CacheState" isCacheable='false'>
            <column name="source_id" />
            <column name="project_id" />
            <column name="cache_count" />
           <sql> 
            <![CDATA[           
            SELECT $$source_id$$ AS source_id, 
                   '@PROJECT_ID@' AS project_id,
                   count(table_name) as cache_count
            FROM user_tables
            WHERE table_name like 'QUERYRESULT%'
             ]]>
           </sql>
        </sqlQuery>

        <!-- UtilityQueries.ApiCommDbLink -->
        <sqlQuery name="ApiCommDbLink" isCacheable='false'>
            <column name="source_id" />
            <column name="project_id" />
            <column name="apicomm_global_name" />
           <sql> 
            <![CDATA[           
             select $$source_id$$ AS source_id, '@PROJECT_ID@' AS project_id,
                    global_name as apicomm_global_name
            from global_name@USER_DBLINK@
             ]]>
           </sql>
        </sqlQuery>

        <!-- UtilityQueries.AllDbLinks -->
        <sqlQuery name="AllDbLinks" isCacheable='false'>
            <column name="source_id" />
            <column name="project_id" />
            <column name="owner" />
            <column name="db_link" />
            <column name="username" />
            <column name="host" />
            <column name="created" />
           <sql> 
            <![CDATA[           
            select $$source_id$$ AS source_id, '@PROJECT_ID@' AS project_id,
            lower(owner) owner, lower(db_link) db_link, 
            lower(username) username, lower(host) host, created
            from  all_db_links
            ]]>
           </sql>
        </sqlQuery>

        <!-- UtilityQueries.TuningTables -->
        <sqlQuery name="TuningTables" isCacheable='false'>
            <column name="source_id" />
            <column name="project_id" />
            <column name="name" />
            <column name="timestamp" />
           <sql> 
            <![CDATA[           
            select $$source_id$$ AS source_id, 
                   '@PROJECT_ID@' AS project_id,
                    name, 
                    to_char(timestamp, 'YYYY/MM/DD HH24:MI:SS') timestamp 
            from apidb.tuningtable 
            order by timestamp desc
            ]]>
           </sql>
        </sqlQuery>

        <!-- UtilityQueries.TuningManager 
        
        If there was an update, last_ok == outdated_since

        If no update was needed, outdated_since is null

        If an update is needed, but not performed, outdated_since > last_ok
        
        -->
        <sqlQuery name="TuningManager" isCacheable='false'>
            <column name="source_id" />
            <column name="project_id" />
            <column name="family_name" /> 
            <column name="last_ok" /> 
            <column name="last_updater" /> 
            <column name="outdated_since" /> 
            <column name="last_checker" /> 
            <column name="instance_nickname" />
            <column name="subversion_url" /> 
            <column name="notify_emails" />
            <column name="elapsedCheckDays" />
            <column name="elapsedCheckHours" />
            <column name="elapsedCheckMinutes" />
            <column name="last_check" />
            <column name="is_live" />
            <column name="state" />
           <sql> 
            <![CDATA[           
            select $$source_id$$ AS source_id, 
                   '@PROJECT_ID@' AS project_id,
                   ti.family_name family_name,
                   to_char(last_ok, 'YYYY/MM/DD HH24:MI:SS') last_ok, 
                   last_updater, 
                   to_char(outdated_since, 'YYYY/MM/DD HH24:MI:SS') outdated_since, 
                   last_checker, 
                   mi.instance_nickname,
                   subversion_url, 
                   notify_emails,
                   trunc(sysdate - GREATEST(
                      NVL(last_ok, to_date('01-Jan-1970', 'dd-mon-yyyy')), 
                      NVL(outdated_since, to_date('01-Jan-1970', 'dd-mon-yyyy')))) elapsedCheckDays,
                   to_char(
                        trunc(sysdate) + (sysdate - GREATEST(
                          NVL(last_ok, to_date('01-Jan-1970', 'dd-mon-yyyy')), 
                          NVL(outdated_since, to_date('01-Jan-1970', 'dd-mon-yyyy')))),  
                           'HH24') elapsedCheckHours,
                   to_char(
                        trunc(sysdate) + (sysdate - GREATEST(
                          NVL(last_ok, to_date('01-Jan-1970', 'dd-mon-yyyy')), 
                          NVL(outdated_since, to_date('01-Jan-1970', 'dd-mon-yyyy')))),
                        'MI') elapsedCheckMinutes,
                    to_char(GREATEST(
                       NVL(last_ok, to_date('01-Jan-1970', 'dd-mon-yyyy')), 
                       NVL(outdated_since, to_date('01-Jan-1970', 'dd-mon-yyyy'))),
                       'YYYY/MM/DD HH24:MI:SS') last_check,
                   (CASE 
                      WHEN 
                        outdated_since is null
                      THEN '0'
                      WHEN
                        NVL(last_ok, to_date('01-Jan-1970', 'dd-mon-yyyy')) >= 
                        NVL(outdated_since, to_date('01-Jan-1970', 'dd-mon-yyyy'))
                      THEN '1'
                      WHEN
                        NVL(last_ok, to_date('01-Jan-1970', 'dd-mon-yyyy')) < 
                        NVL(outdated_since, to_date('01-Jan-1970', 'dd-mon-yyyy'))
                      THEN '2'
                      ELSE '3'
                    END) state,
                    is_live
            from apidb_r.TuningInstance@USER_DBLINK@ ti,
                   apidb_R.tuningfamily@USER_DBLINK@ tf,
                   apidb.instancemetainfo mi
            where mi.instance_nickname = ti.instance_nickname
            and   ti.family_name = tf.family_name
            ]]>
           </sql>
        </sqlQuery>

        <!-- UtilityQueries.CurrentRunningSql -->
        <sqlQuery name="CurrentlyRunningSql" isCacheable='false'>

            <paramRef ref="recordParams.source_id"/> 
            <paramRef ref="recordParams.project_id"/>
            <column name="source_id" />
            <column name="project_id" />
            <column name="serial_no" /> 
            <column name="osuser" /> 
            <column name="machine" /> 
            <column name="username" /> 
            <column name="qTime" /> 
            <column name="last_active_time" /> 
            <column name="sql_fulltext" />
            <column name="isSelf" />
           <sql> 
            <![CDATA[           
            select $$source_id$$ AS source_id, 
                   '@PROJECT_ID@' AS project_id,
                    s.serial# AS serial_no, s.osuser, 
                    lower(s.username) username, 
                    to_char(SYSDATE,'YYYY-MM-DD HH24:MI:SS') qTime,
                    to_char(vs.last_active_time,'YYYY-MM-DD HH24:MI:SS') last_active_time,
                    vs.sql_fulltext,
                    s.machine,
                    CASE WHEN
                        lower(s.username) = (select lower(user) from dual) then 'true'
                        else 'false'
                    END AS isSelf
              from v$session s, v$sql vs, v$process vp, dba_users dba
             where s.sql_address = vs.address
               and s.sql_hash_value = vs.hash_value
               and vs.users_executing > 0
               and s.paddr = vp.addr
               and s.status = 'ACTIVE'
               and vs.parsing_user_id = dba.user_id
               and s.osuser != 'oracle'
               and vs.sql_text not like '%vs.sql_fulltext%'
               --and lower(s.username) = (select lower(user) from dual)
            ]]>
           </sql>
        </sqlQuery>

     </querySet>
<!-- ////////// END UTILITY //////////// -->

</wdkModel>
