<wdkModel>
    <querySet name="GeneAttributes" queryType="attribute">

     <!-- notes

       - all projects need a gene alias query (or, we have to break that out of the 
         <recordClass> element

     -->


            <defaultTestParamValues includeProjects="PlasmoDB,EuPathDB">
               <paramValue name="source_id">PB400024.00.0</paramValue>
               <paramValue name="project_id">PlasmoDB</paramValue>
            </defaultTestParamValues>

            <defaultTestParamValues includeProjects="ToxoDB">
               <paramValue name="source_id">TGME49_021330</paramValue>
               <paramValue name="project_id">ToxoDB</paramValue>
            </defaultTestParamValues>

            <defaultTestParamValues includeProjects="CryptoDB">
               <paramValue name="source_id">cgd3_1400</paramValue>
               <paramValue name="project_id">CryptoDB</paramValue>
            </defaultTestParamValues>

            <defaultTestParamValues includeProjects="GiardiaDB">
               <paramValue name="source_id">GL50803_112048</paramValue>
               <paramValue name="project_id">GiardiaDB</paramValue>
            </defaultTestParamValues>

            <defaultTestParamValues includeProjects="TrichDB">
               <paramValue name="source_id">TVAG_386080</paramValue>
               <paramValue name="project_id">TrichDB</paramValue>
            </defaultTestParamValues>

            <!--TODO revisit the source_id, its correct but is a random source_id-->
            <defaultTestParamValues includeProjects="TriTrypDB">
               <paramValue name="source_id">Tc00.1047053510185.10</paramValue>
               <paramValue name="project_id">TriTrypDB</paramValue>
            </defaultTestParamValues>

            <testRowCountSql excludeProjects="EuPathDB">
               select count(na_feature_id)
               from dots.GeneFeature
               where external_database_release_id in (
                 select distinct(dbr.external_database_release_id)
                 from apidb.GeneAttributes ga, sres.ExternalDatabase db,
                      sres.ExternalDatabaseRelease dbr
                 where db.name = ga.external_db_name
                   and dbr.version = ga.external_db_version
                   and dbr.external_database_id = db.external_database_id
                 )
            </testRowCountSql>

            <testRowCountSql includeProjects="EuPathDB">
               SELECT count(*) FROM apidb.GeneAttributes
            </testRowCountSql>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Gene alias -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

        <sqlQuery name="GeneAlias" includeProjects="ToxoDB,PlasmoDB">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="old_source_id"/>
            <column name="old_project_id"/>
            <sql includeProjects="PlasmoDB">
              <![CDATA[
                SELECT ga.source_id, 
                       '@PROJECT_ID@' AS project_id,
                       a.alias as old_source_id, '@PROJECT_ID@' AS old_project_id
                FROM apidb.GeneAlias a, apidb.geneattributes ga
                 where ga.source_id = a.gene
              ]]>
            </sql>
            <sql includeProjects="ToxoDB">
              <![CDATA[
                SELECT f.gene as source_id, '@PROJECT_ID@' AS project_id,
                       f.id as old_source_id, '@PROJECT_ID@' AS old_project_id
                FROM (SELECT gene AS id, gene
                      FROM apidb.geneid
                      WHERE id = lower(gene)
                      UNION
                      SELECT id, gene
                      FROM apidb.geneid
                      WHERE id <> lower(gene)) f
              ]]>
            </sql>
        </sqlQuery>


       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- TrackNewAnnotation -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!--  the workshop (re) annotations have become the official annotations and this section is obsolete

        <sqlQuery name="TrackNewAnnotation" includeProjects="PlasmoDB">
           <testParamValues includeProjects="PlasmoDB">
               <paramValue name="source_id">PF11_0344</paramValue>
            </testParamValues>

            <column name="project_id"/>
            <column name="source_id" />
            <column name="annotation_status" />
            <column name="new_product" />
            <column name="new_go" />
            <column name="new_ec" />
            <column name="new_protein" />
            <column name="new_product_string"/>
            <sql>
               select '@PROJECT_ID@' as project_id, ga.source_id, tna.status as annotation_status, tna.new_product, tna.new_go, tna.new_ec, tna.new_protein, tna.product as new_product_string
               from Apidb.TRACKNEWANNOTATION tna, Apidb.GeneAttributes ga WHERE ga.source_id = tna.source_id(+)
            </sql>
        </sqlQuery>
-->

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!--  new annotation at GeneDB -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
        <sqlQuery name="updated_annotation" includeProjects="TriTrypDB">
           <testParamValues includeProjects="TriTrypDB">
               <paramValue name="source_id">LbrM08_V2.0010</paramValue>
            </testParamValues>

            <column name="project_id"/>
            <column name="source_id" />
            <column name="updated_annotation" />
            <sql>
              select ga.source_id, '@PROJECT_ID@' AS project_id, lin.source_id as updated_annotation
                from apidb.GENEATTRIBUTES ga,
                  (select gf.source_id
                  from sres.dbref r, sres.externaldatabaserelease rel, dots.dbrefnafeature rf,
                  dots.genefeature gf, sres.externaldatabase ed
                  where gf.na_feature_id = rf.na_feature_id(+)
                  and rf.db_ref_id = r.db_ref_id
                  and r.external_database_release_id = rel.external_database_release_id
                  and rel.external_database_id = ed.external_database_id
                  and ed.name = 'Updated genes DBRefs') lin
              where ga.source_id = lin.source_id(+)
            </sql>
        </sqlQuery>



        <sqlQuery name="Bfmv">
            <column name="project_id"  ignoreCase="true"/>
            <column name="source_id"  ignoreCase="true"/>
            <column name="gene_type"  ignoreCase="true"/>
            <column name="product"  ignoreCase="true"/>
            <column name="start_min" />
            <column name="end_max" />
            <column name="start_min_text"  sortingColumn="start_min"/>
            <column name="end_max_text"  sortingColumn="end_max"/>
            <column name="transcript_length" />
            <column name="cds_length" />
            <column name="protein_length" />
            <column name="context_start" />
            <column name="context_end" />
            <column name="strand_plus_minus"  sortingColumn="strand"/>
            <column name="sequence_id"  ignoreCase="true"/>
            <column name="cyc_db"  sortingColumn="organism"/>
            <column name="cyc_gene_id"  sortingColumn="source_id"/>
            <column name="tm_count" />
            <column name="so_id" />
            <column name="so_term_name" />
            <column name="so_term_definition" />
            <column name="ontology_name" />
            <column name="so_version" />
            <column name="anticodon" />
            <column name="molecular_weight" />
            <column name="isoelectric_point" />
            <column name="min_molecular_weight" />
            <column name="max_molecular_weight" />
            <column name="hydropathicity_gravy_score" />
            <column name="aromaticity_score" />
            <column name="external_db_name" />
            <column name="external_db_version" />
            <column name="ncbi_tax_id" />
            <column name="chromosome" sortingColumn="chromosome_order_num" />
            <column name="chromosome_order_num" />
            <column name="species"  sortingColumn="organism"/>
            <column name="genus_species"  sortingColumn="organism"/>
            <column name="organism_full"  sortingColumn="organism"/> 
            <column name="organism"  sortingColumn="organism"/>
            <column name="project"  ignoreCase="true"/>
            <column name="exon_count" />
            <column name="strand" />
            <column name="ec_numbers_string"/>
            <column name="orthomcl_name"/>
            <column name="total_snps_all_strains"/>
            <column name="nonsynonymous_snps_all_strains"/>
            <column name="synonymous_snps_all_strains"/>
            <column name="nonsyn_syn_ratio_all_strains"/>
            <column name="signalp_scores" />
            <column name="signalp_peptide" />
            <column name="ortholog_number" />
            <column name="paralog_number" />
            <column name="ann_go_component" excludeProjects="GiardiaDB"/>
            <column name="ann_go_process" excludeProjects="GiardiaDB"/>
            <column name="ann_go_function" excludeProjects="GiardiaDB"/>
            <column name="pred_go_component"/>
            <column name="pred_go_process"/>
            <column name="pred_go_function"/>
            <column name="genedb_organism"  includeProjects="PlasmoDB"/>
            <column name="der_min_level" includeProjects="PlasmoDB"/>
            <column name="der_max_level" includeProjects="PlasmoDB"/>
            <column name="der_min_timing" includeProjects="PlasmoDB"/>
            <column name="der_max_timing" includeProjects="PlasmoDB"/>
            <column name="der_max_pct" includeProjects="PlasmoDB"/>
            <column name="der_max_fold_induction" includeProjects="PlasmoDB"/>
            <column name="winz_min_level" includeProjects="PlasmoDB"/>
            <column name="winz_max_level" includeProjects="PlasmoDB"/>
            <column name="winz_min_timing" includeProjects="PlasmoDB"/>
            <column name="winz_max_timing" includeProjects="PlasmoDB"/>
            <column name="winz_max_pct" includeProjects="PlasmoDB"/>

            <column name="type3_type1_fold_change"  includeProjects="ToxoDB,EuPathDB"/>
            <column name="type3_type2_fold_change"  includeProjects="ToxoDB,EuPathDB"/>
            <column name="type2_type1_fold_change"   includeProjects="ToxoDB,EuPathDB"/>

            <column name="formatted_gene_id"  
                    sortingColumn="gene_id" includeProjects="ToxoDB,EuPathDB"/>
            <column name="gene_id" includeProjects="ToxoDB,EuPathDB"/>

            <column name="is_deprecated"  includeProjects="GiardiaDB"/>

             <sqlParamValue name="toxo_expression" includeProjects="ToxoDB,EuPathDB">
                <![CDATA[
                   bfmv.type3_type1_fold_change, bfmv.type3_type2_fold_change, 
                   bfmv.type2_type1_fold_change, gene_id,
                   CASE WHEN bfmv.organism like 'Toxo%' THEN 'TG_' || to_char(bfmv.gene_id)
                        ELSE to_char(bfmv.gene_id) END as formatted_gene_id,
                ]]>
            </sqlParamValue>
            <sqlParamValue name="toxo_expression" excludeProjects="ToxoDB,EuPathDB">
                <![CDATA[
                ]]>
            </sqlParamValue>

            <sqlParamValue name="is_deprecated" includeProjects="GiardiaDB">
                <![CDATA[
                DECODE(bfmv.is_deprecated, 0, 'No', 1, 'Yes') AS is_deprecated,
                ]]>
            </sqlParamValue>
            <sqlParamValue name="is_deprecated" excludeProjects="GiardiaDB">
                <![CDATA[
                ]]>
            </sqlParamValue>
            <sqlParamValue name="cyc_db" includeProjects="PlasmoDB,EuPathDB">
                <![CDATA[
                   DECODE(bfmv.organism,
                          'Plasmodium falciparum 3D7', 'PLASMO', null)
                ]]>
            </sqlParamValue>
            <sqlParamValue name="cyc_db" includeProjects="ToxoDB">
                <![CDATA[
                   'TOXO'
                ]]>
            </sqlParamValue>
 <!-- TODO : check this -->
            <sqlParamValue name="cyc_db" includeProjects="CryptoDB,GiardiaDB,TrichDB,TriTrypDB">
                <![CDATA[
                   DECODE(
                   substr(
                     bfmv.organism, 
                     instr(ltrim(bfmv.organism), ' ', 1, 1)+1, 
                     instr(ltrim(bfmv.organism)||' ', ' ', 1, 2) - instr(bfmv.organism, ' ', 1, 1) -1
                   ),
                  'parvum', 'cparvum', 'hominis')
                ]]>
            </sqlParamValue>
            <sqlParamValue name="genedb_organism" includeProjects="PlasmoDB">
                <![CDATA[
                   DECODE(bfmv.organism,
                          'Plasmodium falciparum 3D7', 'malaria',
                          'Plasmodium berghei strain ANKA', 'pberghei',
                          'Plasmodium chabaudi chabaudi', 'pchabaudi',
                          'Plasmodium knowlesi strain H', 'pknowlesi',
                          null) as genedb_organism,
                ]]>
            </sqlParamValue>
            <sqlParamValue name="genedb_organism" excludeProjects="PlasmoDB">
                <![CDATA[
                ]]>
            </sqlParamValue>

            <sql>
            <![CDATA[
            SELECT bfmv.source_id, bfmv.gene_type, bfmv.product, bfmv.project_id,bfmv.project_id as project,
                   start_min, end_max,
                   trim(to_char(bfmv.start_min,'999,999,999')) as start_min_text,
                   trim(to_char(bfmv.end_max,'999,999,999')) as end_max_text,
                   decode(strand,'forward','+','reverse','-',null) as strand_plus_minus,
                   bfmv.cds_length, bfmv.protein_length, bfmv.transcript_length,
                   bfmv.context_start,bfmv.context_end,
                   bfmv.sequence_id, bfmv.organism as organism_full, bfmv.tm_count, bfmv.so_id,
                   bfmv.so_term_name, bfmv.so_term_definition,
                   bfmv.ontology_name, bfmv.so_version, bfmv.anticodon,
                   bfmv.molecular_weight, bfmv.isoelectric_point,
                   bfmv.min_molecular_weight, bfmv.max_molecular_weight,
                   bfmv.hydropathicity_gravy_score, bfmv.aromaticity_score,
                   bfmv.external_db_name, bfmv.external_db_version,
                   bfmv.exon_count, bfmv.ncbi_tax_id,
                   SUBSTR(bfmv.organism, 1, INSTR(bfmv.organism || '  ', ' ', 1, 2) - 1) AS genus_species,
                   '<i>' || SUBSTR(bfmv.organism, 1, 1) || '.&nbsp;' || 
                      SUBSTR(bfmv.organism, INSTR(bfmv.organism, ' ', 1, 1) +1) || '</i>' as organism,
                   SUBSTR(bfmv.organism,
                          INSTR(bfmv.organism, ' ') + 1,
                          INSTR(bfmv.organism || '  ', ' ', 1, 2) - INSTR(bfmv.organism, ' ') - 1) AS species,
                   &&cyc_db&& AS cyc_db,
                   &&genedb_organism&&
                   &&toxo_expression&&
                   UPPER(bfmv.source_id) AS cyc_gene_id,
                   bfmv.strand,bfmv.ec_numbers as ec_numbers_string, bfmv.orthomcl_name,
                   bfmv.annotated_go_component as ann_go_component,
                   bfmv.annotated_go_function as ann_go_function,
                   bfmv.annotated_go_process as ann_go_process,
                   bfmv.predicted_go_component as pred_go_component,
                   bfmv.predicted_go_function as pred_go_function,
                   &&is_deprecated&& 
                   bfmv.predicted_go_process as pred_go_process,
                   bfmv.derisi_max_level as der_max_level,
                   bfmv.derisi_min_level as der_min_level,
                   bfmv.derisi_min_timing as der_min_timing,
                   bfmv.derisi_max_timing as der_max_timing,
                   to_char(bfmv.derisi_max_fold_induction, '999.99') as der_max_fold_induction,
                   TO_CHAR(bfmv.derisi_max_pct * 100, '99.9') as der_max_pct,
                   bfmv.winzeler_max_level as winz_max_level,
                   bfmv.winzeler_min_level as winz_min_level,
                   bfmv.winzeler_min_timing as winz_min_timing,
                   bfmv.winzeler_max_timing as winz_max_timing,
                   TO_CHAR(bfmv.winzeler_max_pct * 100, '99.9') as winz_max_pct,
                   bfmv.total_snps as total_snps_all_strains,
                   bfmv.nonsynonymous_snps as nonsynonymous_snps_all_strains,
                   bfmv.nonsyn_syn_ratio as nonsyn_syn_ratio_all_strains,
                   bfmv.synonymous_snps as synonymous_snps_all_strains,
                   bfmv.signalp_scores,bfmv.signalp_peptide,
                   ortholog_number,paralog_number, chromosome, chromosome_order_num
            FROM apidb.GeneAttributes bfmv
            ]]>
            </sql>

<!-- note that moved following up into sqlParamValues .. delete when all works

            <sql includeProjects="CryptoDB,GiardiaDB,TrichDB">
            <![CDATA[
            SELECT bfmv.source_id, bfmv.gene_type, bfmv.product,bfmv.project_id,
                   start_min, end_max,
                   trim(to_char(bfmv.start_min,'999,999,999')) as start_min_text,
                   trim(to_char(bfmv.end_max,'999,999,999')) as end_max_text,
                   decode(strand,'forward','+','reverse','-',null) as strand_plus_minus,
                   bfmv.cds_length, bfmv.protein_length, bfmv.transcript_length,
                   bfmv.context_start, bfmv.context_end, bfmv.strand,
                   bfmv.sequence_id,
                   '<i>' || SUBSTR(bfmv.organism, 1, 1) || '.&nbsp;' || 
                       SUBSTR(bfmv.organism, INSTR(bfmv.organism, ' ', 1, 1) +1) || '</i>' as organism,
                   bfmv.organism  as organism_full, 
                   bfmv.tm_count, bfmv.so_id,
                   bfmv.so_term_name, bfmv.so_term_definition,
                   bfmv.ontology_name, bfmv.so_version, bfmv.anticodon,
                   bfmv.molecular_weight, bfmv.isoelectric_point,
                   bfmv.min_molecular_weight, bfmv.max_molecular_weight,
                   bfmv.hydropathicity_gravy_score, bfmv.aromaticity_score,
                   bfmv.external_db_name, bfmv.external_db_version, 
                   bfmv.exon_count, bfmv.ncbi_tax_id,
                   SUBSTR(bfmv.organism, 1, INSTR(bfmv.organism || '  ', ' ', 1, 2) - 1) AS genus_species,
                   SUBSTR(bfmv.organism,
                          INSTR(bfmv.organism, ' ') + 1,
                          INSTR(bfmv.organism || '  ', ' ', 1, 2) - INSTR(bfmv.organism, ' ') - 1) AS species,
                   DECODE(
                   substr(
                     bfmv.organism, 
                     instr(ltrim(bfmv.organism), ' ', 1, 1)+1, 
                     instr(ltrim(bfmv.organism)||' ', ' ', 1, 2) - instr(bfmv.organism, ' ', 1, 1) -1
                   ),
                  'parvum', 'cparvum', 'hominis')
                   AS cyc_db,
                   UPPER(bfmv.source_id) AS cyc_gene_id,
                   bfmv.ec_numbers as ec_numbers_string,
                   bfmv.annotated_go_component as ann_go_component,
                   bfmv.annotated_go_function as ann_go_function,
                   bfmv.annotated_go_process as ann_go_process,
                   bfmv.predicted_go_component as pred_go_component,
                   bfmv.predicted_go_function as pred_go_function,
                   &&is_deprecated&&
                   bfmv.predicted_go_process as pred_go_process
            FROM apidb.GeneAttributes bfmv
            ]]>
            </sql>
            <sql includeProjects="EuPathDB">
            <![CDATA[
            SELECT bfmv.source_id, bfmv.gene_type, bfmv.product, bfmv.project_id,
                   start_min, end_max,
                   trim(to_char(bfmv.start_min,'999,999,999')) as start_min_text,
                   trim(to_char(bfmv.end_max,'999,999,999')) as end_max_text,
                   decode(strand,'forward','+','reverse','-',null) as strand_plus_minus,
                   bfmv.cds_length, bfmv.protein_length, bfmv.transcript_length,
                   bfmv.context_start, bfmv.context_end, 
                   bfmv.sequence_id, 
                   bfmv.organism  as organism_full, 
                   bfmv.tm_count, bfmv.so_id,
                   bfmv.so_term_name, bfmv.so_term_definition,
                   bfmv.ontology_name, bfmv.so_version, bfmv.anticodon,
                   bfmv.molecular_weight, bfmv.isoelectric_point,
                   bfmv.min_molecular_weight, bfmv.max_molecular_weight,
                   bfmv.hydropathicity_gravy_score, bfmv.aromaticity_score,
                   bfmv.external_db_name, bfmv.external_db_version,
                   bfmv.exon_count, bfmv.ncbi_tax_id,
                   SUBSTR(bfmv.organism, 1, INSTR(bfmv.organism || '  ', ' ', 1, 2) - 1) AS genus_species,
                   '<i>' || SUBSTR(bfmv.organism, 1, 1) || '.&nbsp;' || 
                       SUBSTR(bfmv.organism, INSTR(bfmv.organism, ' ', 1, 1) +1) || '</i>' as organism,
                   SUBSTR(bfmv.organism,
                          INSTR(bfmv.organism, ' ') + 1,
                          INSTR(bfmv.organism || '  ', ' ', 1, 2) - INSTR(bfmv.organism, ' ') - 1) AS species,
                   DECODE(bfmv.organism,
                          'Plasmodium falciparum 3D7', 'PLASMO', null)
                   AS cyc_db,
                   UPPER(bfmv.source_id) AS cyc_gene_id,
                   bfmv.strand,bfmv.ec_numbers as ec_numbers_string,
                   bfmv.annotated_go_component as ann_go_component,
                   bfmv.annotated_go_function as ann_go_function,
                   bfmv.annotated_go_process as ann_go_process,
                   bfmv.predicted_go_component as pred_go_component,
                   bfmv.predicted_go_function as pred_go_function,
                   bfmv.predicted_go_process as pred_go_process,
                   bfmv.derisi_max_level as der_max_level,
                   bfmv.derisi_min_level as der_min_level,
                   bfmv.derisi_min_timing as der_min_timing,
                   bfmv.derisi_max_timing as der_max_timing,
                   bfmv.derisi_max_pct as der_max_pct,
                   bfmv.winzeler_max_level as winz_max_level,
                   bfmv.winzeler_min_level as winz_min_level,
                   bfmv.winzeler_min_timing as winz_min_timing,
                   bfmv.winzeler_max_timing as winz_max_timing,
                   bfmv.winzeler_max_pct as winz_max_pct
            FROM apidb.GeneAttributes bfmv
            ]]>
            </sql>
-->

        </sqlQuery>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- toxo release4 genes -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

        <sqlQuery name="ToxoRelease4Info" displayName="Release4 Info" includeProjects="ToxoDB">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="old_source_id"/>
            <column name="same_protein"/>
            <sql>
            <![CDATA[
              select ga.source_id,ga.project_id,
              apidb.tab_to_string(CAST(COLLECT(toa.old_source_id) AS apidb.varchartab),', ') as old_source_id,
              decode(min(toa.new_protein),1,'No',0,'Yes') as same_protein
              from apidb.TRACKOLDANNOTATION toa, apidb.GENEATTRIBUTES ga
              where toa.source_id(+) = ga.SOURCE_ID
              group by ga.source_id,ga.project_id
            ]]>
            </sql>
        </sqlQuery>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- protein sequence  -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

        <sqlQuery name="ChromosomeMappingText" displayName="Chromosome" includeProjects="CryptoDB,TriTrypDB">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="chromosomemappingtext"/>
            <sql>
            <![CDATA[SELECT ga.source_id,'@PROJECT_ID@' as project_id,
                            CASE WHEN ga.chromosome IS NOT NULL
                                 THEN '( ' || ga.chromosome || ' )'
                                 ELSE '' END AS chromosomemappingtext
                     FROM apidb.geneAttributes ga
            ]]>
            </sql>
        </sqlQuery>


       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- protein sequence new annotation  -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
<!--  the workshop (re) annotations have become the official annotations and this section is obsolete

        <sqlQuery name="NewAnnotationProteinSequence" displayName="New Annotation Protein Sequence" includeProjects="PlasmoDB">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="workshop_protein_sequence"/>
            <sql>
            <![CDATA[
            SELECT tna.source_id,
                   tas.sequence AS workshop_protein_sequence,'@PROJECT_ID@' as project_id
            FROM dots.genefeature gf, dots.Transcript t,
                 dots.TranslatedAaFeature taf, dots.TranslatedAaSequence tas,
                 apidb.TRACKNEWANNOTATION tna
            WHERE tna.new_source_id = gf.source_id
              AND t.parent_id(+) = gf.na_feature_id
              AND t.na_feature_id = taf.na_feature_id(+)
              AND taf.aa_sequence_id = tas.aa_sequence_id(+)
            ]]>
            </sql>>
        </sqlQuery
 -->




        <sqlQuery name="ProteinSequence">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="protein_sequence"/>
            <sql>
            <![CDATA[
            SELECT ga.source_id, ga.project_id, ps.sequence AS protein_sequence
            FROM   apidb.proteinSequence ps, apidb.geneattributes ga
            WHERE ga.source_id = ps.source_id (+)
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="NaSequenceDatabaseName">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="sequence_database_name"/>
            <sql>
            <![CDATA[
            select ga.source_id, sa.database_name as sequence_database_name, '@PROJECT_ID@' as project_id
            from apidb.geneattributes ga, apidb.sequenceattributes sa
            where ga.sequence_id = sa.source_id
            ]]>
            </sql>
        </sqlQuery>


       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- phylogenetic trees -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
        <sqlQuery name="PhylogeneticTree"
                       displayName="Phylogenetic Tree" includeProjects="GiardiaDB">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="phyTreeId"/>
            <sql>
            <![CDATA[
              select tree.source_id as phyTreeId,ga.source_id, '@PROJECT_ID@' as project_id
              from apidb.phylogenetictree tree, apidb.geneattributes ga
              where ga.source_id = tree.source_id(+)
            ]]>
            </sql>
        </sqlQuery>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- transcript sequence -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!--  the workshop (re) annotations have become the official annotations and this section is obsolete

        <sqlQuery name="NewAnnotationTranscriptSequence"
                       displayName="RNA Sequence" includeProjects="PlasmoDB">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="workshop_transcript_sequence"/>
            <sql>
            <![CDATA[
              select tna.source_id, s.sequence as workshop_transcript_sequence,'@PROJECT_ID@' as project_id
              from dots.genefeature gf, dots.transcript t, dots.splicednasequence s, apidb.TRACKNEWANNOTATION tna
              where tna.new_source_id = gf.source_id
                and t.parent_id = gf.na_feature_id
                and s.na_sequence_id = t.na_sequence_id
            ]]>
            </sql>
        </sqlQuery>
-->
        <sqlQuery name="TranscriptSequence">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="transcript_sequence"/>
            <sql>
            <![CDATA[
             SELECT source_id, project_id, sequence AS transcript_sequence
             FROM   apidb.transcriptSequence
            ]]>
            </sql>
        </sqlQuery>


       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- cds sequence -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!--  the workshop (re) annotations have become the official annotations and this section is obsolete

        <sqlQuery name="NewAnnotationCDS"
                       displayName="New Annotation RNA Sequence" includeProjects="PlasmoDB">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="workshop_cds"/>
            <sql>
            <![CDATA[
              SELECT tna.source_id,
                     SUBSTR(s.sequence,
                            tf.translation_start,
                            tf.translation_stop - tf.translation_start + 1)
                       AS workshop_cds,'@PROJECT_ID@' as project_id
              FROM dots.genefeature gf, dots.transcript t,
                   dots.splicednasequence s, dots.TranslatedAaFeature tf,
                   apidb.TRACKNEWANNOTATION tna
              WHERE tna.new_source_id = gf.source_id
                AND t.parent_id = gf.na_feature_id
                AND s.na_sequence_id = t.na_sequence_id
                AND t.na_feature_id = tf.na_feature_id(+)
            ]]>
            </sql>
        </sqlQuery>
-->


        <sqlQuery name="CDS">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="cds"/>
            <sql>
            <![CDATA[
              SELECT ga.source_id, ga.project_id, cs.sequence AS cds
              FROM   apidb.codingSequence cs, apidb.geneattributes ga
              WHERE ga.source_id = cs.source_id (+)
            ]]>
            </sql>
        </sqlQuery>


       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- plasmo expression graphs -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="ExpressionGraphs" includeProjects="PlasmoDB">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="graph_derisi_winzeler" />
            <column name="graph_winzeler" />
            <column name="graph_3d7" />
            <column name="graph_hb3" />
            <column name="graph_dd2" />
            <column name="graph_waters"/>
            <column name="graph_gametocyte"/>
            <column name="graph_cowman"/>
            <column name="graph_mexp128"/>
            <column name="graph_kappe"/>
            <column name="graph_daily"/>
            <column name="graph_newbold"/>
            <column name="graph_zb_pvivax"/>
            <column name="graph_pf_rna_seq"/>
            <column name="graph_westenberger"/>
            <column name="graph_winzeler_py_mixed"/>
            <sql>
            <![CDATA[
           SELECT egs.source_id, 'PlasmoDB' as project_id,
                      NVL(MAX(graph_zb_pvivax), 0) AS graph_zb_pvivax,
                      NVL(MAX(graph_pf_rna_seq), 0) AS graph_pf_rna_seq,
                      NVL(MAX(graph_derisi_winzeler), 0) AS graph_derisi_winzeler,
                      NVL(MAX(graph_winzeler), 0) AS graph_winzeler,
                      NVL(MAX(graph_3d7), 0) AS graph_3d7,
                      NVL(MAX(graph_hb3), 0) AS graph_hb3,
                      NVL(MAX(graph_dd2), 0) AS graph_dd2,
                      NVL(MAX(graph_waters), 0) AS graph_waters,
                      NVL(MAX(graph_gametocyte), 0) AS graph_gametocyte,
                      NVL(MAX(graph_cowman), 0) AS graph_cowman,
                      NVL(MAX(graph_mexp128), 0) AS graph_mexp128,
                      NVL(MAX(graph_kappe), 0) AS graph_kappe,
                      NVL(MAX(graph_westenberger), 0) AS graph_westenberger,
                      NVL(MAX(graph_winzeler_py_mixed), 0) AS graph_winzeler_py_mixed,
                      NVL(MAX(graph_newbold), 0) AS graph_newbold,
                      NVL(MAX(graph_daily), 0) AS graph_daily
               FROM apidb.PlasmoExpressionGraphs egs, apidb.geneattributes ga
                where ga.source_id = egs.source_id (+)
               group by egs.source_id
            ]]>
            </sql>
        </sqlQuery>


       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- toxo expression graphs -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="ExpressionGraphs" includeProjects="ToxoDB">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="graph_archetypal"/>
            <sql>
            <![CDATA[
               SELECT egs.source_id AS source_id, '@PROJECT_ID@' as project_id,
                      NVL(egs.graph_archetypal, 0) AS graph_archetypal
               FROM apidb.ToxoExpressionGraphs egs, apidb.geneattributes ga
               WHERE ga.source_id = egs.source_id(+)
            ]]>
            </sql>
        </sqlQuery>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- giardia expression graphs -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="ExpressionGraphs" includeProjects="GiardiaDB">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="graph_stress" />
            <column name="graph_stress_ts" />
            <column name="graph_sage_pct" />
            <sql>
            <![CDATA[
               SELECT egs.source_id AS source_id, '@PROJECT_ID@' as project_id,
                      NVL(graph_stress, 0) AS graph_stress,
                      NVL(graph_sage_pct, 0) AS graph_sage_pct,
                      NVL(graph_stress_ts, 0) AS graph_stress_ts
               FROM apidb.GiardiaExpressionGraphs egs,apidb.geneattributes ga
               WHERE ga.source_id = egs.source_id(+) 
            ]]>
            </sql>
        </sqlQuery>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- TriTryp expression graphs -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="ExpressionGraphs" includeProjects="TriTrypDB">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="graph_infantum_promastigote" />
            <sql>
            <![CDATA[
               SELECT egs.source_id AS source_id, '@PROJECT_ID@' as project_id,
                      NVL(graph_infantum_promastigote, 0) AS graph_infantum_promastigote
               FROM apidb.tritrypexpressiongraphs egs,apidb.geneattributes ga
               WHERE ga.source_id = egs.source_id(+) 
            ]]>
            </sql>
        </sqlQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- GFF sequence -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GeneGffSequence">
        <column name="source_id"/>
        <column name="project_id"/>
        <column name="gff_transcript_sequence"/>
        <sql>
          <![CDATA[
            select gf.source_id AS source_id, '@PROJECT_ID@' as project_id,
                   s.sequence as gff_transcript_sequence
            from Apidb.Geneattributes gf, 
                 DoTS.Transcript rna,
                 dots.splicednasequence s
            where gf.na_feature_id = rna.parent_id
                  and s.na_sequence_id = rna.na_sequence_id
          ]]>
        </sql>
      </sqlQuery>

    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- GFF attributes (other than sequence) -->  
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="GeneGffAttrs">
        <column name="source_id"/>
        <column name="project_id"/>
        <column name="gff_seqid"/>
        <column name="gff_source"/>
        <column name="gff_type"/>
        <column name="gff_fstart"/>
        <column name="gff_fend"/>
        <column name="gff_score"/>
        <column name="gff_strand"/>
        <column name="gff_phase"/>
        <column name="gff_attr_id"/>
        <column name="gff_attr_web_id"/>
        <column name="gff_attr_name"/>
        <column name="gff_attr_description"/>
        <column name="gff_attr_locus_tag"/>
        <column name="gff_attr_size"/>
        <sql>
          <![CDATA[
            select ga.source_id, '@PROJECT_ID@' as project_id,
                   'apidb|' || ga.sequence_id as gff_seqid,
                   'ApiDB' as gff_source,
                   'gene' as gff_type,
                   least(ga.start_min, ga.end_max) as gff_fstart,
                   greatest(ga.start_min, ga.end_max) as gff_fend,
                   '.' as gff_score,
                   decode(ga.is_reversed, 1, '-', '+') as gff_strand,
                   '.' as gff_phase,
                   'apidb|' || ga.source_id as gff_attr_id,
                   ga.source_id as gff_attr_web_id,
                   ga.source_id as gff_attr_name,
                   case
                     when ga.is_deprecated = 1 then ga.product || ' (deprecated)'
                     else ga.product
                   end as gff_attr_description,
                   ga.source_id as gff_attr_locus_tag,
                   (greatest(ga.start_min, ga.end_max)
                   - least(ga.start_min, ga.end_max) + 1) as gff_attr_size
            from apidb.GeneAttributes ga
          ]]>
        </sql>
      </sqlQuery>


    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
    <!-- Protein Id's and Linkouts -->
    <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

    <sqlQuery name="Protein_Linkout" includeProjects="CryptoDB">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="protein_id" />
            <column name="linkout" />
            <sql>
            <![CDATA[           
            SELECT 
                  g.source_id,'@PROJECT_ID@' as project_id,
                  DECODE (
                       protein_id, null, 
                           '', 
                           'Genbank Protein Record ' ||
                           '(<a href="http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?val=' ||
                            protein_id         || 
                            '">' || 
                            protein_id         ||
                            '</a>)'
                       )
                  as linkout, 
                  t.protein_id
            FROM  dots.transcript t, apidb.geneattributes g
            WHERE g.na_feature_id = t.parent_id(+)
            ]]>
            </sql>
        </sqlQuery>

<!--
        <sqlQuery name="SGC_3D_Struct" includeProjects="CryptoDB">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="pdb_id"/>
            <sql>
              <![CDATA[
            SELECT distinct gf.source_id, '@PROJECT_ID@' as project_id, xx.pdb_id
            FROM apidb.geneattributes gf,
             (SELECT drnf.na_feature_id, dr.primary_identifier AS pdb_id
              FROM dots.DbRefNaFeature drnf,
                 sres.DbRef dr, sres.ExternalDatabaseRelease edr,
                 sres.ExternalDatabase ed
              WHERE drnf.db_ref_id = dr.db_ref_id
                AND dr.external_database_release_id = edr.external_database_release_id
                AND edr.external_database_id = ed.external_database_id
                AND ed.name = 'Structural Genomics Consortium 3D Structures') xx                      
            WHERE gf.na_feature_id = xx.na_feature_id(+)             
            ORDER BY pdb_id
              ]]>
            </sql>
        </sqlQuery>

-->

        <sqlQuery name="Translation" includeProjects="CryptoDB">
            <column name="source_id" />
            <column name="project_id"/>
            <column name="translation" />
            <sql>
            <!-- UPPER(source_id) is a workaround to some unresolved bug where
                 the translation doesn't get returned via webservices
                 (UPPER removed until new sql munger updated to handle it) -->
            <!-- The sql weirdness is to force a single row result set of null
                 values when there is no translation (as is the case for 
                 non-protein coding genes) - the WDK doesn't allow an empty result.    -->
            <![CDATA[  
              SELECT g.source_id, '@PROJECT_ID@' as project_id,
                          tas.sequence as translation
              FROM    apidb.geneattributes g,
                    dots.translatedaasequence tas, 
                    dots.translatedaafeature taf, 
                    dots.transcript t
              WHERE g.na_feature_id = t.parent_id        
              AND taf.na_feature_id(+) = t.na_feature_id
              AND taf.aa_sequence_id = tas.aa_sequence_id(+) 
           
            ]]>
            </sql>
        </sqlQuery>

    </querySet>

</wdkModel>
