<wdkModel>
  <querySet name="CompoundTables" queryType="table"  includeProjects="PlasmoDB">

    <sqlQuery name="Properties">
            <column name="project_id"/>
            <column name="source_id"  />
            <column name="property"  />
            <column name="type"  />
            <column name="value"  />
           <sql>
            <![CDATA[
	       SELECT '@PROJECT_ID@' AS project_id, ca.source_id, property, 
	              CASE WHEN type IS NULL THEN '' ELSE type END AS type,
		      CASE WHEN property ='Molecular Formula'
		           THEN REGEXP_REPLACE(value,'(\d)','<sub>\1</sub>')
			   ELSE value END AS value
	       FROM apidb.PubChemCompound c, ApidbTuning.CompoundAttributes ca
               WHERE c.compound_id = ca.compound_id
	       ORDER BY property
            ]]>
            </sql>
    </sqlQuery>



    <sqlQuery name="SubstanceProps">
            <column name="project_id"/>
            <column name="source_id"  />
            <column name="substance_id"  />
            <column name="property"  />
            <column name="value"  />
           <sql>
            <![CDATA[
	      SELECT '@PROJECT_ID@' as project_id, ca.source_id, s2.property, s1.substance_id,
		      CASE WHEN (s2.property='KEGG') 
		      THEN '<a href="http://www.genome.jp/dbget-bin/www_bget?cpd:' || s2.value || '">' || s2.value || '</a>'
		      ELSE  s2.value END AS value
	      FROM APIDB.pubchemsubstance s1, APIDB.pubchemsubstance s2, ApidbTuning.CompoundAttributes ca
	      WHERE s1.property = 'CID'
	      AND s1.type = 'standardized'
             AND s1.value = ca.compound_id
	      AND s1.substance_id = s2.substance_id
	      AND NOT s2.property = 'CID'
	      ORDER BY s1.substance_id, s2.property
        ]]>
           </sql>
    </sqlQuery>



    <sqlQuery name="CompoundsFromMetabolicPathways">
      <column name="source_id"  />
      <column name="project_id"/>
      <column name="compound"/>
      <column name="enzyme"/>
      <column name="reaction"/>
      <column name="name"/>
      <column name="pathway"/>
      <sql>
         SELECT compound, enzyme, reaction, pathway, 
	      pc.name, compound_source_id AS source_id, '@PROJECT_ID@' AS project_id
         FROM apidbtuning.PathwayCompounds pc
         ORDER BY pathway
	    </sql>
        </sqlQuery>

    <sqlQuery name="RelatedCompounds">
      <column name="source_id"  />
      <column name="project_id"/>
      <column name="subst_id"/>
      <column name="type"/>
      <column name="related_id"/>
      <sql>
	SELECT ca.source_id, '@PROJECT_ID@' AS project_id,
                        s1.substance_id as subst_id, s2.type, s2.value as related_id
	  FROM  APIDB.pubchemsubstance s1,  APIDB.pubchemsubstance s2, ApidbTuning.CompoundAttributes ca
	 WHERE s1.substance_id = s2.substance_id
	   AND s1.property='CID' 
	   AND s1.type = 'standardized'
           AND s1.value = ca.compound_id
	   AND s2.property='CID'
	   AND not s1.value = s2.value
	    </sql>
        </sqlQuery>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Mass Spec (Metabolite)  Graphs -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="MassSpecGraphs" includeProjects="PlasmoDB">
            <column name="source_id" />
            <column name="project_id" />
            <column name="graph_ids" />
            <column name="module" />
            <column name="mainOpen" />
            <column name="dataOpen" />
            <column name="display_name" />
            <column name="description" />
            <column name="x_axis" />
            <column name="y_axis" />
            <column name="visible_parts" />
            <column name="attribution" />
            <column name="dataTable" />
            <column name="has_graph_data"/>
            <column name="profile_name"/>
            <column name="species"/>
            <column name="graph_species"/>
            <sql>
            <![CDATA[
select distinct * from (
select gg.source_id,
       '@PROJECT_ID@' AS project_id,
       gg.profile_graph_id as graph_ids,
       gg.module,
       gg.mainopen,
       gg.dataopen,
       gg.display_name || gg.profile_graph_id as display_name,
       gg.description,
       gg.x_axis,
       gg.y_axis,
       gg.visible_parts,
       nvl(gg.attribution, gg.name) as attribution,
       gg.datatable,
       gg.profile_name,
       case when profile_graph_id is null then 0 else 1 end as has_graph_data, 
       gg.order_num,
       'N/A' as species, 'N/A' as graph_species
from (select distinct ca.source_id, d.name, -- ps.name as profile_name, 
p.source_id as profile_graph_id, pgd.*
          from apidb.pubchemCompound pcc, apidbtuning.compoundAttributes ca,  
                  apidbtuning.profilegraphdescrip pgd, apidb.ProfileSet ps, apidb.profile p, 
                  Sres.ExternalDatabaseRelease edr, Sres.ExternalDatabase d 
      where pgd.type = 'compound'
        and ps.external_database_release_id = edr.external_database_release_id
         and edr.external_database_id = d.external_database_id
         and p.profile_set_id = ps.profile_set_id
         and ps.name = pgd.profile_name
         and p.subject_row_id = pcc.pubchem_compound_id
         and pcc.compound_id = ca.compound_id
      ) gg
)
order by graph_ids asc
             ]]>
            </sql>
        </sqlQuery>

    </querySet>
</wdkModel>
