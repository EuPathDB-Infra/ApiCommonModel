<wdkModel>
  <querySet name="CompoundTables" queryType="table" isCacheable="false"  excludeProjects="EuPathDB">

      <defaultTestParamValues includeProjects="@PROJECT_ID@">
          <paramValue name="source_id">CID:93072</paramValue>
          <paramValue name="project_id">@PROJECT_ID@</paramValue>
      </defaultTestParamValues>

    <sqlQuery name="Properties">
            <column name="project_id"/>
            <column name="source_id"  />
            <column name="type"  />
            <column name="value"  />
           <sql>
            <![CDATA[
	       SELECT * FROM (
  	         SELECT '@PROJECT_ID@' AS project_id, ca.source_id, struct.type,
	            to_char(struct.structure) AS value 
	         FROM ApidbTuning.CompoundAttributes ca, chebi.structures struct
	         WHERE ca.id = struct.compound_id
	         AND struct.dimension = '1D'
	         UNION
	         SELECT '@PROJECT_ID@' AS project_id, ca.source_id, cd.type,
	           CASE WHEN cd.type='FORMULA' 
	           THEN REGEXP_REPLACE(cd.chemical_data,'(\d)','<sub>\1</sub>')
		   ELSE chemical_data END AS value
	         FROM ApidbTuning.CompoundAttributes ca, chebi.chemical_data cd
	         WHERE ca.id = cd.compound_id
	       ) ORDER BY type
            ]]>
            </sql>
    </sqlQuery>

    <sqlQuery name="IupacNames">
            <column name="project_id"/>
            <column name="source_id"  />
            <column name="value"  />
           <sql>
            <![CDATA[
              SELECT ca.source_id, '@PROJECT_ID@' AS project_id, n.name AS value
              FROM ApidbTuning.CompoundAttributes ca, chebi.names n
              WHERE ca.ID = n.compound_id
              AND n.type='IUPAC NAME'
              ORDER by lower(n.name)
            ]]>
            </sql>
    </sqlQuery>

    <sqlQuery name="Definition">
            <column name="project_id"/>
            <column name="source_id"  />
            <column name="definition"  />
           <sql>
            <![CDATA[
            SELECT  source_id, '@PROJECT_ID@' AS project_id, definition
	    FROM ApidbTuning.CompoundAttributes
            ]]>
            </sql>
    </sqlQuery>


    <sqlQuery name="SecondaryIds">
            <column name="project_id"/>
            <column name="source_id"  />
            <column name="secondary_ids"  />
           <sql>
            <![CDATA[
            SELECT  source_id, '@PROJECT_ID@' AS project_id, secondary_ids
	        FROM ApidbTuning.CompoundAttributes
            WHERE secondary_ids is not null
            ]]>
            </sql>
    </sqlQuery>

    <sqlQuery name="Synonyms">
            <column name="project_id"/>
            <column name="source_id"  />
            <column name="source"  />
            <column name="value"  />
           <sql>
            <![CDATA[
            SELECT DISTINCT p.chebi_accession AS source_id, 
	      '@PROJECT_ID@' AS project_id, d.source, d.name as value
	    FROM chebi.names d, chebi.compounds c, chebi.compounds p
	    WHERE p.status='C' 
	    AND d.type in ('SYNONYM', 'NAME')
	    AND NOT d.SOURCE ='ChEMBL'
	    AND ((d.compound_id = c.ID AND c.parent_id=p.ID)
	      OR (d.compound_id = p.ID AND p.parent_id IS NULL))
	    ORDER BY lower(d.name)
            ]]>
            </sql>
    </sqlQuery>

    <sqlQuery name="Structures">
            <column name="project_id"/>
            <column name="source_id" />
            <column name="struct_num" />
            <column name="structure" />
           <sql>
            <![CDATA[
            SELECT ca.SOURCE_ID,'@PROJECT_ID@' AS project_id
              , CASE WHEN ds.structure_id>0 THEN 0 ELSE rownum END AS struct_num
              , s.structure
            FROM ApidbTuning.compoundAttributes ca, chebi.structures s, chebi.default_structures ds
            WHERE ca.ID = s.COMPOUND_ID
            AND s.id = ds.STRUCTURE_ID (+)
            AND s.type='mol' and s.DIMENSION='2D' 
            ORDER BY ds.structure_id
            ]]>
            </sql>
    </sqlQuery>



    <sqlQuery name="CompoundsFromMetabolicPathways">
      <column name="source_id"/>
      <column name="project_id"/>
      <column name="pathway_source"/>
      <column name="reaction_source_id"/>
      <column name="reaction_url"/>
      <column name="enzyme"/>
      <column name="expasy_url"/>
      <column name="expasy_html"/>
      <column name="equation_html"/>
      <column name="substrates_text"/>
      <column name="products_text"/>
      <sql>
    <!--TODO use internal genes by ec number query when fixed-->
	    <![CDATA[
            select distinct '@PROJECT_ID@' as project_id
            , pc.CHEBI_ACCESSION as source_id
            , pa.PATHWAY_SOURCE
            , pr.REACTION_SOURCE_ID
            , pr.REACTION_URL
            , pr.EXPASY_HTML
            , pr.ENZYME
            , pr.EXPASY_URL
            , pr.EQUATION_HTML
            , pr.SUBSTRATES_TEXT
            , pr.PRODUCTS_TEXT
            from apidbtuning.pathwaycompounds pc
            , apidbtuning.pathwayreactions pr
            , apidbtuning.pathwayattributes pa
            where pc.reaction_id = pr.reaction_id
            and pc.PATHWAY_ID = pa.PATHWAY_ID
            and pc.EXT_DB_NAME = pr.EXT_DB_NAME
            and pc.EXT_DB_VERSION = pr.EXT_DB_VERSION
	    ]]>
	  </sql>
    </sqlQuery>

    <sqlQuery name="PathwaysFromCompounds">
        <column name="project_id"/>
        <column name="source_id"/>
        <column name="pathway_source_id"/>
        <column name="pathway_name"/>
        <column name="reactions"/>
        <column name="pathway_source"/>
        <sql>
            <![CDATA[
                select distinct
                project_id
                , source_id
                , pathway_source_id
                , pathway_name
                , listagg (reaction_source_id, ', ') within group (order by reaction_source_id) as reactions
                , pathway_source
                from (
                select distinct
                '@PROJECT_ID@' as project_id
                , pc.CHEBI_ACCESSION as source_id
                , pa.SOURCE_ID as pathway_source_id
                , pa.NAME as pathway_name
                , pa.PATHWAY_SOURCE
                , pr.REACTION_SOURCE_ID
                from
                apidbtuning.pathwaycompounds pc
                , apidbtuning.pathwayreactions pr
                , apidbtuning.pathwayattributes pa
                where pc.PATHWAY_ID = pa.PATHWAY_ID
                and pr.REACTION_ID = pc.REACTION_ID
                )
                where source_id is not null
                group by project_id, source_id, pathway_source_id, pathway_name, pathway_source
            ]]>
        </sql>
    </sqlQuery>

       


	<!--
    <sqlQuery name="RelatedCompounds">
      <column name="source_id"  />
      <column name="project_id"/>
      <column name="subst_id"/>
      <column name="type"/>
      <column name="related_id"/>
      <sql>
	SELECT ca.source_id, '@PROJECT_ID@' AS project_id,
                        s1.substance_id as subst_id, s2.type, s2.value as related_id
	  FROM  APIDB.pubchemsubstance s1,  APIDB.pubchemsubstance s2, ApidbTuning.CompoundAttributes ca
	 WHERE s1.substance_id = s2.substance_id
	   AND s1.property='CID' 
	   AND s1.type = 'standardized'
           AND s1.value = ca.compound_id
	   AND s2.property='CID'
	   AND not s1.value = s2.value
	    </sql>
        </sqlQuery>
-->
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Mass Spec (Metabolite)  Graphs -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="MassSpecGraphs" >
            <column name="source_id" />
            <column name="project_id" />
            <column name="graph_ids" />
            <column name="module" />
            <column name="species"/>
            <column name="mainOpen" />
            <column name="dataOpen" />
            <column name="display_name" />
            <column name="description" />
            <column name="x_axis" />
            <column name="y_axis" />
            <column name="visible_parts" />
            <column name="has_graph_data"/>
	    <column name="has_meta_data"/>
            <column name="dataset_name"/>
            <column name="is_graph_custom"/>

            <sql>
            <![CDATA[
select distinct * from (
select gg.source_id,
       '@PROJECT_ID@' AS project_id,
       gg.profile_graph_id as graph_ids,
       gg.module,
       'TRUE' as mainOpen,
       'FALSE' as dataOpen,
       gg.display_name || gg.profile_graph_id as display_name,
       gg.description,
       gg.name as dataset_name,
      gg.is_graph_custom,
       gg.x_axis,
       gg.y_axis,
       gg.visible_parts,
       case when profile_graph_id is null then 0 else 1 end as has_graph_data, 
       'FALSE' has_meta_data,
       gg.order_num,
       'N/A' as species
from (select distinct ca.source_id, d.name, ps.name as profile_name, 
p.source_id as profile_graph_id, pgd.*
          from apidb.pubchemCompound pcc, apidbtuning.compoundAttributes ca,  
                  apidb.ProfileSet ps, apidb.profile p, 
                  Sres.ExternalDatabaseRelease edr, Sres.ExternalDatabase d ,
 (select '' as dataset,
       '' as display_name,
       '' as description,
       '' as module,
       '' as x_axis,
       '' as y_axis,
       '' as visible_parts,
       '' as is_graph_custom,
       0 as order_num
       from dual
      -- TEMPLATE_ANCHOR compoundPageGraphDescriptions
) pgd 
      where ps.external_database_release_id = edr.external_database_release_id
         and edr.external_database_id = d.external_database_id
         and p.profile_set_id = ps.profile_set_id
         and d.name = pgd.dataset
         and p.subject_row_id = pcc.pubchem_compound_id
         and pcc.compound_id = ca.compound_id
      ) gg
)
order by graph_ids asc
             ]]>
            </sql>
        </sqlQuery>

    </querySet>
</wdkModel>
