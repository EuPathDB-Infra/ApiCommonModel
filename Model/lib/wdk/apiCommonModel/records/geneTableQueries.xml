
<wdkModel>

<!-- notes

  - so far this is only a unification of p and t.  crypto seemed pretty different

  - the pathways query is diff between t and p, but shouldn't be.  one is wrong.

--> 


  <querySet name="GeneTables" queryType="table" isCacheable="false">

            <defaultTestParamValues includeProjects="PlasmoDB">
               <paramValue name="source_id">%%defaultGene%%</paramValue>
               <paramValue name="project_id">PlasmoDB</paramValue>
            </defaultTestParamValues>

            <defaultTestParamValues includeProjects="ToxoDB">
               <paramValue name="source_id">TGME49_221330</paramValue> 
               <paramValue name="project_id">ToxoDB</paramValue>
            </defaultTestParamValues>

            <defaultTestParamValues includeProjects="CryptoDB">
               <paramValue name="source_id">cgd3_1400</paramValue>
               <paramValue name="project_id">CryptoDB</paramValue>
            </defaultTestParamValues>
            <defaultTestParamValues includeProjects="GiardiaDB">
               <paramValue name="source_id">GL50803_112048</paramValue>
               <paramValue name="project_id">GiardiaDB</paramValue>
            </defaultTestParamValues>

            <defaultTestParamValues includeProjects="TrichDB">
               <paramValue name="source_id">TVAG_386080</paramValue>
               <paramValue name="project_id">TrichDB</paramValue>
            </defaultTestParamValues>

            <defaultTestParamValues includeProjects="TriTrypDB">
               <paramValue name="source_id">%%defaultGene%%</paramValue>
               <paramValue name="project_id">TriTrypDB</paramValue>
            </defaultTestParamValues>

            <defaultTestParamValues includeProjects="AmoebaDB">
               <paramValue name="source_id">EDI_244000</paramValue>
               <paramValue name="project_id">AmoebaDB</paramValue>
            </defaultTestParamValues>

            <defaultTestParamValues includeProjects="MicrosporidiaDB">
               <paramValue name="source_id">ECU07_1760</paramValue>
               <paramValue name="project_id">MicrosporidiaDB</paramValue>
            </defaultTestParamValues>

            <defaultTestParamValues includeProjects="PiroplasmaDB">
               <paramValue name="source_id">BBOV_IV003850</paramValue>
               <paramValue name="project_id">PiroplasmaDB</paramValue>
            </defaultTestParamValues>

            <defaultTestParamValues includeProjects="HostDB">
               <paramValue name="source_id">%%defaultGene%%</paramValue>
               <paramValue name="project_id">HostDB</paramValue>
            </defaultTestParamValues>

            <defaultTestParamValues includeProjects="FungiDB,SchistoDB,InitDB">
               <paramValue name="source_id"></paramValue>
               <paramValue name="project_id"></paramValue>
            </defaultTestParamValues>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Gene Transcripts -->
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <sqlQuery name="GeneTranscripts">
         <column name="source_id"/>
         <column name="project_id"/>
         <column name="transcript_id"/>
         <column name="exon_count"/>
         <column name="length"/>
         <column name="protein_length"/>
         <sql>
         <!-- transcripts must be ordered alphabetically, as expected by client -->
         <![CDATA[
select gene_source_id as source_id
     , source_id as transcript_id
     , project_id as project_id
     , exon_count
     , length
     , protein_length
     --, so_term_name
     --, transcript_product
from apidbtuning.transcriptattributes 
order by source_id
         ]]>
         </sql>
       </sqlQuery>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Gene Model -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <!-- this query is used by gene dump -->

       <sqlQuery name="GeneModelDump" isCacheable="false">
            <column name="source_id"/>
            <column name="transcript_ids"/>
            <column name="project_id"/>
            <column name="type"/>
            <column name="sequence_id"/>
            <column name="gm_start"/>
            <column name="gm_end"/>
            <column name="is_reversed"/>
            <sql>
            <![CDATA[
 select source_id, '@PROJECT_ID@' as project_id, sequence_id, gm_start,gm_end, type, is_reversed, transcript_ids
 from ApidbTuning.GeneModelDump
 order by case when is_reversed = 1 then -1 * gm_start else gm_start end
           ]]>
<!--
September, 2016:
Temporarily replaced by above query against the GeneModelDump tuning table.
This can be put back after pending improvements to WDK paging.

            <![CDATA[
 select source_id, project_id, sequence_id, gm_start,gm_end, type, is_reversed,
  listagg(transcript_id, ', ') within GROUP(ORDER BY transcript_id) AS transcript_ids
 from ( select ta.source_id as transcript_id, ta.gene_source_id as source_id, '@PROJECT_ID@' as project_id,
                ta.sequence_id,gm.start_min as gm_start, gm.end_max as gm_end,
                gm.type, gl.is_reversed
         from /*dots.GeneFeature gf, */ApidbTuning.FeatureLocation gl, dots.NaSequence s,
              apidbtuning.TranscriptAttributes ta,
              (select  decode(el.feature_type,'ExonFeature','Exon',el.feature_type) as type, el.parent_id as na_feature_id,
                       el.start_min as start_min , el.end_max as end_max
               from ApidbTuning.FeatureLocation el
               where el.feature_type in  ('ExonFeature','UTR','CDS','Intron')
               and el.is_top_level = 1
            
              ) gm
         where gm.na_feature_id = ta.na_feature_id
         and s.na_sequence_id = gl.na_sequence_id
         and ta.na_feature_id = gl.na_feature_id
         and gl.is_top_level = 1
         and ta.gene_type = 'protein coding'
         UNION ALL
         (select ta.source_id as transcript_id, ta.gene_source_id as source_id, '@PROJECT_ID@' as project_id,
                ta.sequence_id,gm.start_min as gm_start, gm.end_max as gm_end,
                gm.type, gl.is_reversed
         from dots.GeneFeature gf, ApidbTuning.FeatureLocation gl, dots.NaSequence s,
              apidbtuning.TranscriptAttributes ta,
              (select  decode(el.feature_type,'ExonFeature','Exon',el.feature_type) as type, el.parent_id as na_feature_id,
                       el.start_min as start_min , el.end_max as end_max
               from ApidbTuning.FeatureLocation el
               where el.feature_type in  ('ExonFeature','UTR','CDS','Intron')
               and el.is_top_level = 1
              union ALL      
               select 'Intron' as type, left.parent_id as na_feature_id,
                      leftLoc.end_max + 1  as start_min, rightLoc.start_min - 1 as end_max
               from dots.ExonFeature left, ApidbTuning.FeatureLocation leftLoc,
                    dots.ExonFeature right, ApidbTuning.FeatureLocation rightLoc
               where left.parent_id = right.parent_id
                 and (left.order_number = right.order_number - 1
                      or left.order_number = right.order_number + 1)
                 and leftLoc.start_min < rightLoc.start_min
                 and left.na_feature_id = leftLoc.na_feature_id
                 and leftLoc.is_top_level = 1
                 and right.na_feature_id = rightLoc.na_feature_id
                 and rightLoc.is_top_level = 1 ) gm
         where gm.na_feature_id = gf.na_feature_id
         and s.na_sequence_id = gl.na_sequence_id
         and gf.na_feature_id = gl.na_feature_id
         and gl.is_top_level = 1
         and  gf.source_id = ta.gene_source_id 
         and ta.gene_type != 'protein coding')
         )
         group by source_id, project_id, sequence_id,
                 gm_start,  gm_end,
                type, is_reversed
         order by case when is_reversed = 1 then -1 * gm_start else gm_start end
            ]]>
-->
            </sql>
        </sqlQuery>

<!-- TODO:  need to check what happened to this table.  Should be like transcriptgenomicsequencesplit
       <sqlQuery name="GeneModelSequence" isCacheable="false" excludeProjects="EuPathDB">
            <testParamValues includeProjects="MicrosporidiaDB">
               <paramValue name="source_id">EBI_27499</paramValue>
               <paramValue name="project_id">MicrosporidiaDB</paramValue>
            </testParamValues>

            <column name="source_id"/>
            <column name="gene_source_id"/>
            <column name="project_id"/>
            <column name="sequence"/>
            <sql>
                select source_id, '@PROJECT_ID@' AS project_id,
                   gene_genomic_sequence as sequence
                FROM apidb.GENEGENOMICSEQUENCE_SPLIT
                order by start_min
            </sql>
        </sqlQuery>
-->
        <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
        <!-- Tables for protein attributes  -->  
        <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->


       <sqlQuery name="ECNumbers" isCacheable="false" >
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="transcript_ids"/>
            <column name="ec_number"/>
            <column name="ec_description"/>
            <column name="ec_source"/>
            <column name="expasy_url"/>

            <sql>
            <![CDATA[
SELECT
  ta.gene_source_id AS source_id
, ta.project_id
, listagg(ta.source_id, ', ') within GROUP(ORDER BY ta.source_id) AS transcript_ids
, ec.ec_number
, ec.description AS ec_description
, DECODE(asec.evidence_code, 'OrthoMCLDerived', 'inferred from OrthoMCL', 'gb', 'GenBank', 'Hagai', 'MPMP', evidence_code) AS ec_source
,                    'http://enzyme.expasy.org/cgi-bin/enzyme/enzyme-search-ec?field1='
                   ||ec.ec_number_1
                   || decode(ec.ec_number_2, null, null,
                             chr(38) || 'field2='||ec.ec_number_2)
                   || decode(ec.ec_number_3, null, null,
                             chr(38) || 'field3='||ec.ec_number_3)
                   || decode(ec.ec_number_4, null, null,
                             chr(38) || 'field4='||ec.ec_number_4)
                   as expasy_url

FROM
  apidbtuning.transcriptattributes ta
, sres.enzymeclass ec
, dots.aasequenceenzymeclass asec
WHERE
  ta.aa_sequence_id = asec.aa_sequence_id
  AND asec.enzyme_class_id = ec.enzyme_class_id
group by
  ta.gene_source_id
, ta.project_id
, ec.ec_number
, ec.description
, asec.evidence_code
, ec.ec_number_1
, ec.ec_number_2
, ec.ec_number_3
, ec.ec_number_4
         ]]>
            </sql>
        </sqlQuery>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- GO terms -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="GOTerms" isCacheable="false" >
            <column name="source_id"/>
            <column name="transcript_ids"/>
            <column name="project_id"/>
            <column name="go_id"/>
            <column name="go_term_name"/>
            <column name="ontology"/>
            <column name="is_not"/>
            <column name="source"/>
            <column name="evidence_code"/>
            <column name="reference"/>
	    <column name="evidence_code_parameter"/>
	    <sql>
            <![CDATA[
SELECT
  gs.gene_source_id AS source_id
, '@PROJECT_ID@' as project_id
, listagg(gs.transcript_source_id, ', ') within GROUP(ORDER BY gs.transcript_source_id) AS transcript_ids
, gs.go_id
, gs.go_term_name
, gs.ontology
, NVL(gs.is_not, 'N/A') AS is_not
, gs.source
, gs.evidence_code
, case when gs.reference like 'PMID:%' then '<a href="http://www.ncbi.nlm.nih.gov/pubmed/?term='||REPLACE ( gs.reference , 'PMID:','')||'">'||gs.reference||'</a>' when gs.reference like 'GO_REF:%' then '<a href="http://www.geneontology.org/cgi-bin/references.cgi#GO_REF:'||REPLACE ( gs.reference , 'GO_REF:','')||'">'||gs.reference||'</a>'
else gs.reference end as reference
, gs.evidence_code_parameter
FROM
  ApidbTuning.GeneGoTerms gs
GROUP BY
  gs.go_id
, gs.gene_source_id
, gs.go_term_name
, gs.ontology
, gs.is_not
, gs.source
, gs.evidence_code
, gs.reference
, gs.evidence_code_parameter
ORDER BY
  transcript_ids
, gs.ontology
         ]]>
            </sql>
        </sqlQuery>


       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Expression Graphs -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="ExpressionGraphs" includeProjects="TriTrypDB,GiardiaDB,AmoebaDB,ToxoDB,PlasmoDB,FungiDB,PiroplasmaDB,CryptoDB,MicrosporidiaDB,HostDB">
            <column name="source_id" />
            <column name="project_id" />
            <column name="graph_ids" />
            <column name="default_graph_id" />
            <column name="module" />
            <column name="genus_species" />
            <column name="mainOpen" />
            <column name="dataOpen" />
            <column name="display_name" />
            <column name="description" />
            <column name="x_axis" />
            <column name="y_axis" />
            <column name="has_graph_data"/>
	    <column name="has_meta_data"/>
	    <column name="meta_data_categories"/>
            <column name="dataset_name"/>
            <column name="dataset_id"/>
            <column name="is_graph_custom"/>
            <column name="summary"/>
            <column name="short_attribution"/>
            <column name="assay_type"/>
            <column name="template"/>
            <sql>
            <![CDATA[
select g.*, decode(lower(is_graph_custom), 'false', 1, 0) as template, regexp_substr(graph_ids, '[^,]*') as default_graph_id
from (
select ga.source_id, ga.project_id, ga.organism as gene_organism, ga.genus_species ,
             graph_descrip.dataset as dataset_name, psgene.profile_graph_id as graph_ids,
             case when psgene.profile_graph_id is null then 0 else 1 end as has_graph_data,
             tn.name as graph_organism, 'TRUE' as mainOpen, 'FALSE' as dataOpen,
             'FALSE' has_meta_data, '' as meta_data_categories,
             graph_descrip.*, dp.summary, dp.short_attribution, dp.display_name, dp.description, decode(dp.subtype, 'rnaseq', 'RNA-seq', 'array', 'array', '') as assay_type, dp.dataset_presenter_id as dataset_id
      from apidbtuning.geneattributes ga, 
           APIDBTUNING.datasetnametaxon dsnt, 
           apidbtuning.datasetPresenter dp,
           sres.taxonname tn, 
           apidbtuning.taxonspecies ts, 
           sres.taxonname sn,
           apidbtuning.geneGroupProfile psgene,
           (  select '' as dataset, '' as module,
                     '' as x_axis, '' y_axis,  '' as is_graph_custom,
                     1 as order_num
              from dual
      -- TEMPLATE_ANCHOR genePageGraphDescriptions
      -- TEMPLATE_ANCHOR microarrayGraphDescriptions
           ) graph_descrip
        where ga.source_id = psgene.source_id
          and psgene.dataset_name = dsnt.name
          and dsnt.dataset_presenter_id = dp.dataset_presenter_id
          and graph_descrip.dataset = dp.name
          and dsnt.taxon_id = tn.taxon_id
          and tn.name_class = 'scientific name'
          and dsnt.taxon_id = ts.taxon_id
          and ts.species_taxon_id = sn.taxon_id
          and sn.name_class = 'scientific name'
          and ga.genus_species = sn.name
          and (dp.type = 'transcript_expression' or dp.subtype = 'SAGE')
) g
            ]]>
            </sql>
        </sqlQuery>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Protein Expression Graphs -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="ProteinExpressionGraphs" includeProjects="PlasmoDB,TriTrypDB,ToxoDB,HostDB">
            <testParamValues includeProjects="ToxoDB">
               <paramValue name="source_id">TGME49_229990</paramValue>
            </testParamValues>

            <column name="source_id" />
            <column name="project_id" />
            <column name="graph_ids" />
            <column name="default_graph_id" />
            <column name="module" />
            <column name="genus_species" />
            <column name="mainOpen" />
            <column name="dataOpen" />
            <column name="display_name" />
            <column name="description" />
            <column name="x_axis" />
            <column name="y_axis" />
            <column name="has_graph_data"/>
	    <column name="has_meta_data"/>
	    <column name="meta_data_categories"/>
            <column name="dataset_name"/>
            <column name="dataset_id"/>
            <column name="is_graph_custom"/>
            <column name="summary"/>
            <column name="short_attribution"/>
            <column name="assay_type"/>
            <column name="template"/>
            <sql>
            <![CDATA[

select g.*, decode(lower(is_graph_custom), 'false', 1, 0) as template, regexp_substr(graph_ids, '[^,]*') as default_graph_id
from (
select ga.source_id, ga.project_id, ga.organism as gene_organism, ga.genus_species ,
             graph_descrip.dataset as dataset_name, psgene.profile_graph_id as graph_ids,
             case when psgene.profile_graph_id is null then 0 else 1 end as has_graph_data,
             tn.name as graph_organism, 'TRUE' as mainOpen, 'FALSE' as dataOpen,
             'FALSE' has_meta_data, '' as meta_data_categories,
             graph_descrip.*, dp.summary, dp.short_attribution, dp.display_name, dp.description, 'quantitative proteomics' as assay_type, dp.dataset_presenter_id as dataset_id
      from apidbtuning.geneattributes ga, 
           APIDBTUNING.datasetnametaxon dsnt, 
           apidbtuning.datasetPresenter dp,
           sres.taxonname tn, 
           apidbtuning.taxonspecies ts, 
           sres.taxonname sn,
           apidbtuning.geneGroupProfile psgene,
           (  select '' as dataset, '' as module,
                     '' as x_axis, '' y_axis,  '' as is_graph_custom,
                     1 as order_num
              from dual
       -- TEMPLATE_ANCHOR proteomicsGraphDescriptions
           ) graph_descrip
        where ga.source_id = psgene.source_id
          and psgene.dataset_name = dsnt.name
          and dsnt.dataset_presenter_id = dp.dataset_presenter_id
          and graph_descrip.dataset = dp.name
          and dsnt.taxon_id = tn.taxon_id
          and tn.name_class = 'scientific name'
          and dsnt.taxon_id = ts.taxon_id
          and ts.species_taxon_id = sn.taxon_id
          and sn.name_class = 'scientific name'
          and ga.genus_species = sn.name
          and dp.type = 'protein_expression'
) g
             ]]>
            </sql>
        </sqlQuery>



       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Phenotype Graphs -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="PhenotypeGraphs" includeProjects="TriTrypDB">
            <column name="source_id" />
            <column name="project_id" />
            <column name="graph_ids" />
            <column name="default_graph_id" />
            <column name="module" />
            <column name="species" />
            <column name="mainOpen" />
            <column name="dataOpen" />
            <column name="display_name" />
            <column name="description" />
            <column name="x_axis" />
            <column name="y_axis" />
            <column name="has_graph_data"/>
	    <column name="has_meta_data"/>
	    <column name="meta_data_categories"/>
            <column name="dataset_name"/>
            <column name="dataset_id"/>
            <column name="is_graph_custom"/>
            <column name="summary"/>
            <column name="short_attribution"/>
            <column name="assay_type"/>
            <column name="template"/>
            <sql>
            <![CDATA[
select g.*, decode(lower(is_graph_custom), 'false', 1, 0) as template, regexp_substr(graph_ids, '[^,]*') as default_graph_id
from (
select ga.source_id, ga.project_id, ga.organism as gene_organism, ga.genus_species ,
             graph_descrip.dataset as dataset_name, psgene.profile_graph_id as graph_ids,
             case when psgene.profile_graph_id is null then 0 else 1 end as has_graph_data,
             tn.name as graph_organism, 'TRUE' as mainOpen, 'FALSE' as dataOpen,
             'FALSE' has_meta_data, '' as meta_data_categories,
             graph_descrip.*, dp.summary, dp.short_attribution, dp.display_name, dp.description, 'RNA-seq' as assay_type, dp.dataset_presenter_id as dataset_id
      from apidbtuning.geneattributes ga, 
           APIDBTUNING.datasetnametaxon dsnt, 
           apidbtuning.datasetPresenter dp,
           sres.taxonname tn, 
           apidbtuning.taxonspecies ts, 
           sres.taxonname sn,
           apidbtuning.geneGroupProfile psgene,
           (        select 'tbruTREU927_RNAi_Horn_*rnaSeq_RSRC' as dataset,
       'RNASeq' as module,
       'Stage/Sample' as x_axis,
       'Transcript levels of fragments per kilobase of exon model per million mapped reads (FPKM). Stacked bars indicate unique and non-uniquely mapped sequences. Non-Unique sequences are plotted to indicate the maximum expression potential of this gene. ' y_axis,
       'false' as is_graph_custom,
       1 as order_num
       from dual
           ) graph_descrip
        where ga.source_id = psgene.source_id
          and psgene.dataset_name = dsnt.name
          and dsnt.dataset_presenter_id = dp.dataset_presenter_id
          and graph_descrip.dataset = dp.name
          and dsnt.taxon_id = tn.taxon_id
          and tn.name_class = 'scientific name'
          and dsnt.taxon_id = ts.taxon_id
          and ts.species_taxon_id = sn.taxon_id
          and sn.name_class = 'scientific name'
          and dsnt.name not like '%CDS%' -- TODO:  this is here for the horn dataset
          and ga.genus_species = sn.name
) g
             ]]>
            </sql>
        </sqlQuery>


       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Host Response  Graphs -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="HostResponseGraphs" includeProjects="PlasmoDB">
            <column name="source_id" />
            <column name="project_id" />
            <column name="graph_ids" />
            <column name="default_graph_id" />
            <column name="module" />
            <column name="genus_species" />
            <column name="mainOpen" />
            <column name="dataOpen" />
            <column name="display_name" />
            <column name="description" />
            <column name="x_axis" />
            <column name="y_axis" />
            <column name="has_graph_data"/>
	    <column name="has_meta_data"/>
	    <column name="meta_data_categories"/>
            <column name="dataset_name"/>
            <column name="dataset_id"/>
            <column name="is_graph_custom"/>
            <column name="summary"/>
            <column name="short_attribution"/>
            <column name="assay_type"/>
            <column name="template"/>
            <sql>

<![CDATA[ 
select g.*, decode(lower(is_graph_custom), 'false', 1, 0) as template, regexp_substr(graph_ids, '[^,]*') as default_graph_id
from (
select ga.source_id, ga.project_id, ga.organism as gene_organism, ga.genus_species ,
             graph_descrip.dataset as dataset_name, psgene.profile_graph_id as graph_ids,
             case when psgene.profile_graph_id is null then 0 else 1 end as has_graph_data,
             tn.name as graph_organism, 'TRUE' as mainOpen, 'FALSE' as dataOpen,
             'FALSE' has_meta_data, '' as meta_data_categories,
             graph_descrip.*, dp.summary, dp.short_attribution, dp.display_name, dp.description, 'antibody microarray' as assay_type, dp.dataset_presenter_id as dataset_id
      from apidbtuning.geneattributes ga, 
           APIDBTUNING.datasetnametaxon dsnt, 
           apidbtuning.datasetPresenter dp,
           sres.taxonname tn, 
           apidbtuning.taxonspecies ts, 
           sres.taxonname sn,
           apidbtuning.geneGroupProfile psgene,
           (  select '' as dataset, '' as module,
                     '' as x_axis, '' y_axis,  '' as is_graph_custom,
                     1 as order_num
              from dual
      -- TEMPLATE_ANCHOR antibodyArrayGraphDescriptions
           ) graph_descrip
        where ga.source_id = psgene.source_id
          and psgene.dataset_name = dsnt.name
          and dsnt.dataset_presenter_id = dp.dataset_presenter_id
          and graph_descrip.dataset = dp.name
          and dsnt.taxon_id = tn.taxon_id
          and tn.name_class = 'scientific name'
          and dsnt.taxon_id = ts.taxon_id
          and ts.species_taxon_id = sn.taxon_id
          and sn.name_class = 'scientific name'
          and ga.genus_species = sn.name
          and dp.subtype = 'immune_response'
) g
 ]]>
     
       </sql>

        </sqlQuery>



       <sqlQuery name="CrisprPhenotypeGraphs" includeProjects="ToxoDB">
            <column name="source_id" />
            <column name="project_id" />
            <column name="graph_ids" />
            <column name="default_graph_id" />
            <column name="module" />
            <column name="species" />
            <column name="mainOpen" />
            <column name="dataOpen" />
            <column name="display_name" />
            <column name="description" />
            <column name="x_axis" />
            <column name="y_axis" />
            <column name="has_graph_data"/>
	    <column name="has_meta_data"/>
	    <column name="meta_data_categories"/>
            <column name="dataset_name"/>
            <column name="dataset_id"/>
            <column name="is_graph_custom"/>
            <column name="summary"/>
            <column name="short_attribution"/>
            <column name="assay_type"/>
            <column name="template"/>
            <sql>

<![CDATA[ 
select g.*, decode(lower(is_graph_custom), 'false', 1, 0) as template, regexp_substr(graph_ids, '[^,]*') as default_graph_id
from (
select ga.source_id, ga.project_id, ga.organism as gene_organism, ga.genus_species ,
             graph_descrip.dataset as dataset_name, psgene.profile_graph_id as graph_ids,
             case when psgene.profile_graph_id is null then 0 else 1 end as has_graph_data,
             tn.name as graph_organism, 'TRUE' as mainOpen, 'FALSE' as dataOpen,
             'FALSE' has_meta_data, '' as meta_data_categories,
             graph_descrip.*, dp.summary, dp.short_attribution, dp.display_name, dp.description, 'CRISPR' as assay_type, dp.dataset_presenter_id as dataset_id
      from apidbtuning.geneattributes ga, 
           APIDBTUNING.datasetnametaxon dsnt, 
           apidbtuning.datasetPresenter dp,
           sres.taxonname tn, 
           apidbtuning.taxonspecies ts, 
           sres.taxonname sn,
           apidbtuning.geneGroupProfile psgene,
           (  select 'tgonGT1_crisprPhenotype_CrisprScreen_RSRC' as dataset, 'Lourido::Crispr' as module,
                     'Genes ranked by phenotype score' as x_axis, 'log2(gRNA of infected cultures / gRNA composition of original library)' y_axis,  '1' as is_graph_custom,
                     1 as order_num
              from dual
           ) graph_descrip
        where ga.source_id = psgene.source_id
          and psgene.dataset_name = dsnt.name
          and dsnt.dataset_presenter_id = dp.dataset_presenter_id
          and graph_descrip.dataset = dp.name
          and dsnt.taxon_id = tn.taxon_id
          and tn.name_class = 'scientific name'
          and dsnt.taxon_id = ts.taxon_id
          and ts.species_taxon_id = sn.taxon_id
          and sn.name_class = 'scientific name'
          and ga.genus_species = sn.name
          and dp.type = 'phenotype'
) g
 ]]>
     
       </sql>

        </sqlQuery>

       <sqlQuery name="eQTLPhenotypeGraphs" includeProjects="PlasmoDB">
            <column name="source_id" />
            <column name="project_id" />
            <column name="graph_ids" />
            <column name="default_graph_id" />
            <column name="module" />
            <column name="genus_species" />
            <column name="mainOpen" />
            <column name="dataOpen" />
            <column name="display_name" />
            <column name="description" />
            <column name="x_axis" />
            <column name="y_axis" />
            <column name="has_graph_data"/>
	    <column name="has_meta_data"/>
	    <column name="meta_data_categories"/>
            <column name="dataset_name"/>
            <column name="dataset_id"/>
            <column name="is_graph_custom"/>
            <column name="summary"/>
            <column name="short_attribution"/>
            <column name="assay_type"/>
            <column name="template"/>
            <sql>

<![CDATA[ 
select g.*, decode(lower(is_graph_custom), 'false', 1, 0) as template, regexp_substr(graph_ids, '[^,]*') as default_graph_id
from (
select ga.source_id, ga.project_id, ga.organism as gene_organism, ga.genus_species ,
             graph_descrip.dataset as dataset_name, psgene.profile_graph_id as graph_ids,
             case when psgene.profile_graph_id is null then 0 else 1 end as has_graph_data,
             tn.name as graph_organism, 'TRUE' as mainOpen, 'FALSE' as dataOpen,
             'FALSE' has_meta_data, '' as meta_data_categories,
             graph_descrip.*, dp.summary, dp.short_attribution, dp.display_name, dp.description, dp.subtype as assay_type, dp.dataset_presenter_id as dataset_id
      from apidbtuning.geneattributes ga, 
           APIDBTUNING.datasetnametaxon dsnt,
           apidbtuning.datasetPresenter dp,
           sres.taxonname tn, 
           apidbtuning.taxonspecies ts, 
           sres.taxonname sn,
           apidbtuning.geneGroupProfile psgene,
            (  select '' as dataset, '' as module,
                     '' as x_axis, '' y_axis,  '' as is_graph_custom,
                     1 as order_num
              from dual
      -- TEMPLATE_ANCHOR phenotypeGraphDescriptions
           ) graph_descrip
        where ga.source_id = psgene.source_id
          and psgene.dataset_name = dsnt.name
          and dsnt.dataset_presenter_id = dp.dataset_presenter_id
          and graph_descrip.dataset = dp.name
          and dsnt.taxon_id = tn.taxon_id
          and tn.name_class = 'scientific name'
          and dsnt.taxon_id = ts.taxon_id
          and ts.species_taxon_id = sn.taxon_id
          and sn.name_class = 'scientific name'
          and ga.genus_species = sn.name
          and dp.type = 'transcript_expression'
          and dp.subtype = 'array'
) g
 ]]>
     
       </sql>

        </sqlQuery>













       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Aliases -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->


<!--
       <sqlQuery name="Aliases" isCacheable="false" includeProjects="PlasmoDB,EuPathDB,TriTrypDB">
            <column name="source_id"/>
            <column name="gene_source_id"/>
            <column name="project_id"/>
            <column name="alias"/>
            <sql>
            SELECT distinct gf.source_id, '@PROJECT_ID@' AS project_id,
                   replace(ng.name, ';current=false','') AS alias
            FROM dots.GeneFeature gf, dots.NaFeatureNaGene nfng, dots.NaGene ng
            WHERE gf.na_feature_id = nfng.na_feature_id
              AND nfng.na_gene_id = ng.na_gene_id
            </sql>
        </sqlQuery>

-->

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Phenotype -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

 <sqlQuery name="PhenotypeTable" isCacheable="false" includeProjects="TriTrypDB,EuPathDB,FungiDB">
            <column name="source_id"/>
<!--            <column name="gene_source_id"/>-->
            <column name="project_id"/>
            <column name="pubmed_id"/>
            <column name="modification_type"/>
<!--            <column name="experiment_type"/>-->
            <column name="allele"/>
<!--            <column name="is_successful"/>-->
            <column name="phenotype"/>
<!--            <column name="phenotype_entity_term_id"/>-->
<!--            <column name="timing"/>-->
<!--            <column name="life_cycle_stage_term_id"/>-->
<!--            <column name="phenotype_post_composition"/> -->
            <column name="phenotype_comment"/>
            <column name="chebi_annotation_extension"/>
<!--            <column name="evidence_term_id"/>-->
            <column name="protein_annotation_extension"/>
            <sql>
    select distinct ga.source_id
              , ga.project_id
              , pm.PUBMED_ID
              , pm.MODIFICATION_TYPE
              , pm.ALLELE
              , case when oen.name is null then CAST (pr.phenotype_post_composition AS VARCHAR2(4000)) 
              else opq.name ||' '||CASE WHEN opq.name = 'lethal' THEN '' ELSE oen.name||' ' END||pr.Timing||' '||ols.name end as phenotype
              , pr.PHENOTYPE_COMMENT
              , pr.CHEBI_ANNOTATION_EXTENSION
              , pr.PROTEIN_ANNOTATION_EXTENSION
              from
              apidbtuning.geneattributes ga
              , APIDB.PHENOTYPEMODEL pm
              , apidb.phenotyperesult pr
              , sres.ontologyterm oen
              , sres.ontologyterm opq
              , sres.ontologyterm ols
              where ga.na_feature_id = pm.na_feature_id
              and pm.phenotype_model_id = pr.phenotype_model_id
              and pr.PHENOTYPE_ENTITY_TERM_ID = oen.ontology_term_id (+)
              and pr.phenotype_quality_term_id = opq.ontology_term_id (+)
              and pr.LIFE_CYCLE_STAGE_TERM_ID = ols.ONTOLOGY_TERM_ID (+)
        </sql>
 </sqlQuery>

       <sqlQuery name="RodMalPhenotypeTable" isCacheable="false" includeProjects="PlasmoDB">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="rmgmid"/>
            <column name="suc_of_gen_mod"/>
            <column name="pubmed_id"/>
            <column name="mod_type"/>
            <column name="life_cycle_stage"/>
            <column name="phenotype"/>
	    <column name="mutation_description"/>
            <sql>
            <![CDATA[
SELECT
  ga.source_id
, ga.project_id
, pm.source_id AS rmgmid
, pm.pubmed_id
, pm.modification_type as mod_type
, pm.is_successful as suc_of_gen_mod
, apidb.tab_to_string(
  SET(CAST(collect(DISTINCT ot.name) AS apidb.varchartab)), ',') AS life_cycle_stage
, concat(to_clob(DBMS_LOB.SUBSTR(pr.phenotype_post_composition, 4000, 1)), DBMS_LOB.SUBSTR(pr.phenotype_post_composition, 4000, 4001)) AS phenotype
, pm.mutation_description
FROM
  apidb.phenotyperesult pr
, apidb.phenotypemodel pm
, apidbtuning.geneattributes ga
, sres.ontologyterm ot
WHERE
  pm.phenotype_model_id = pr.phenotype_model_id
  AND pm.na_feature_id = ga.na_feature_id
  AND pr.life_cycle_stage_term_id = ot.ontology_term_id
GROUP BY
  ga.source_id
, ga.project_id
, pm.source_id
, pm.pubmed_id
, pm.modification_type
, pm.is_successful
, dbms_lob.substr(pr.phenotype_post_composition, 4000, 1)
, dbms_lob.substr(pr.phenotype_post_composition, 4000, 4001)
, pm.mutation_description
ORDER BY
  pm.source_id
, life_cycle_stage 
            ]]>
            </sql>
        </sqlQuery>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- HTS SNPs Alignment -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

        <sqlQuery name="HtsSNPsAlignment" includeProjects="PiroplasmaDB,GiardiaDB,AmoebaDB,PlasmoDB,ToxoDB,CryptoDB,TriTrypDB,FungiDB"
               isCacheable="false">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="strain"/>
            <sql>
            <![CDATA[
SELECT distinct ga.source_id, ga.project_id, scs.strain
FROM   apidbtuning.snpChipStrains scs, 
       apidbtuning.geneattributes ga
WHERE  scs.organism = ga.organism
ORDER BY scs.strain
            ]]>
            </sql>
        </sqlQuery>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Mercator Alignment                                           -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

        <sqlQuery name="MercatorAlignment" isCacheable="false">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="abbrev"/>
            <column name="organism"/>
            <sql>
            <![CDATA[
SELECT ga.source_id, '@PROJECT_ID@' as project_id, a.organism, a.abbrev
FROM
(
SELECT distinct ga.organism, o.abbrev
FROM APIDBTUNING.geneAttributes ga, 
     APIDBTUNING.GenomicSeqAttributes sa, 
     APIDB.organism o, 
     SRES.ontologyTerm so
WHERE o.taxon_id = ga.taxon_id 
  AND ga.na_sequence_id = sa.na_sequence_id
  AND sa.so_id = so.source_id
  AND so.name not in ('mitochondrial_chromosome','apicoplast_chromosome')
) a, apidbtuning.geneAttributes ga
ORDER BY a.organism
            ]]>
            </sql>
        </sqlQuery>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Interpro -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="InterPro" isCacheable="false">
            <column name="source_id"/>
            <column name="transcript_ids"/>
            <column name="project_id"/>
            <column name="interpro_name"/>
            <column name="interpro_family_id"/>
            <column name="interpro_primary_id"/>
            <column name="interpro_secondary_id"/>
            <column name="interpro_desc"/>
            <column name="interpro_start_min"/>
            <column name="interpro_end_min"/>
            <column name="interpro_e_value"/>
            <sql>
            <![CDATA[
select
  listagg(ta.source_id, ', ') within group (order by ta.source_id) as transcript_ids
, ta.gene_source_id as source_id
, '@PROJECT_ID@' AS project_id
, xd1.name AS interpro_name
, dr.primary_identifier AS interpro_primary_id
, dr.secondary_identifier AS interpro_secondary_id
, dr.remark AS interpro_desc
, al.start_min AS interpro_start_min
, al.end_min AS interpro_end_min
, CASE
    WHEN df.e_value = 0
    THEN '0'
    ELSE TO_CHAR(df.e_value, '9.9EEEE')
  END AS interpro_e_value
, df2.source_id AS interpro_family_id
FROM
  ApidbTuning.TranscriptAttributes ta
, dots.AaLocation al
, sres.ExternalDatabaseRelease xdr1
, sres.ExternalDatabase xd1
, sres.ExternalDatabaseRelease xdr3
, sres.ExternalDatabase xd3
, sres.DbRef dr
, dots.DbRefAaFeature draf
, dots.DomainFeature df
, dots.DomainFeature df2
WHERE
  xd3.name IN('InterproscanData_RSRC', 'INTERPRO')
  AND ta.aa_sequence_id = df.aa_sequence_id
  AND df.aa_feature_id = draf.aa_feature_id
  AND df.aa_feature_id = al.aa_feature_id
  AND draf.db_ref_id = dr.db_ref_id
  AND dr.external_database_release_id = xdr1.external_database_release_id
  AND xdr1.external_database_id = xd1.external_database_id
  AND df.external_database_release_id = xdr3.external_database_release_id
  AND xdr3.external_database_id = xd3.external_database_id
  and df.parent_id = df2.aa_feature_id (+)
group by ta.gene_source_id, xd1.name, dr.primary_identifier, dr.secondary_identifier, dr.remark, al.start_min, al.end_min, df.e_value, df2.source_id
order by
transcript_ids
, interpro_name
, interpro_start_min
            ]]>
            </sql>
        </sqlQuery>



       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Transmembrane Domains -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="TMHMM" isCacheable="false">

            <testParamValues includeProjects="CryptoDB">
               <paramValue name="source_id">cgd7_50</paramValue>
            </testParamValues>
            <testParamValues includeProjects="ToxoDB">
               <paramValue name="source_id">TGGT1_301360</paramValue>
            </testParamValues>
            <testParamValues includeProjects="TrichDB">
               <paramValue name="source_id">TVAG_120600</paramValue>
            </testParamValues>
            <testParamValues includeProjects="AmoebaDB">
               <paramValue name="source_id">EIN_088300</paramValue>
            </testParamValues>
            <testParamValues includeProjects="MicrosporidiaDB">
               <paramValue name="source_id">ECU07_1760</paramValue>
            </testParamValues>

            <column name="source_id"/>
            <column name="transcript_id"/>
            <column name="project_id"/>
            <column name="tmf_name"/>
            <column name="tmf_parent_id"/>
            <column name="tmf_topology"/>
            <column name="tmf_start_min"/>
            <column name="tmf_end_max"/>
            <column name="tmf_sequence"/>

            <sql>
           <![CDATA[
SELECT
  /*+ no_star_transformation */
  t.source_id as transcript_id
, gf.source_id AS source_id
, '@PROJECT_ID@' AS project_id
, tmf.topology AS tmf_topology
, aal.start_min AS tmf_start_min
, aal.end_max AS tmf_end_max
, dbms_lob.substr(tas.sequence, aal.end_max - aal.start_min + 1, aal.start_min) AS tmf_sequence
FROM
  dots.aalocation aal
, dots.genefeature gf
, dots.transcript t
, dots.translatedaafeature taf
, dots.translatedaasequence tas
, dots.transmembraneaafeature tmf
WHERE
  gf.na_feature_id = t.parent_id
  AND t.na_feature_id = taf.na_feature_id
  AND taf.aa_sequence_id = tas.aa_sequence_id
  AND tas.aa_sequence_id = tmf.aa_sequence_id
  and tmf.aa_feature_id = aal.aa_feature_id
order by
  t.source_id,
  tmf_start_min
            ]]>           
          </sql>
        </sqlQuery>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Alias  -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="Alias" isCacheable="false" excludeProjects="EuPathDB">
            <column name="source_id"/>
            <column name="alias"/>
            <column name="database_name"/>
            <column name="project_id"/>
            <column name="id_type"/>
            <sql>
            <![CDATA[
SELECT DISTINCT
  upper(REPLACE(gi.id, ';current=false', '')) AS ALIAS
, database_name
, CASE
    WHEN database_name LIKE '%synonym%'
    THEN 'synonym'
    WHEN database_name LIKE '%primary_genome%'
    THEN 'name'
    WHEN database_name LIKE '%PreviousGeneIDs%'
    THEN 'previous ID'
    WHEN database_name LIKE '%aliases%'
    THEN 'alias'
    ELSE database_name
  END AS id_type
, source_id
, '@PROJECT_ID@' AS project_id
FROM
  apidbtuning.geneid gi
, ApidbTuning.geneAttributes ga
WHERE
  REGEXP_LIKE(gi.id, '(\D)')
  AND gi.database_name NOT LIKE '%gene2Uniprot_RSRC'
  and gi.union_member != 'same ID'
  and ga.source_id = gi.gene
ORDER BY
  id_type asc
, alias asc
            ]]>
            </sql>
        </sqlQuery>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Strains -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->


<!-- TODO
       <sqlQuery name="Strains" isCacheable="false" includeProjects="ToxoDB,PlasmoDB">
            <column name="source_id"/>
            <column name="gene_source_id"/>
            <column name="strain_source_id"/>
            <column name="strain_gene_source_id"/>
            <column name="project_id"/>
            <column name="strain"/>
	    <column name="gene_type"/>
            <column name="gene_product"/>
            <column name="gene_exon_count"/>
            <column name="protein_length"/>
            <column name="signalp_scores"/>
            <column name="tm_count"/>
            <column name="proteomics"/>
            <column name="user_comment"/>
            <column name="gene_transcript_count"/>
            <sql>
            <![CDATA[
                     select source_id,gene_source_id,strain_gene_source_id,project_id,strain, gene_type,
                     gene_transcript_count,gene_product,gene_exon_count,
                     min(strain_source_id) as strain_source_id,max(signalp_scores) as signalp_scores,
                     max(tm_count) as tm_count, max(user_comment) as user_comment,
                     max(proteomics) as proteomics,max(protein_length) as protein_length
                     from (
                     select ga.source_id, ga.gene_source_id,
                     gb.source_id as strain_source_id, gb.gene_source_id as strain_gene_source_id,
                      replace(gb.organism, 'Toxoplasma gondii ', '') as strain,
                      gb.gene_type, gb.gene_transcript_count,
                      gb.project_id, gb.gene_product, gb.gene_exon_count, gb.protein_length,
                      case when gb.signalp_scores is null then 'No' else 'Yes' end as signalp_scores,
                      gb.tm_count, 
                      case when ms.aa_sequence_id is null then 'No' else 'Yes' end as proteomics,
                      case when c.stable_id is null then 'No' else 'Yes' end as user_comment
               from apidbTuning.TranscriptAttributes ga, apidbTuning.TranscriptAttributes gb,
                    (select distinct aa_sequence_id from apidb.MassSpecSummary) ms,
                    (select distinct stable_id
                     from @COMMENT_SCHEMA@mappedComment@COMMENT_DBLINK@ cmnts
                     where cmnts.comment_target_id = 'gene'
                       and cmnts.review_status_id != 'rejected'
                       and cmnts.is_visible = 1
                       and cmnts.project_name = '@PROJECT_ID@') c
               where ga.project_id = '@PROJECT_ID@'
                 and gb.gene_id = ga.gene_id
                 and gb.aa_sequence_id = ms.aa_sequence_id(+)
                 and gb.gene_source_id = c.stable_id(+))
                 group by source_id,gene_source_id,strain_gene_source_id,project_id,strain,gene_type,
                 gene_transcript_count,gene_product,gene_exon_count
             ]]>
            </sql>
        </sqlQuery>
-->

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Signal Peptides -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="SignalP" isCacheable="false">

            <testParamValues includeProjects="CryptoDB">
               <paramValue name="source_id">cgd7_110</paramValue>
            </testParamValues>
            <testParamValues includeProjects="ToxoDB">
	    <paramValue name="source_id">TGME49_257790</paramValue>
            </testParamValues>
            <testParamValues includeProjects="GiardiaDB">
               <paramValue name="source_id">GL50803_20315</paramValue>
            </testParamValues>
            <testParamValues includeProjects="TrichDB">
               <paramValue name="source_id">TVAG_119560</paramValue>
            </testParamValues>
            <testParamValues includeProjects="TriTrypDB">
               <paramValue name="source_id">Tb10.v4.0153</paramValue>
            </testParamValues>

            <column name="source_id"/>
            <column name="transcript_id"/>
            <column name="project_id"/>
            <column name="spf_start_min"/>
            <column name="spf_end_max"/>
            <column name="conclusion_score"/>
            <column name="d_score"/>
            <column name="signal_probability"/>

            <sql>
            <![CDATA[
SELECT DISTINCT
  t.source_id AS transcript_id
, gf.source_id AS source_id
, '@PROJECT_ID@' AS project_id
,(spf.maxy_conclusion + spf.maxc_conclusion + spf.maxs_conclusion + spf.means_conclusion) AS conclusion_score
,((spf.means_score + spf.maxy_score) / 2) AS d_score
, spf.signal_probability AS signal_probability
, 1 AS spf_start_min
, aal.end_max AS spf_end_max
FROM
  dots.aalocation aal
, dots.genefeature gf
, dots.transcript t
, dots.translatedaafeature taf
, dots.translatedaasequence tas
, dots.signalpeptidefeature spf
WHERE
  gf.na_feature_id = t.parent_id
  AND t.na_feature_id = taf.na_feature_id
  AND taf.aa_sequence_id = tas.aa_sequence_id
  AND tas.aa_sequence_id = spf.aa_sequence_id
  AND spf.aa_feature_id = aal.aa_feature_id
  and
  ((spf.maxy_conclusion + spf.maxc_conclusion + spf.maxs_conclusion + spf.means_conclusion) >= 3
    or
    ((spf.means_score + spf.maxy_score) / 2) >= 0.5
    OR spf.signal_probability >= 0.5
  )
               ]]>
            </sql>
        </sqlQuery>


       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- BlastP Hits -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="BlastP" isCacheable="false">
            <column name="transcript_id"/>
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="blastp_feature_id"/>
            <column name="blastp_name"/>
            <column name="blastp_parent_id"/>
            <column name="blastp_score"/>
            <column name="blastp_start"/>
            <column name="blastp_end"/>
            <column name="blastp_description"/>
            <column name="blastp_expect_value"/>
            <column name="blastp_percent_identity"/>
            <column name="blastp_percent_positive"/>

            <sql>
            <![CDATA[
             select source_id as transcript_id, gene_source_id as source_id, '@PROJECT_ID@' AS project_id, 
             similarity_id AS blastp_feature_id,
             source_id AS blastp_name, query_id AS blastp_parent_id,
             score AS blastp_score,
             min_query_start AS blastp_start, max_query_end AS blastp_end,
             'E() = ' || pvalue_mant || 'e' || pvalue_exp || ', ' || round(100 * number_identical / total_match_length) || '% identity, ' || description AS blastp_description,
             case when pvalue_mant = 0 then '0' else pvalue_mant || 'e' || pvalue_exp end AS blastp_expect_value,
             round(100 * number_identical / total_match_length) AS blastp_percent_identity,
             round(100 * number_positive / total_match_length) AS blastp_percent_positive
             from ApidbTuning.Blastp
             order by pvalue_exp, pvalue_mant
             ]]>
            </sql>
        </sqlQuery>



       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Low Complexity Regions -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->


       <sqlQuery name="LowComplexity" isCacheable="false">

            <testParamValues minRows="0" includeProjects="CryptoDB"/>
            <testParamValues includeProjects="TrichDB">
               <paramValue name="source_id">TVAG_563160</paramValue>
            </testParamValues>
            <testParamValues includeProjects="TriTrypDB">
               <paramValue name="source_id">LmjF.02.0480</paramValue>
            </testParamValues>
            <testParamValues includeProjects="AmoebaDB">
               <paramValue name="source_id">EIN_088300</paramValue>
            </testParamValues>
            <testParamValues includeProjects="MicrosporidiaDB">
               <paramValue name="source_id">ECU07_1760</paramValue>
            </testParamValues>
            <testParamValues includeProjects="PiroplasmaDB">
               <paramValue name="source_id">TA10310</paramValue>
            </testParamValues>

            <column name="transcript_id"/>
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="lc_name"/>
            <column name="lc_parent_id"/>
            <column name="lc_start_min"/>
            <column name="lc_end_max"/>

            <sql>
            <![CDATA[
             select t.source_id as transcript_id, gf.source_id as source_id, '@PROJECT_ID@' AS project_id,
             lc.aa_feature_id AS lc_name,
             lc.aa_sequence_id AS lc_parent_id,
             aal.start_min AS lc_start_min, aal.end_max AS lc_end_max
             --substr(aas.sequence, aal.start_min, (aal.end_max-aal.start_min+1)) AS lc_sequence
             --dbms_lob.substr(aas.sequence, (aal.end_max-aal.start_min+1), aal.start_min) AS lc_sequence
             from
             dots.aalocation aal,
             dots.genefeature gf,
             dots.transcript t,
             dots.translatedaafeature taf,
             dots.lowcomplexityaafeature lc, 
             dots.aaSequence aas
             where gf.na_feature_id = t.parent_id
             and t.na_feature_id = taf.na_feature_id
             and taf.aa_sequence_id = lc.aa_sequence_id
             and lc.aa_feature_id = aal.aa_feature_id
             and lc.aa_sequence_id = aas.aa_sequence_id
             ORDER BY lc_start_min            
             ]]>
            </sql>
        </sqlQuery>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Notes -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- TODO:  this data is missing in plas-rbld currently -->
       <sqlQuery name="Notes"
               isCacheable="false" clobRow="true">

            <testParamValues includeProjects="PlasmoDB">
               <paramValue name="source_id">PF3D7_0222600</paramValue>
            </testParamValues>
            <testParamValues includeProjects="CryptoDB">
               <paramValue name="source_id">CMU_000680</paramValue>
            </testParamValues>
            <testParamValues minRows="0" includeProjects="TrichDB"/>
            <testParamValues includeProjects="GiardiaDB">
               <paramValue name="source_id">GL50803_8010</paramValue>
            </testParamValues>
            <testParamValues includeProjects="AmoebaDB">
               <paramValue name="source_id">ECU07_1485</paramValue>
            </testParamValues>
	    <testParamValues includeProjects="MicrosporidiaDB">
               <paramValue name="source_id">ECU02_0880</paramValue>
               <paramValue name="project_id">MicrosporidiaDB</paramValue>
            </testParamValues>

            <column name="source_id"/>
            <column name="transcript_ids"/>
            <column name="project_id"/>
            <column name="comment_string"/>
            <column name="comment_date"/>
            <sql>
              <![CDATA[
                select dbms_lob.substr(nfc.comment_string,4000,1) as comment_string, nf.gene_source_id as source_id, nf.project_id, 
                       listagg(nf.source_id, ', ') within GROUP(ORDER BY  nf.source_id) AS transcript_ids,
                       to_char(nfc.comment_date, 'yyyy-mm-dd') as comment_date
                from dots.NaFeatureComment nfc, ApidbTuning.TranscriptAttributes nf
                where nf.na_feature_id = nfc.na_feature_id
                group by nf.gene_source_id, nf.project_id, dbms_lob.substr(nfc.comment_string,4000,1),nfc.comment_date
                order by nfc.comment_date
            ]]>
            </sql>
        </sqlQuery>

        <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Old Toxo Comments -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
<!--
       <sqlQuery name="OldToxoComments" includeProjects="ToxoDB"
                 isCacheable="false">

            <testParamValues includeProjects="ToxoDB">
               <paramValue name="source_id">25.m00188</paramValue>
            </testParamValues>

            <column name="source_id"/>
            <column name="gene_source_id"/>
            <column name="project_id"/>
            <column name="comment_id"/>
            <column name="stable_id"/>
            <column name="release4_id"/>
            <column name="headline"/>
            <column name="user_name"/>
            <column name="organization"/>
            <column name="comment_date"/>
            <column name="project_version"/>
            <sql>
            <![CDATA[
              SELECT DISTINCT toa.source_id, '@PROJECT_ID@' as project_id, 
                     c.comment_id, c.stable_id,
                     NVL(c.headline, '<i>none</i>') AS headline,
                     (u.first_name || ' ' || u.last_name) AS user_name,
                     u.organization,toa.old_source_id as release4_id,
                     c.comment_date, c.project_version
              FROM @USER_SCHEMA@users@USER_DBLINK@ u,
                   @COMMENT_SCHEMA@comments@COMMENT_DBLINK@ c,
                   apidb.trackoldannotation toa
              WHERE u.user_id = c.user_id
                    AND c.comment_target_id = 'gene'
                    AND c.stable_id = toa.old_source_id
                    AND c.review_status_id != 'rejected'
                    AND c.review_status_id != 'task'
              ORDER BY c.comment_date DESC
            ]]>
            </sql>
        </sqlQuery>
-->
 

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Gene images, such as DBP images -->
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="CellularLocalization"
                    isCacheable="false" includeProjects="GiardiaDB,TriTrypDB">
                  <testParamValues >
                      <paramValue name="source_id">GL50803_15576</paramValue>
                   </testParamValues>
       
                  <column name="source_id"/>
                  <column name="project_id"/>
                  <column name="image_uri"/>
                  <column name="note"/>
                  <column name="image_type"/>
                   <sql>
                   <![CDATA[
         select distinct img.image_uri, replace(img.note, 'GO term: ', '') as note,
                  img.image_type, ga.source_id, img.display_order,
                 '@PROJECT_ID@' as project_id
         FROM apidb.nafeatureimage img, apidbtuning.geneattributes ga
         WHERE img.na_feature_id = ga.na_feature_id
         ORDER BY img.display_order
                   ]]>
                   </sql>
               </sqlQuery> 

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Pathways -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="MetabolicPathways" includeProjects="ToxoDB,PlasmoDB"
                   isCacheable="false">
             <testParamValues includeProjects="ToxoDB">
               <paramValue name="source_id">TGME49_278740</paramValue>
            </testParamValues>

            <column name="source_id"/>
            <column name="project_id"/>
            <column name="pathway_id"/>
            <column name="pathway_name"/>
            <column name="activity"/>

            <sql>
            <![CDATA[
SELECT DISTINCT
  dr.primary_identifier AS pathway_id
, TRIM(REPLACE(DECODE(dr.lowercase_secondary_identifier, NULL, dr.primary_identifier, dr.lowercase_secondary_identifier), CHR(191), '')) AS
  pathway_name
, dr.remark AS activity
, gf.source_id
, '@PROJECT_ID@' AS project_id
FROM
  apidbtuning.geneattributes gf
, dots.DbRefNaFeature drnf
, sres.DbRef dr
, sres.ExternalDatabaseRelease edr
, sres.ExternalDatabase ed
WHERE
  gf.na_feature_id = drnf.na_feature_id
  AND drnf.db_ref_id = dr.db_ref_id
  AND dr.external_database_release_id = edr.external_database_release_id
  AND edr.external_database_id = ed.external_database_id
  AND ed.name IN('pfal3D7_dbxref_simple_gene2HagaiPathway_RSRC', 'tgonME49_dbxref_protein2Pathways_Feng_RSRC')
ORDER BY
  dr.primary_identifier
            ]]>
            </sql>
        </sqlQuery>


       <sqlQuery name="MetabolicPathwaysSres" excludeProjects="EuPathDB"
                   isCacheable="false">

            <column name="source_id"/>
            <column name="project_id"/>
            <column name="pathway_source_id"/>
            <column name="pathway_name"/>
            <column name="reactions"/>
            <column name="enzyme"/>
            <column name="expasy_url"/>
            <column name="pathway_source"/>

            <sql>
            <![CDATA[
            select distinct
            source_id
            , project_id
            , pathway_source_id
            , pathway_name
            , count(reaction_source_id) as reactions
            , enzyme
            , expasy_url
            , pathway_source
            from (
                SELECT DISTINCT
                tp.GENE_SOURCE_ID as source_id
                , '@PROJECT_ID@' AS project_id
                , tp.PATHWAY_SOURCE_ID
                , tp.PATHWAY_NAME
                , pr.REACTION_SOURCE_ID
                , pr.ENZYME
                , pr.EXPASY_URL
                , pa.PATHWAY_SOURCE
                FROM
                apidbtuning.transcriptpathway tp
                , apidbtuning.pathwayattributes pa 
                , apidbtuning.pathwaycompounds pc
                , apidbtuning.pathwayreactions pr
                where tp.PATHWAY_ID = pa.PATHWAY_ID
                and pc.PATHWAY_ID = pa.PATHWAY_ID
                and pr.REACTION_ID = pc.REACTION_ID
                and pr.ext_db_name = pc.ext_db_name
                and tp.EC_NUMBER like replace(pr.enzyme, '-', '%')
                ORDER BY pathway_name
                )
            group by source_id, project_id, pathway_source_id, pathway_name, enzyme, expasy_url, pathway_source
            order by pathway_source_id, pathway_source
            ]]>
            </sql>
        </sqlQuery>

 
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Orthologs -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="Orthologs"
                  isCacheable="false">

            <testParamValues includeProjects="ToxoDB">
               <paramValue name="source_id">TGME49_253730</paramValue>
            </testParamValues>

            <column name="source_id"/>
            <column name="project_id"/>
            <column name = "ortho_gene_source_id" />
<!--            <column name="ortho_transcript_source_id"/> TODO consider this -->
            <column name="organism"/>
            <column name="gene_product"/>
            <column name="is_syntenic"/>
            <column name="has_comment"/>

            <sql>
            <![CDATA[
SELECT
  ogt.gene_source_id as source_id
, ogt.project_id
, ogt.ortho_gene_source_id
--, ogt.ortho_transcript_source_id
, ogt.gene_product
, ogt.organism
, ogt.is_syntenic
, case ogt.has_comment when 'no' then null else ogt.has_comment end  as has_comment
FROM
  ApidbTuning.OrthologGeneTable ogt
ORDER BY
  ogt.is_syntenic desc
, ogt.has_comment desc
, ogt.ortho_gene_source_id asc
            ]]>
            </sql>
       </sqlQuery>


       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Epitopes -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
<!-- TODO:  check this one.  Tuning table should be transcript level -->
       <sqlQuery name="Epitopes"
                  isCacheable="false"  excludeProjects="TrichDB,AmoebaDB,MicrosporidiaDB">

            <testParamValues includeProjects="CryptoDB">
               <paramValue name="source_id">cgd6_1800</paramValue>
            </testParamValues>
            <testParamValues includeProjects="ToxoDB">
               <paramValue name="source_id">TGVEG_270250</paramValue>
            </testParamValues>
            <testParamValues includeProjects="GiardiaDB">
               <paramValue name="source_id">GL50803_6081</paramValue>
            </testParamValues>
            <testParamValues includeProjects="TriTrypDB">
               <paramValue name="source_id">LmjF.10.0460</paramValue>
            </testParamValues>
            <testParamValues includeProjects="PiroplasmaDB">
               <paramValue name="source_id">BBOV_IV008150</paramValue>
            </testParamValues>

            <column name="source_id"/>
            <column name="transcript_id"/>
            <column name="project_id"/>
            <column name="iedb_id"/>
            <column name="location"/>
            <column name="sequence"/>
            <column name="name"/>
            <column name="confidence"/>
            <sql>
            <![CDATA[
SELECT
  es.iedb_id
, es.location
, TO_CHAR(es.sequence) AS sequence
, es.name
, es.confidence
, ta.source_id as transcript_id
, ta.gene_source_id as source_id
, '@PROJECT_ID@' AS project_id
FROM
  ApidbTuning.EpitopeSummary es
, ApidbTuning.transcriptAttributes ta
WHERE
  es.source_id = ta.source_id
ORDER BY
  DECODE(es.confidence, 'Low', 1, 'Medium', 2, 'High', 3, 4) DESC
, es.location
            ]]>
            </sql>
        </sqlQuery>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Splice Sites  -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="SpliceSites" isCacheable="false"  includeProjects="TriTrypDB">
            <column name="transript_source_id"/>
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="sample_name"/>
            <column name="utr_len"/>
            <column name="alt_cds_start"/>
            <column name="rel_pos"/>
            <column name="location"/>
            <column name="count_per_million"/>
            <column name="is_unique"/>
            <column name="avg_mismatches"/>
            <column name="is_dominant"/>
            <column name="display_name"/>
            <column name="attribution"/>
            <column name="dataset_presenter_id"/>
            <sql>
            <![CDATA[
                SELECT DISTINCT
                transcript_source_id
                , source_id
                , project_id
                , sample_name
                , location
                , count_per_million
                , avg_mismatches
                , is_unique
                , is_dominant
                , utr_len
                , rel_pos
                , display_name
                , attribution
                , dataset_presenter_id
                , CASE WHEN (rel_pos >= 0) THEN 'yes' ELSE '' END AS alt_cds_start
                FROM (
                    SELECT DISTINCT
                    ta.source_id as transcript_source_id
                    , ta.gene_source_id as source_id
                    , '@PROJECT_ID@' as project_id
                    , REPLACE(pan.name, ' [feature_loc] (SpliceSites)', '') as sample_name
                    , sst.location
                    , ssf.count_per_million
                    , ssf.avg_mismatches
                    , decode (sst.is_unique, 1, 'yes', 0, '') as is_unique
                    , decode (sst.is_dominant, 1, 'yes', 0, '') as is_dominant
                    , CASE WHEN (sst.location >= ta.coding_start AND sst.location <= coding_end AND sst.dist_to_cds = sst.dist_to_first_atg)
                        THEN (-1) * sst.dist_to_cds
                        ELSE sst.dist_to_first_atg END as utr_len
                    , CASE WHEN (ta.is_reversed = 0 )
                        THEN (sst.location - ta.coding_start)
                        ELSE (ta.coding_end - sst.location) END as rel_pos
                    , REGEXP_REPLACE (dp.display_name, '\(.+\)', '') as display_name
                    , CASE WHEN (dp.short_display_name like '%Myler%')
                        THEN 'Myler lab' ELSE dp.short_attribution END as attribution
                    , dp.dataset_presenter_id
                    FROM apidbtuning.splicesitetranscripts sst
                    , apidb.splicesitefeature ssf
                    , study.protocolappnode pan
                    , study.studylink sl
                    , study.study s
                    , study.study i
                    , apidbtuning.datasetpresenter dp
                    , apidbtuning.transcriptattributes ta
                    WHERE ssf.na_sequence_id = sst.na_sequence_id
                    AND ssf.type = sst.type
                    AND ssf.strand = sst.strand
                    AND ssf.segment_start = sst.location
                    AND pan.protocol_app_node_id = ssf.protocol_app_node_id
                    AND sl.protocol_app_node_id = pan.protocol_app_node_id
                    AND s.study_id = sl.study_id
                    AND i.study_id = s.investigation_id
                    AND dp.name = replace(i.name, '_PolyA_', '_Spliced_Leader_')
                    AND ta.gene_source_id = sst.gene_source_id
                    AND ssf.type = 'Splice Site'
                    ORDER BY is_dominant, rel_pos, utr_len desc, sample_name, location
                )
            ]]>
	    </sql>
       </sqlQuery>


       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Poly A Sites  -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="PolyASites" isCacheable="false"  includeProjects="TriTrypDB">
            <testParamValues>
               <paramValue name="source_id">LmjF.01.0020</paramValue>
            </testParamValues>

            <column name="transcript_source_id"/>
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="sample_name"/>
            <column name="location"/>
            <column name="count_per_million"/>
            <column name="is_unique"/>
            <column name="avg_mismatches"/>
            <column name="is_dominant"/>
            <column name="rel_pos"/>
            <column name="display_name"/>
            <column name="attribution"/>
            <column name="dataset_presenter_id"/>
            <sql>
            <![CDATA[
                SELECT DISTINCT
                ta.source_id as transcript_source_id
                , ta.gene_source_id as source_id
                , '@PROJECT_ID@' as project_id
                , REPLACE(pan.name, ' [feature_loc] (SpliceSites)', '') as sample_name
                , sst.location
                , ssf.count_per_million
                , ssf.avg_mismatches
                , decode (sst.is_unique, 1, 'yes', 0, '') as is_unique
                , decode (sst.is_dominant, 1, 'yes', 0, '') as is_dominant
                , CASE WHEN (ta.is_reversed = 1 )
                    THEN (-1 * (sst.location - ta.coding_start))
                    ELSE (-1 * (ta.coding_end - sst.location)) END as rel_pos
                , REGEXP_REPLACE (dp.display_name, '\(.+\)', '') as display_name
                , CASE WHEN (dp.short_display_name like '%Myler%')
                    THEN 'Myler lab' ELSE dp.short_attribution END as attribution
                , dp.dataset_presenter_id
                FROM apidbtuning.splicesitetranscripts sst
                , apidb.splicesitefeature ssf
                , study.protocolappnode pan
                , study.studylink sl
                , study.study s
                , study.study i
                , apidbtuning.datasetpresenter dp
                , apidbtuning.transcriptattributes ta
                WHERE ssf.na_sequence_id = sst.na_sequence_id
                AND ssf.type = sst.type
                AND ssf.strand = sst.strand
                AND ssf.segment_start = sst.location
                AND pan.protocol_app_node_id = ssf.protocol_app_node_id
                AND sl.protocol_app_node_id = pan.protocol_app_node_id
                AND s.study_id = sl.study_id
                AND i.study_id = s.investigation_id
                --TODO Fix this!
                AND (((i.name = 'lmajFriedlin_sbri_myler_PolyA_rnaSeqSplicedLeaderAndPolyASites_RSRC' OR i.name = 'ldonBPK282A1_sbri_myler_rnaSeqSplicedLeaderAndPolyASites_RSRC')
                        AND dp.name = replace(i.name, '_PolyA_', '_Spliced_Leader_') )
                    OR (i.name = 'tbruTREU927_George_Cross_PolyA_rnaSeqSplicedLeaderAndPolyASites_RSRC' AND dp.name = replace(i.name, '_PolyA_', '_Splice_Leader_'))
                    OR (i.name = 'tbruTREU927_Tschudi_Transcriptome_PolyA_rnaSeqSplicedLeaderAndPolyASites_RSRC' AND dp.name = replace(i.name, '_PolyA_', '_Spliced_Leaders_')))
                AND ta.gene_source_id = sst.gene_source_id
                AND ssf.type = 'Poly A'
                ORDER BY is_dominant, rel_pos desc, sample_name, location
            ]]>
	    </sql>
       </sqlQuery>


       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Isolate Overlap  -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- TODO Crypto specific /?  Maybe this should be an attribute? isolate count?-->
       <sqlQuery name="PopsetOverlap" includeProjects="CryptoDB,EuPathDB"
                  isCacheable="false">

            <testParamValues includeProjects="CryptoDB">
               <paramValue name="source_id">cgd6_2090</paramValue>
            </testParamValues>

            <column name="source_id"/>
            <column name="gene_source_id"/>
            <column name="project_id"/>
            <column name="total"/>
            <sql>
            <![CDATA[
            SELECT source_id, '@PROJECT_ID@' as project_id, count(*) as total
            FROM (SELECT DISTINCT gio.gene_source_id as source_id, gio.popset_source_id as popset
                  FROM ApidbTuning.GenePopsetOverlap gio) popsets
            GROUP BY source_id
            ]]>
           </sql>
       </sqlQuery>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Mass spec -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="MassSpec" includeProjects="AmoebaDB,CryptoDB,GiardiaDB,PlasmoDB,ToxoDB,TriTrypDB,TrichDB,PiroplasmaDB"
                  isCacheable="false">

            <testParamValues includeProjects="AmoebaDB">
               <paramValue name="source_id">EHI_011210</paramValue>
            </testParamValues>
            <testParamValues includeProjects="GiardiaDB">
               <paramValue name="source_id">GL50803_17249</paramValue>
            </testParamValues>
            <testParamValues includeProjects="TriTrypDB">
               <paramValue name="source_id">Tb11.0550</paramValue>
            </testParamValues>
            <testParamValues includeProjects="TrichDB">
               <paramValue name="source_id">TVAG_230580</paramValue>
            </testParamValues>
           <testParamValues includeProjects="PiroplasmaDB">
               <paramValue name="source_id">TA19695</paramValue>
            </testParamValues>

            <column name="transcript_ids"/>
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="experiment"/>
            <column name="sample"/>
            <column name="sequence_count"/>
            <column name="spectrum_count"/>
            <column name="data_source"/>
            <sql>
            <![CDATA[
SELECT
  listagg(source_id, ', ') within GROUP(ORDER BY source_id) AS transcript_ids
, gene_source_id as source_id
, '@PROJECT_ID@' AS project_id
, experiment
, sample_display_name AS sample
, external_database_name AS data_source
, spectrum_count
, sequence_count
FROM
  apidbtuning.mstranscriptsummary
GROUP BY
  gene_source_id
, experiment
, sample_display_name
, external_database_name
, spectrum_count
, sequence_count
ORDER BY
  transcript_ids
, experiment
, sample_display_name
            ]]>
            </sql>       
        </sqlQuery>
 
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Phospho Mass spec -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="MassSpecMod" includeProjects="PlasmoDB,ToxoDB,TriTrypDB"
                  isCacheable="false"> 
          <testParamValues includeProjects="ToxoDB">
            <paramValue name="source_id">TGME49_251810</paramValue>
          </testParamValues>
            <column name="source_id"/>
            <column name="transcript_ids"/>
            <column name="modification_site"/>
            <column name="term_name"/>
            <column name="experiment"/>
            <column name="sample"/>
            <column name="residue"/>
            <column name="sum_spectrum_count"/>
            <column name="distinct_peptides"/>
            <column name="project_id"/>
            <sql>
            <![CDATA[
select   listagg(source_id, ', ') within group(order by source_id) as transcript_ids
, gene_source_id as source_id
,       '@PROJECT_ID@' as project_id
       , modification_site,
       experiment,
       sample,
       sum_spectrum_count,
       term_name,
       residue,
       distinct_peptides
from (
SELECT mss.source_id,
       mss.gene_source_id,
       mss.residue_location + 1 as modification_site,
       mss.experiment,
       mss.sample_display as sample,
       sum(mss.spectrum_count) as sum_spectrum_count,
       mss.modification_type as term_name,
       mss.residue,
       count(*) as distinct_peptides
from  apidbtuning.msmodifiedpeptidesummary mss
group by mss.experiment, mss.sample_display, mss.residue_location, mss.source_id, mss.gene_source_id,mss.modification_type, mss.residue
)
group by gene_source_id, modification_site, experiment, sample, sum_spectrum_count, term_name, residue, distinct_peptides
order by transcript_ids,residue, experiment, sample
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="MassSpecDownload" includeProjects="AmoebaDB,CryptoDB,GiardiaDB,PlasmoDB,ToxoDB,TriTrypDB,TrichDB,PiroplasmaDB"
                  isCacheable="false" clobRow="true">

            <testParamValues includeProjects="AmoebaDB">
               <paramValue name="source_id">EHI_011210</paramValue>
            </testParamValues>
            <testParamValues includeProjects="GiardiaDB">
               <paramValue name="source_id">GL50803_17249</paramValue>
            </testParamValues>
            <testParamValues includeProjects="TriTrypDB">
               <paramValue name="source_id">Tb11.0550</paramValue>
            </testParamValues>
            <testParamValues includeProjects="TrichDB">
               <paramValue name="source_id">TVAG_230580</paramValue>
            </testParamValues>
           <testParamValues includeProjects="PiroplasmaDB">
               <paramValue name="source_id">TA19695</paramValue>
            </testParamValues>

            <column name="transcript_id"/>
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="experiment"/>
            <column name="sample"/>
            <column name="sequence"/>
            <column name="spectrum_count"/>
            <column name="protein_start"/>
            <column name="protein_end"/>
            <sql>
            <![CDATA[
                   select source_id as transcript_id, gene_source_id as source_id, '@PROJECT_ID@' as project_id,
                     experiment, sample_display_name as sample, peptide_sequence as sequence, 
		     spectrum_count, aa_start_min as protein_start, aa_end_max as protein_end
                   from apidbtuning.mspeptidesummary
                   order by experiment, sample
            ]]>

            </sql>
        </sqlQuery>


       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!--Gene Location -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

     <sqlQuery name="GeneLocation" isCacheable="false">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="sequence_source_id"/>
            <column name="sequence_so_term"/> 
            <column name="is_top_level"/>
            <column name="start_min"/>
            <column name="end_max"/>
            <column name="is_reversed"/>
            <column name="start_context"/>
            <column name="end_context"/>
            <column name="lc_project_id"/>
            <sql>
            <![CDATA[
SELECT
  ga.source_id
, sa.project_id
, ga.sequence_id AS sequence_source_id
, so.name AS sequence_so_term
, 1 AS is_top_level
, start_min AS start_min
, end_max AS end_max
, DECODE(is_reversed, 0, '+', 1, '-') is_reversed
,(start_min - 5000) AS start_context
,(end_max + 5000) AS end_context
, lower(ga.project_id) AS lc_project_id
from
  ApidbTuning.GeneAttributes ga
, ApidbTuning.GenomicSeqAttributes sa
, SRes.OntologyTerm so
WHERE 
 ga.project_id = '@PROJECT_ID@'
  AND ga.na_sequence_id = sa.na_sequence_id
  AND sa.so_id = so.source_id
            ]]>
            </sql>
        </sqlQuery>

    
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- SSGCID                                                       -->
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="Ssgcid" isCacheable="false" excludeProjects="HostDB">

            <testParamValues includeProjects="AmoebaDB">
               <paramValue name="source_id">EHI_011210</paramValue>
            </testParamValues>
            <testParamValues includeProjects="TriTrypDB">
               <paramValue name="source_id">Tb927.10.2010</paramValue>
            </testParamValues>
            <testParamValues includeProjects="PiroplasmaDB">
               <paramValue name="source_id">BBOV_IV001230</paramValue>
            </testParamValues>
            <testParamValues includeProjects="CryptoDB">
               <paramValue name="source_id">cgd1_2260</paramValue>
            </testParamValues>
            <testParamValues includeProjects="ToxoDB">
               <paramValue name="source_id">TGME49_239300</paramValue>
            </testParamValues>
            <testParamValues includeProjects="GiardiaDB">
               <paramValue name="source_id">GL50803_24068 </paramValue>
            </testParamValues>
            <testParamValues includeProjects="PlasmoDB">
               <paramValue name="source_id">PF3D7_1001000 </paramValue>
            </testParamValues>


            <column name="source_id"/>
            <column name="project_id"/>
            <column name="target"/>
            <column name="status"/>
            <column name="selection_criteria"/>
            <column name="has_clone"/>
            <column name="has_protein"/>
            <sql>
            <![CDATA[
               WITH sbri as (select substr(eupathdb, instr(eupathdb, ':') + 1) as source_id,
                                    decode(substr(eupathdb, 1, instr(eupathdb, ':') - 1),
                                           'TritrypDB', 'TriTrypDB',
                                           substr(eupathdb, 1, instr(eupathdb, ':') - 1))
                                    as project_id,
                                    target, status, selection_criteria,
                                    decode(has_clone, 'true', 'yes', 'false', 'no', 'N/A') as has_clone,
                                    decode(has_protein, 'true', 'yes', 'false', 'no', 'N/A') as has_protein
                             from ApidbTuning.ssgcid)
               SELECT gi.gene as source_id, sbri.project_id, sbri.target, sbri.status,
                      sbri.selection_criteria, sbri.has_clone, sbri.has_protein
               FROM sbri, ApidbTuning.GeneId gi
               WHERE sbri.project_id = '@PROJECT_ID@'
                 AND sbri.source_id = gi.id
            ]]>
            </sql>
        </sqlQuery>

    
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- single-row attribute "tables" to put values in GeneDetail    -->
       <!-- where text search can find them                              -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="Product" isCacheable="false">
            <column name="transcript_product"/>
            <column name="gene_name"/>
            <column name="transcript_ids"/>
            <column name="source_id"/>
            <column name="project_id"/>
            <sql>
            <![CDATA[
SELECT
  gene_source_id AS source_id
, '@PROJECT_ID@' AS project_id
, gene_name
, transcript_product
, listagg(source_id, ', ') within GROUP(ORDER BY  source_id) AS transcript_ids
FROM
  apidbtuning.transcriptattributes
GROUP BY
  gene_source_id
, gene_name
, transcript_product
            ]]>
            </sql>
        </sqlQuery>

        <sqlQuery name="AlternateProducts" isCacheable="false">
            <column name="source_id"/>
            <column name="transcript_ids"/>
            <column name="project_id"/>
            <column name="product"/>
            <column name="is_alternate"/>
            <sql>
            <![CDATA[
SELECT
  ta.gene_source_id AS source_id
, tp.product
, '@PROJECT_ID@' AS project_id
, DECODE(tp.is_preferred, 1, 'No', 0, 'Yes') AS is_alternate
, listagg(source_id, ', ') within GROUP(ORDER BY source_id) AS transcript_ids
FROM
  apidb.transcriptproduct tp
, apidbtuning.transcriptattributes ta
WHERE
  ta.na_feature_id = tp.na_feature_id
  AND tp.is_preferred = 0
GROUP BY
  gene_source_id
, tp.product
, tp.is_preferred
            ]]>
            </sql>
        </sqlQuery> 

       <sqlQuery name="GeneId" isCacheable="false">
            <column name="gene_id"/>
            <column name="source_id"/>
            <column name="project_id"/>
            <sql>
            <![CDATA[
SELECT
  ga.source_id
, ga.source_id AS gene_id
, '@PROJECT_ID@' AS project_id
FROM
  dots.GeneFeature gf
, ApidbTuning.GeneAttributes ga
WHERE
  ga.na_feature_id = gf.na_feature_id
            ]]>
            </sql>
        </sqlQuery>

  <!--===========================================================================-->
  <!--===========================================================================-->
  <!-- GFF data dump tables  -->
  <!--===========================================================================-->
  <!--===========================================================================-->
<!--
       <sqlQuery name="GeneGffAliases" isCacheable="false">

            <testParamValues minRows="0" includeProjects="CryptoDB"/>
            <testParamValues includeProjects="ToxoDB">
               <paramValue name="source_id">NCLIV_000310</paramValue>
            </testParamValues>
            <testParamValues minRows="0" includeProjects="GiardiaDB"/>
            <testParamValues includeProjects="TriTrypDB">
               <paramValue name="source_id">LinJ.23.0280</paramValue>
            </testParamValues>
            <testParamValues includeProjects="MicrosporidiaDB">
               <paramValue name="source_id">ECU10_1660</paramValue>
            </testParamValues>

            <column name="source_id"/>
            <column name="gene_source_id"/>
            <column name="project_id"/>
            <column name="gff_alias"/>
                <sql>
                <![CDATA[
                SELECT DISTINCT ta.gene_source_id, source_id, '@PROJECT_ID@' AS project_id, id AS gff_alias
                FROM ApidbTuning.GeneId gi, ApidbTuning.TranscriptAttributes ta 
                WHERE ta.gene_source_id = gi.gene
                ]]>
                </sql>
       </sqlQuery>
        
       <sqlQuery name="GeneGffGoTerms" displayName="GO Terms" isCacheable="false">

           <testParamValues includeProjects="GiardiaDB">
               <paramValue name="source_id">GL50803_14842</paramValue>
           </testParamValues>
           <testParamValues includeProjects="PiroplasmaDB">
               <paramValue name="source_id">BBOV_IV008900</paramValue>
           </testParamValues>

            <column name="source_id"/>
            <column name="gene_source_id"/>
            <column name="project_id"/>
	    <column name="gff_go_id"/>
	    <column name="ontology"/>
                <sql>
                <![CDATA[
                SELECT DISTINCT ta.gene_source_id, ta.source_id, '@PROJECT_ID@' as project_id,
                       gts.go_id AS gff_go_id, gts.ontology
                FROM ApidbTuning.GoTermSummary gts, ApidbTuning.TranscriptAttributes ta
                WHERE gts.gene_source_id = ta.gene_source_id
                ORDER BY gts.ontology, gts.go_id
                ]]>
                </sql>
       </sqlQuery>

       <sqlQuery name="GeneGffDbxrefs" isCacheable="false">
            <column name="source_id"/>
            <column name="gene_source_id"/>
            <column name="project_id"/>
        <column name="gff_dbxref"/>
        <sqlParamValue name="brcName" includeProjects="PlasmoDB">ApiDB_PlasmoDB</sqlParamValue>
        <sqlParamValue name="brcName" includeProjects="CryptoDB">ApiDB_CryptoDB</sqlParamValue>
        <sqlParamValue name="brcName" includeProjects="ToxoDB">ApiDB_ToxoDB</sqlParamValue>
        <sqlParamValue name="brcName" includeProjects="FungiDB">FungiDB</sqlParamValue>
        <sqlParamValue name="brcName" includeProjects="GiardiaDB,TrichDB,EuPathDB,TriTrypDB,AmoebaDB,MicrosporidiaDB,HostDB,SchistoDB,InitDB,PiroplasmaDB">ApiDB</sqlParamValue>
        <sql>
          <![CDATA[
            SELECT source_id, gene_source_id, '@PROJECT_ID@' as project_id,
                   'taxon:' || ncbi_tax_id AS gff_dbxref
            FROM ApidbTuning.TranscriptAttributes
           UNION
            SELECT ta.source_id, ta.gene_source_id, '@PROJECT_ID@' as project_id,
                   'EC:' || ec.ec_number AS gff_dbxref
            FROM ApiDBTuning.TranscriptAttributes ta,
                 dots.translatedAaFeature taf, dots.Transcript t,
                 dots.aaSequenceEnzymeClass asec, sres.enzymeClass ec
            WHERE t.parent_id = ta.na_feature_id
              AND taf.na_feature_id = t.na_feature_id
              AND asec.aa_sequence_id = taf.aa_sequence_id
              AND ec.enzyme_class_id = asec.enzyme_class_id
           UNION
            SELECT ta.source_id, ta.gene_source_id, '@PROJECT_ID@' as project_id,
                   'NCBI_gi:' || dr.secondary_identifier AS gff_dbxref
            FROM ApiDBTuning.TranscriptAttributes ta, dots.DbRefNaFeature drnf,
                 sres.DbRef dr, sres.ExternalDatabaseRelease edr,
                 sres.ExternalDatabase ed
            WHERE ta.na_feature_id = drnf.na_feature_id
              AND drnf.db_ref_id = dr.db_ref_id
              AND dr.external_database_release_id
                    = edr.external_database_release_id
              AND edr.external_database_id = ed.external_database_id
              AND ed.name in ('NRDB_gb_dbXRefBySeqIdentity',
                              'NRDB_ref_dbXRefBySeqIdentity',
                              'NRDB_sp_dbXRefBySeqIdentity')
           UNION
            SELECT ta.source_id, ta.gene_source_id, '@PROJECT_ID@' as project_id,
                   'PDB:' || dr.primary_identifier AS gff_dbxref
            FROM dots.aafeature aaf, ApiDBTuning.TranscriptAttributes ta, dots.transcript t,
                 dots.DbRefaaFeature drnf,  sres.DbRef dr,
                 sres.ExternalDatabaseRelease edr, sres.ExternalDatabase ed
            WHERE ta.na_feature_id = t.parent_id
              AND t.na_feature_id = aaf.na_feature_id
              AND aaf.aa_feature_id = drnf.aa_feature_id
              AND drnf.db_ref_id = dr.db_ref_id
              AND dr.external_database_release_id = edr.external_database_release_id
              AND edr.external_database_id = ed.external_database_id
              AND ed.name in ('Predicted protein structures', 'Pf_predictedProteinStructures_RSRC')
           UNION
            SELECT DISTINCT ta.gene_source_id, ta.source_id, '@PROJECT_ID@' as project_id,
                   'Sanger:' || ta.source_id AS gff_dbxref
            FROM ApiDBTuning.TranscriptAttributes ta, dots.DbRefNaFeature drnf,
                 sres.DbRef dr, sres.ExternalDatabaseRelease edr,
                 sres.ExternalDatabase ed
            WHERE ta.na_feature_id = drnf.na_feature_id
              AND drnf.db_ref_id = dr.db_ref_id
              AND dr.external_database_release_id
                    = edr.external_database_release_id
              AND edr.external_database_id = ed.external_database_id
              AND ed.name like 'Sanger%'
           UNION
            SELECT ta.source_id, ta.gene_source_id, '@PROJECT_ID@' as project_id,
                   '&&brcName&&:' || ta.source_id AS gff_dbxref
            FROM ApiDBTuning.TranscriptAttributes ta
          ]]>
        </sql>
    </sqlQuery>

    <sqlQuery name="GeneGffRnas" isCacheable="false">
        <column name="source_id"/>
        <column name="gene_source_id"/>
        <column name="project_id"/>
        <column name="gff_seqid"/>
        <column name="gff_source"/>
        <column name="gff_type"/>
        <column name="gff_fstart"/>
        <column name="gff_fend"/>
        <column name="gff_score"/>
        <column name="gff_strand"/>
        <column name="gff_phase"/>
        <column name="gff_attr_id"/>
        <column name="gff_attr_name"/>
        <column name="gff_attr_description"/>
        <column name="gff_attr_size"/>
        <column name="gff_attr_parent"/>
        <column name="gff_protein_sequence"/>
        <sql>
            select ta.source_id, ta.gene_source_id, '@PROJECT_ID@' as project_id, 
                   ns.source_id as gff_seqid,
                   '@PROJECT_ID@' as gff_source,
                   decode(so.name,
                          'protein_coding', 'mRNA',
                          'repeat_region', 'mRNA',
                          'rRNA_encoding', 'rRNA',
                          'snRNA_encoding', 'snRNA',
                          'snoRNA_encoding', 'snRNA',
                          'tRNA_encoding', 'tRNA',
                          'non_protein_coding', 'transcript',
                          so.name) as gff_type,
                   least(nl.start_min, nl.end_max) as gff_fstart,
                   greatest(nl.start_min, nl.end_max) as gff_fend,
                   '.' as gff_score,
                   decode(nl.is_reversed, 1, '-', '+') as gff_strand,
                   '.' as gff_phase,
                   gf.source_id as gff_attr_parent,
                   'rna_' || rna.source_id as gff_attr_id,
                   rna.source_id as gff_attr_name,
                   rna.product as gff_attr_description,
                   (nl.end_max - nl.start_min + 1) as gff_attr_size,
                   protein.sequence as gff_protein_sequence
            from ApiDBTuning.TranscriptAttributes ta,
                 DoTS.GeneFeature gf,
                 DoTS.Transcript rna,
                 ApidbTuning.FeatureLocation nl,
                 DoTS.NaSequence ns,
                 sres.externaldatabase ed,
                 sres.externaldatabaserelease edr,
                 sres.OntologyTerm so,
                 (select ta.gene_source_id, tas.sequence
                  from ApiDBTuning.TranscriptAttributes ta, dots.TranslatedAaSequence tas
                  where ta.aa_sequence_id = tas.aa_sequence_id) protein
            where ta.gene_na_feature_id = gf.na_feature_id
                and gf.na_feature_id = rna.parent_id
                and gf.na_feature_id = nl.na_feature_id
                and nl.is_top_level = 1
                and ns.na_sequence_id = nl.na_sequence_id
                and rna.external_database_release_id = edr.external_database_release_id
                AND edr.external_database_id = ed.external_database_id
                and gf.sequence_ontology_id = so.ontology_term_id
                and gf.source_id = protein.gene_source_id(+)
            order by nl.start_min asc, nl.end_max asc
        </sql>
    </sqlQuery>



    <sqlQuery name="GenBankLocations" isCacheable="false">
        <column name="source_id"/>
	<column name="gene_source_id"/>
        <column name="project_id"/>
        <column name="start_min"/>
        <column name="end_max"/>
        <column name="is_reversed"/>
        <column name="type"/>
        <column name="sequence_source_id"/>
        <sql>
        select * from (
        select fl.project_id, ta.source_id, ta.gene_source_id, fl.start_min, fl.end_max, fl.is_reversed, 
        'gene' as type, sequence_source_id
        from ApidbTuning.FeatureLocation fl, ApidbTuning.TranscriptAttributes ta 
        where fl.feature_type = 'GeneFeature'
        and ta.gene_na_feature_id = fl.na_feature_id
        UNION
        select fl.project_id, ta.source_id, ta.gene_source_id, fl.start_min, fl.end_max, fl.is_reversed, 
        'exon' as type, fl.sequence_source_id 
        from ApidbTuning.FeatureLocation fl, ApidbTuning.TranscriptAttributes ta
        where ta.na_feature_id = fl.parent_id
        and fl.feature_type = 'ExonFeature'
        UNION
        select fl.project_id, ta.source_id, ta.gene_source_id, least(fl.coding_start, fl.coding_end) as start_min, 
        greatest(fl.coding_start, fl.coding_end) as end_max, fl.is_reversed, 'cds' as type, fl.sequence_source_id 
        from ApidbTuning.FeatureLocation fl, ApidbTuning.TranscriptAttributes ta
        where ta.na_feature_id = fl.parent_id
        and fl.feature_type = 'ExonFeature'
        )
        order by sequence_source_id, type, start_min
        </sql>
    </sqlQuery>

    <sqlQuery name="GeneGffCdss" isCacheable="false">
            <column name="source_id"/>
            <column name="gene_source_id"/>
            <column name="project_id"/>
        <column name="gff_seqid"/>
        <column name="gff_source"/>
        <column name="gff_type"/>
        <column name="gff_fstart"/>
        <column name="gff_fend"/>
        <column name="gff_score"/>
        <column name="gff_strand"/>
        <column name="gff_phase"/>
        <column name="gff_attr_id"/>
        <column name="gff_attr_name"/>
        <column name="gff_attr_description"/>
        <column name="gff_attr_size"/>
        <column name="gff_attr_parent"/>
        <sql>
            <![CDATA[
            select ns.source_id as gff_seqid,
                   '@PROJECT_ID@' as gff_source,
                   'CDS' as gff_type,
                   least(nl.coding_start, nl.coding_end) as gff_fstart,
                   greatest(nl.coding_start, nl.coding_end) as gff_fend,
                   '.' as gff_score,
                   decode(nl.is_reversed, 1, '-', '+') as gff_strand,
                   mod(3 - mod((select nvl(sum(greatest(ef2.coding_start, ef2.coding_end)
                                               - least(ef2.coding_start, ef2.coding_end) +1
                                               ), 0)
                        from dots.ExonFeature ef2
                        where parent_id = ef.parent_id
                          and order_number < ef.order_number), 3), 3) as gff_phase,
                   'rna_' || rna.source_id as gff_attr_parent,
                   'cds_' || ef.source_id as gff_attr_id,
                   'cds' as gff_attr_name,
                   '.' as gff_attr_description,
                   (nl.end_max - nl.start_min + 1) as gff_attr_size, 
                   gf.source_id, '@PROJECT_ID@' as project_id
            from ApiDBTuning.GeneAttributes ga,
                 DoTS.GeneFeature gf,
                 DoTS.Transcript rna,
                 DoTS.ExonFeature ef,
                 ApidbTuning.FeatureLocation nl,
                 DoTS.NaSequence ns,
                 sres.SequenceOntology so,
                 dots.RnaFeatureExon rfe
            where ga.na_feature_id = gf.na_feature_id
            and gf.na_feature_id = rna.parent_id
            and rna.na_feature_id = rfe.rna_feature_id
            and ef.na_feature_id = rfe.exon_feature_id
            and ef.na_feature_id = nl.na_feature_id
            and nl.is_top_level = 1
            and nl.na_sequence_id = ns.na_sequence_id
            and ef.coding_start is not null
            and ef.coding_start != -1
            and ef.coding_end is not null
            and ef.coding_end != -1
            and gf.sequence_ontology_id = so.sequence_ontology_id
            and so.term_name in ('protein_coding', 'repeat_region')
            order by ef.order_number
            ]]>
        </sql>
    </sqlQuery>


    <sqlQuery name="GeneGffExons" isCacheable="false">
            <column name="source_id"/>
            <column name="gene_source_id"/>
            <column name="project_id"/>
        <column name="gff_seqid"/>
        <column name="gff_source"/>
        <column name="gff_type"/>
        <column name="gff_fstart"/>
        <column name="gff_fend"/>
        <column name="gff_score"/>
        <column name="gff_strand"/>
        <column name="gff_phase"/>
        <column name="gff_attr_id"/>
        <column name="gff_attr_name"/>
        <column name="gff_attr_description"/>
        <column name="gff_attr_size"/>
        <column name="gff_attr_parent"/>
        <sql>
            <![CDATA[
            select ns.source_id as gff_seqid,
                   '@PROJECT_ID@' as gff_source,
                   'exon' as gff_type,
                   least(nl.start_min, nl.end_max) as gff_fstart,
                   greatest(nl.start_min, nl.end_max) as gff_fend,
                   '.' as gff_score,
                   decode(nl.is_reversed, 1, '-', '+') as gff_strand,
                   '.'  as gff_phase,
                   'rna_' || rna.source_id as gff_attr_parent,
                   'exon_' || ef.source_id as gff_attr_id,
                   ef.name as gff_attr_name,
                   ef.name as gff_attr_description,
                   (nl.end_max - nl.start_min + 1) as gff_attr_size, 
                   gf.source_id, '@PROJECT_ID@' as project_id
            from ApiDBTuning.GeneAttributes gf, 
                 DoTS.Transcript rna, 
                 DoTS.ExonFeature ef,
                 ApidbTuning.FeatureLocation nl, 
                 DoTS.NaSequence ns,
                 dots.RnaFeatureExon rfe
            where gf.na_feature_id = rna.parent_id
            and rna.na_feature_id = rfe.rna_feature_id
            and ef.na_feature_id = rfe.exon_feature_id
            and ef.na_feature_id = nl.na_feature_id
            and nl.is_top_level = 1
            and nl.na_sequence_id = ns.na_sequence_id
            order by ef.order_number
            ]]>
        </sql>
    </sqlQuery>
-->

  <!--===========================================================================-->
  <!--===========================================================================-->
  <!-- PlasmoDB exclusives  -->
  <!--===========================================================================-->
  <!--===========================================================================-->
 
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Interactions as prey -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="InteractionsAsPrey" isCacheable="false" includeProjects="PlasmoDB" doNotTest="1">

            <testParamValues includeProjects="PlasmoDB">
               <paramValue name="source_id">PF3D7_0102200</paramValue>
            </testParamValues>


            <column name="source_id"/>
            <column name="project_id"/>
            <column name="bait_start"/>
            <column name="bait_end"/>
            <column name="prey_start"/>
            <column name="prey_end"/>
            <column name="times_observed"/>
            <column name="number_of_searches"/>
            <column name="prey_number_of_baits"/>
            <sql>
            <![CDATA[
            SELECT pf.source_id, gi.bait_start, gi.bait_end, gi.prey_start,
                   gi.prey_end, gi.times_observed, gi.number_of_searches,
                   gi.prey_number_of_baits, '@PROJECT_ID@' as project_id
           FROM dots.GeneFeature bf, dots.GeneFeature pf,
                apidb.GeneInteraction gi
           WHERE pf.na_feature_id = gi.prey_gene_feature_id
             AND bf.na_feature_id = gi.bait_gene_feature_id
            ]]>
            </sql>
        </sqlQuery>

 
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Interactions as bait -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="InteractionsAsBait" isCacheable="false" includeProjects="PlasmoDB">

          <testParamValues includeProjects="PlasmoDB">
               <paramValue name="source_id">PF3D7_0102200</paramValue>
            </testParamValues>

            <column name="source_id"/>
            <column name="project_id"/>
            <column name="bait_start"/>
            <column name="bait_end"/>
            <column name="prey_start"/>
            <column name="prey_end"/>
            <column name="times_observed"/>
            <column name="number_of_searches"/>
            <column name="bait_number_of_preys"/>
            <sql>
            <![CDATA[
            SELECT bf.source_id, gi.bait_start, gi.bait_end, gi.prey_start,
                   gi.prey_end, gi.times_observed, gi.number_of_searches,
                   gi.bait_number_of_preys, '@PROJECT_ID@' as project_id
           FROM dots.GeneFeature bf, dots.GeneFeature pf,
                apidb.GeneInteraction gi
           WHERE pf.na_feature_id = gi.prey_gene_feature_id
             AND bf.na_feature_id = gi.bait_gene_feature_id
            ]]>
            </sql>
        </sqlQuery>

 
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Y2H interactions -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="Y2hInteractions" isCacheable="false" includeProjects="PlasmoDB,EuPathDB,FungiDB">

         <testParamValues includeProjects="PlasmoDB">
               <paramValue name="source_id">PF3D7_0102200</paramValue>
         </testParamValues>

         <column name="source_id"/>
         <column name="other_source_id"/>
         <column name="other_gene_source_id"/>
         <column name="project_id"/>
         <column name="bait_start"/>
         <column name="bait_end"/>
         <column name="prey_start"/>
         <column name="prey_end"/>
         <column name="times_observed" />
         <column name="number_of_searches"/>
         <column name="prey_number_of_baits"/>
         <column name="bait_number_of_preys"/>
         <column name="bait_or_prey"/>
         <sql>
            <![CDATA[
SELECT
  bf.source_id
, pf.source_id AS other_source_id
, bait_start
, bait_end
, prey_start
, prey_end
, times_observed
, number_of_searches
, NULL AS prey_number_of_baits
, bait_number_of_preys
, 'bait' AS bait_or_prey
, '@PROJECT_ID@' AS project_id
from
  ApidbTuning.geneAttributes bf
, ApidbTuning.geneAttributes pf
, apidb.GeneInteraction gi
WHERE
  bf.na_feature_id = gi.bait_gene_feature_id
  AND gi.prey_gene_feature_id = pf.na_feature_id
UNION
SELECT
  pf.source_id
, bf.source_id AS other_source_id
, bait_start
, bait_end
, prey_start
, prey_end
, times_observed
, number_of_searches
, prey_number_of_baits
, NULL AS bait_number_of_preys
, 'prey' AS bait_or_prey
, '@PROJECT_ID@' AS project_id
FROM
  apidbtuning.geneattributes bf
, ApidbTuning.GeneAttributes pf
, apidb.GeneInteraction gi
WHERE
  bf.na_feature_id = gi.bait_gene_feature_id
  AND gi.prey_gene_feature_id = pf.na_feature_id
           ]]>
        </sql>
      </sqlQuery>



       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Protein expression -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->


       <!-- TODO -->

       <!--
       <sqlQuery name="ProteinExpression" isCacheable="false" includeProjects="PlasmoDB,EuPathDB">

        <testParamValues includeProjects="PlasmoDB">
               <paramValue name="source_id">PBANKA_140060</paramValue>
            </testParamValues>

            <column name="source_id"/>
            <column name="project_id"/>
            <column name="profile_element"/>
            <column name="element_value"/>
            <sql>
            <![CDATA[
            SELECT REPLACE(pen.name, '_', ' ') as profile_element,
                   DECODE(pe.value, 1, 'yes', 'no') as element_value, 
                   p.source_id, '@PROJECT_ID@' as project_id
            FROM apidb.profileElementName pen,
                 apidb.profileElement pe,
                 apidb.profile p,
                 apidb.profileSet ps
            WHERE ps.name = 'berghei_proteomic_Sinden'
            AND ps.profile_set_id = p.profile_set_id
            AND ps.profile_set_id = pen.profile_set_id
            AND p.profile_id = pe.profile_id
            AND pen.profile_element_name_id = pe.profile_element_name_id
            ORDER BY pen.element_order
            ]]>
            </sql>
        </sqlQuery>
        -->
 
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- MR4 reagents -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="Mr4Reagents" isCacheable="false" includeProjects="PlasmoDB,EuPathDB">
            <column name="source_id"/>
            <column name="gene_source_id"/>
            <column name="project_id"/>
            <column name="atcc_number"/>
            <column name="reagent_type"/>
            <column name="remark"/>
            <sql>
            <![CDATA[
SELECT
  dbr.primary_identifier AS atcc_number
, dbr.secondary_identifier AS reagent_type
, dbr.remark
, ta.gene_source_id
, '@PROJECT_ID@' AS project_id
FROM
  apidbtuning.transcriptattributes ta
, dots.aafeature af
, dots.DbRefAAFeature df
, sres.dbref dbr
, sres.ExternalDatabaseRelease edr
, sres.externaldatabase ed
where
  ed.name = 'pfal3D7_dbxref_simple_gene2MR4Reagents_RSRC'
  and edr.external_database_id = ed.external_database_id
  and dbr.external_database_release_id = edr.external_database_release_id
  and dbr.db_ref_id = df.db_ref_id
  AND df.aa_feature_id = af.aa_feature_id  
  AND af.aa_sequence_id = ta.aa_sequence_id
ORDER BY
  dbr.secondary_identifier
, dbr.primary_identifier
            ]]>
            </sql>
        </sqlQuery>


       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- plasmo eQTL regions -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

     <sqlQuery name="Plasmo_eQTL_Span_List" isCacheable="false" includeProjects="PlasmoDB">
        <testParamValues includeProjects="PlasmoDB">
               <paramValue name="source_id">PF3D7_0300900</paramValue>
            </testParamValues>

            <column name="source_id"/>
            <column name="project_id"/>
            <column name="hapblock_id"/>
            <column name="start_min"/>
            <column name="end_max"/>
            <column name="start_max"/>
            <column name="end_min"/>
            <column name="sequence_id"/>
            <column name="lod_score"/>
            <column name="organism"/>
            <sql>
            <![CDATA[
SELECT
  e.gene_source_id as source_id
, e.project_id
, e.hapblock_id
, e.sequence_id
, e.start_min
, e.end_max
, e.start_max
, e.end_min
, e.organism
, TO_CHAR(e.lod_score, CASE
    WHEN lod_score BETWEEN 1 AND 10
    THEN '9.99'
    ELSE '99.99EEEE'
  END) AS lod_score
FROM
  apidbtuning.eqtlspan e
            ]]>
            </sql>
        </sqlQuery>


       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- so far for: plasmo version 8.2  AND toxo version 7.3 genes   -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- TODO  Not needed for 1st GUS 4 release-->
       <sqlQuery name="PreviousReleaseGenes" isCacheable="false" includeProjects="PlasmoDB,ToxoDB">
        <testParamValues includeProjects="PlasmoDB">
               <paramValue name="source_id">PF3D7_1319900</paramValue>
            </testParamValues>

	 <column name="source_id"/>
	 <column name="project_id"/>
	 <column name="old_source_id"/>
	 <column name="type"/>
	 <column name="value"/>
	 <sql>
	   <![CDATA[
            SELECT source_id as old_source_id, new_source_id as source_id, type, value, '@PROJECT_ID@' as project_id
            FROM (
              SELECT oa.source_id, toa.new_source_id, oa.type, oa.value
              FROM APIDB.oldannotation oa, APIDBTUNING.trackoldannotation toa
              WHERE toa.altered_ec>0
              AND oa.source_id = toa.old_source_id 
              AND oa.type = 'EC'
             UNION
              SELECT oa.source_id, toa.new_source_id, oa.type, oa.value
              FROM APIDB.oldannotation oa, APIDBTUNING.trackoldannotation toa
              WHERE toa.altered_go>0
              AND oa.source_id = toa.old_source_id 
              AND oa.type = 'GO'
             UNION
              SELECT oa.source_id, toa.new_source_id, oa.type, oa.value
              FROM APIDB.oldannotation oa, APIDBTUNING.trackoldannotation toa
              WHERE toa.altered_product>0
              AND oa.source_id = toa.old_source_id 
              AND oa.type = 'product'
             UNION
              SELECT oa.source_id, toa.new_source_id, 'Coding Sequence' as type, 'Different' as value
              FROM APIDB.oldcodingsequence oa, APIDBTUNING.trackoldannotation toa
              WHERE toa.altered_cds>0
              AND oa.source_id = toa.old_source_id 
             )
            ]]>
            </sql>
        </sqlQuery>


       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Antibody -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
<!-- TODO -->
       <sqlQuery name="Antibody" isCacheable="false" includeProjects="ToxoDB,CryptoDB">
            <testParamValues includeProjects="ToxoDB">
               <paramValue name="source_id">TGME49_255260</paramValue>
            </testParamValues>
            <testParamValues includeProjects="CryptoDB">
               <paramValue name="source_id">cgd6_5430</paramValue>
            </testParamValues>

            <column name="source_id"/>
            <column name="gene_source_id"/>
            <column name="project_id"/>
            <column name="bei_number"/>
            <column name="reagent_type"/>
            <column name="remark"/>
            <sql>
            <![CDATA[
                SELECT dbr.primary_identifier AS bei_number,
                       'Antibody' AS reagent_type,
                       dbr.remark, 
                       gf.source_id, '@PROJECT_ID@' as project_id
                FROM dots.GeneFeature gf,
                     dots.DbRefNAFeature df,
                     sres.DbRef dbr, sres.ExternalDatabaseRelease edr,
                     sres.ExternalDatabase ed
                WHERE df.na_feature_id = gf.na_feature_id
                  AND dbr.db_ref_id = df.db_ref_id
                  AND ed.name in ('tgonME49_dbxref_protein2EinsteinAntibodies_RSRC','cparIowaII_dbxref_protein2EinsteinAntibodies_RSRC')
                  AND edr.external_database_id = ed.external_database_id
                  AND dbr.external_database_release_id
                      = edr.external_database_release_id
                ORDER BY dbr.primary_identifier
            ]]>
            </sql>
        </sqlQuery>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- external database links -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="gene_dbrefs" 
                  isCacheable="false">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="dataset"/>
            <column name="link_url"/>
            <column name="ext_id"/>

            <sql>
               <![CDATA[
SELECT DISTINCT
  edd.dataset_presenter_display_name AS dataset
, ga.source_id
, '@PROJECT_ID@' AS project_id
, db.primary_identifier AS ext_id
, REPLACE(edr.id_url, 'EXTERNAL_ID_HERE', db.primary_identifier) AS link_url
FROM
   sres.dbref db
, DOTS.dbrefnafeature dbna
, apidbtuning.ExternalDbDatasetPresenter edd
, sres.externaldatabaserelease edr
, ApidbTuning.geneAttributes ga
WHERE
  db.external_database_release_id = edd.external_database_release_id
  AND edr.external_database_release_id = edd.external_database_release_id
  AND dbna.db_ref_id = db.db_ref_id
  AND ga.na_feature_id = dbna.na_feature_id
  AND lower(edd.dataset_presenter_name) NOT LIKE '%nrdb%'
  AND lower(edd.dataset_presenter_name) NOT LIKE '%nafeature_aliases%'
  AND edd.dataset_presenter_name NOT LIKE '%dbxref_simple_gene2HagaiPathway%'
  AND lower(edd.dataset_presenter_name) NOT LIKE '%pubmed%'
  ORDER BY edd.dataset_presenter_display_name
                ]]>
            </sql>
        </sqlQuery>





       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- protein database links -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- TODO -->
       <sqlQuery name="ProteinDatabase" 
                  isCacheable="false" includeProjects="FungiDB,PlasmoDB,EuPathDB">
            <column name="source_id"/>
            <column name="gene_source_id"/>
            <column name="project_id"/>
            <column name="accession"/>
            <column name="gi"/>
            <column name="dataset"/>
            <column name="accession_url"/>
            <column name="gi_url"/>
            <sql>
            <![CDATA[
                SELECT dr.primary_identifier AS accession,
                       dr.secondary_identifier AS gi,
                       DECODE(ed.name, 'NRDB_gb_dbXRefBySeqIdentity', 'GenBank',
                                       'NRDB_pdb_dbXRefBySeqIdentity',
                                           'Protein Data Bank',
                                       'NRDB_ref_dbXRefBySeqIdentity', 'RefSeq',
                                       'NRDB_sp_dbXRefBySeqIdentity',
                                           'Swiss-Prot',
                                       ed.name) AS dataset,
                       DECODE(ed.name, 'NRDB_gb_dbXRefBySeqIdentity',
                                         'http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?db=Protein&cmd=search&term='
                                         || dr.primary_identifier,
                                       'NRDB_pdb_dbXRefBySeqIdentity',
                                         'http://www.rcsb.org/pdb/navbarsearch.do?newSearch=yes&isAuthorSearch=no&radioset=All&inputQuickSearch='
                                         || dr.primary_identifier
                                         || '&image.x=0&image.y=0&image=Search',
                                       'NRDB_ref_dbXRefBySeqIdentity',
                                         'http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?db=Protein&cmd=search&term='
                                         || dr.primary_identifier,
                                       'NRDB_sp_dbXRefBySeqIdentity',
                                       'http://www.uniprot.org/uniprot/?query=' || dr.primary_identifier,
                                       ed.name) AS accession_url,
                       DECODE(ed.name, 'NRDB_gb_dbXRefBySeqIdentity',
                                         'http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=protein&val='
                                         || dr.secondary_identifier,
                                       'NRDB_pdb_dbXRefBySeqIdentity',
                                         'http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=protein&val='
                                         || dr.secondary_identifier,
                                       'NRDB_ref_dbXRefBySeqIdentity',
                                         'http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=protein&val='
                                         || dr.secondary_identifier,
                                       'NRDB_sp_dbXRefBySeqIdentity',
                                         'http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=protein&val='
                                         || dr.secondary_identifier,
                                       ed.name) AS gi_url, 
                       ta.source_id, ta.gene_source_id, '@PROJECT_ID@' as project_id
                FROM dots.GeneFeature gf, dots.DbRefNaFeature drnf,
                     sres.DbRef dr, sres.ExternalDatabaseRelease edr,
                     sres.ExternalDatabase ed, ApidbTuning.TranscriptAttributes ta
                WHERE gf.na_feature_id = drnf.na_feature_id
                  AND drnf.db_ref_id = dr.db_ref_id
                  AND dr.external_database_release_id
                        = edr.external_database_release_id
                  AND edr.external_database_id = ed.external_database_id
                  AND ed.name in ('NRDB_gb_dbXRefBySeqIdentity',
      /* gets its own section     'NRDB_pdb_dbXRefBySeqIdentity', */
                                  'NRDB_ref_dbXRefBySeqIdentity',
                                  'NRDB_sp_dbXRefBySeqIdentity')
                  AND gf.source_id = ta.gene_source_id
            ]]>
            </sql>
        </sqlQuery>

 
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- SGC 3D structure predictions                                --> 
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- TODO:  What is this??
        <sqlQuery name="SGC_3D_Struct" isCacheable="false" includeProjects="CryptoDB">

            <testParamValues>
               <paramValue name="source_id">cgd3_300</paramValue>
            </testParamValues>

            <column name="source_id"/>
            <column name="gene_source_id"/>
            <column name="project_id"/>
            <column name="pdb_id"/>
            <sql>
              <![CDATA[
            SELECT dr.primary_identifier AS pdb_id,
                   gf.source_id, '@PROJECT_ID@' AS project_id
            FROM dots.GeneFeature gf,
                 dots.DbRefNaFeature drnf,
                 sres.DbRef dr, sres.ExternalDatabaseRelease edr,
                 sres.ExternalDatabase ed
            WHERE gf.na_feature_id = drnf.na_feature_id
            AND drnf.db_ref_id = dr.db_ref_id
            AND dr.external_database_release_id = edr.external_database_release_id
            AND edr.external_database_id = ed.external_database_id
            AND ed.name = 'Structural Genomics Consortium 3D Structures'
            ORDER BY dr.primary_identifier
              ]]>
            </sql>
        </sqlQuery>
-->
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- 3D structure predictions -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <sqlQuery name="3dPreds"
                  isCacheable="false" includeProjects="PlasmoDB,EuPathDB">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="search_term"/>
            <column name="pdb_template"/>
            <column name="transcript_ids"/>
            <sql>
            <![CDATA[
SELECT
  ta.gene_source_id AS search_term
,  ta.gene_source_id AS source_id
, dr.primary_identifier AS pdb_template
, '@PROJECT_ID@' AS project_id
, listagg(ta.source_id, ', ') within GROUP(ORDER BY ta.source_id) AS transcript_ids
FROM
  dots.aafeature aaf
, dots.DbRefaaFeature drnf
, sres.DbRef dr
, sres.ExternalDatabaseRelease edr
, sres.ExternalDatabase ed
, ApidbTuning.TranscriptAttributes ta
WHERE
  aaf.aa_sequence_id = ta.aa_sequence_id
  AND aaf.aa_feature_id = drnf.aa_feature_id
  AND drnf.db_ref_id = dr.db_ref_id
  AND dr.external_database_release_id = edr.external_database_release_id
  AND edr.external_database_id = ed.external_database_id
  AND ed.name = 'pfal3D7_dbxref_simple_gene2PredictedProteinStructures_RSRC'
GROUP BY
  ta.gene_source_id
, dr.primary_identifier
            ]]>
            </sql>
        </sqlQuery>
 
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- PDB similarities -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!-- TODO:  check this one.  Tuning table should be transcript level -->
       <sqlQuery name="PdbSimilarities"
                  isCacheable="false">
            
            <testParamValues includeProjects="AmoebaDB">
               <paramValue name="source_id">EHI_011210</paramValue>
            </testParamValues>
            <testParamValues includeProjects="GiardiaDB">
               <paramValue name="source_id">GL50803_103887</paramValue>
            </testParamValues>

            <column name="source_id"/>
            <column name="transcript_id"/>
            <column name="project_id"/>
            <column name="pdb_chain"/>
            <column name="pdb_id"/>
            <column name="pvalue_mant"/>
            <column name="pvalue_exp"/>
            <column name="taxon"/>
            <column name="pdb_title"/>
            <column name="percent_identity"/>
            <column name="percent_plasmo_coverage"/>
            <sql>
            <![CDATA[
                SELECT ps.pdb_chain, ps.pdb_title, ps.pdb_id, ps.pvalue_mant,
                       ps.pvalue_exp, ps.taxon, ps.percent_identity,
                       ps.percent_plasmo_coverage, 
                       ta.source_id as transcript_id , ta.gene_source_id as source_id, '@PROJECT_ID@' as project_id
                FROM ApidbTuning.PdbSimilarity ps, ApidbTuning.TranscriptAttributes ta
                WHERE ps.source_id = ta.source_id
                ORDER BY ps.score DESC
            ]]>
            </sql>
        </sqlQuery>

 
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- annotation changes -->
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->


<!-- TODO -->
      <sqlQuery name="AnnotationChanges" isCacheable='false' includeProjects="PlasmoDB,TriTrypDB">

       <testParamValues includeProjects="AmoebaDB">
               <paramValue name="source_id">EHI_011210</paramValue>
            </testParamValues>

       <testParamValues includeProjects="PlasmoDB">
               <paramValue name="source_id">PBANKA_000020</paramValue>
            </testParamValues>

       <testParamValues includeProjects="TriTrypDB">
               <paramValue name="source_id">LbrM.08.0940</paramValue>
            </testParamValues>

       <column name="source_id"/>
            <column name="gene_source_id"/>
       <column name="project_id"/>
       <column name="change" />
       <column name="change_date" />
       <sql>
            <![CDATA[
          SELECT ga.source_id, '@PROJECT_ID@' AS project_id,
                 ac.change, to_char(ac.change_date, 'yyyy-mm-dd') as change_date
          FROM apidbTuning.AnnotationChange ac, ApidbTuning.GeneId gi, ApidbTuning.GeneAttributes ga
          WHERE ac.gene = gi.id
            AND gi.gene = ga.source_id
            AND gi.unique_mapping = 1
          ORDER BY ga.source_id, ac.change_date
        ]]>
       </sql>
    </sqlQuery>



  <!--===========================================================================-->
  <!--===========================================================================-->
  <!-- CryptoDB exclusives  -->
  <!--===========================================================================-->
  <!--===========================================================================-->


       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Protein IDs -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

        <!-- GeneTables.ProteinIds -->
<!-- 
       <sqlQuery name="ProteinIds" includeProjects="CryptoDB">
            <column name="protein_id"/>
            <sql>
            SELECT protein_id, '@PROJECT_ID@' as project_id
            FROM dots.transcript
            </sql>
        </sqlQuery>
-->

  <!--===========================================================================-->
  <!--===========================================================================-->
  <!-- GiardiaDB exclusives  -->
  <!--===========================================================================-->
  <!--===========================================================================-->


       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- GeneDepreciation - to keep track of gene (un)deprecation -->  
       <!--    Temporarily remove because not loaded in rebuild      -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

       <!-- sqlQuery name="GeneDeprecation" includeProjects="GiardiaDB">
	    <testParamValues includeProjects="GiardiaDB">
	      <paramValue name="source_id">GL50803_10871</paramValue>
	      <paramValue name="project_id">GiardiaDB</paramValue>
	    </testParamValues>

            <column name="source_id"/>
            <column name="gene_source_id"/>
            <column name="project_id"/>
            <column name="action"/>
            <column name="action_date"/>
            <column name="reason"/>
            <sql>
            SELECT gd.*, '@PROJECT_ID@' as project_id
            FROM apidb.geneDeprecation gd, ApidbTuning.GeneAttributes ga 
            WHERE ga.source_id = gd.source_id
            </sql>
        </sqlQuery-->
  <!--===========================================================================-->


       <sqlQuery name="PubMed">
         <testParamValues includeProjects="PlasmoDB">
           <paramValue name="source_id">PF3D7_0523000</paramValue>
         </testParamValues>
         <testParamValues includeProjects="ToxoDB">
           <paramValue name="source_id">TGME49_220400</paramValue>
         </testParamValues>

         <column name="source_id"/>
         <column name="project_id"/>
         <column name="pubmed_id"/>
         <column name="doi"/>
         <column name="title"/>
         <column name="authors"/>
         <sql>
           <![CDATA[
                    select gene_source_id as source_id,  project_id, pubmed_id, doi, title, authors
                    from ApidbTuning.GenePubmed
           ]]>
         </sql>
       </sqlQuery>

  <!--===========================================================================-->
  <!--======================Metabolic Pathways - Enzymes Compounds Table=================-->
  <!--===========================================================================-->

      <sqlQuery name="CompoundsFromMetabolicPathways" excludeProjects="EuPathDB">
            <testParamValues includeProjects="PlasmoDB">
               <paramValue name="source_id">PF3D7_1435300</paramValue>
            </testParamValues>

            <column name="source_id"/>
            <column name="project_id"/>
            <column name="pathway_source"/>
            <column name="reaction_source_id"/>
            <column name="reaction_url"/>
            <column name="enzyme"/>
            <column name="expasy_url"/>
            <column name="equation"/>
            <column name="equation_text"/>
            <column name="reversible"/>
            <column name="substrates_text"/>
            <column name="products_text"/>
            <column name="pathways"/>
            <sql>
            <![CDATA[
            SELECT DISTINCT source_id
            , project_id
            , pathway_source
            , reaction_source_id
            , reaction_url
            , enzyme
            , expasy_url
            , equation
            , equation_text
            , reversible
            , substrates_text
            , products_text
            , count(name) as pathways
            FROM ( 
                select distinct ta.GENE_SOURCE_ID as source_id
                , ta.PROJECT_ID
                , pa.PATHWAY_SOURCE
                , pr.REACTION_SOURCE_ID
                , pr.REACTION_URL
                , pr.ENZYME
                , pr.EXPASY_URL
                , pr.EQUATION_HTML as equation
                , pr.EQUATION_text as equation_text
                , decode (pr.IS_REVERSIBLE, '1', 'Y', '0', 'N') as reversible
                , pr.SUBSTRATES_TEXT
                , pr.PRODUCTS_TEXT
                , pa.NAME
                from apidbtuning.transcriptattributes ta
                , apidbtuning.pathwayattributes pa
                , apidbtuning.pathwaycompounds pc
                , apidbtuning.pathwayreactions pr
                , apidbtuning.transcriptpathway tp
                where ta.GENE_SOURCE_ID = tp.GENE_SOURCE_ID
                and tp.EC_NUMBER like replace(pr.ENZYME, '-', '%')
                and pr.REACTION_ID = pc.REACTION_ID
                and pr.EXT_DB_NAME = pc.EXT_DB_NAME
                and pr.EXT_DB_VERSION = pc.EXT_DB_VERSION
                and pc.PATHWAY_ID = pa.PATHWAY_ID
                and tp.PATHWAY_ID = pa.PATHWAY_ID
            )
            GROUP BY source_id, project_id, pathway_source, reaction_source_id, reaction_url, enzyme, expasy_url, equation, equation_text, reversible, substrates_text, products_text
            order by pathways desc, reaction_source_id, pathway_source
            ]]>
           </sql>
        </sqlQuery>

          <!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
          <!-- MetaTable: given a table above, the metatable tells us to which organisms apply (if 0, it applies to all)-->  
          <!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
          <sqlQuery name="MetaTable" isCacheable="false" excludeProjects="EuPathDB">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="target_name"/>
            <column name="target_type"/>
            <column name="organisms"/>

            <sql>
            <![CDATA[
            SELECT
              ga.source_id,
              '@PROJECT_ID@' as project_id,
              target_name,
              target_type,
              listagg(ta.name, ', ') within group (order by ta.name) as organisms
            FROM
            ( select distinct dmr.target_name, dmr.target_type, tn.name
              FROM ApidbTuning.DatasetNameTaxon dt, ApidbTuning.DatasetModelRef dmr,sres.TaxonName tn
              WHERE dt.dataset_presenter_id = dmr.dataset_presenter_id
                and (dmr.target_type = 'table' or dmr.target_type = 'attribute')
                and  dmr.record_type like 'GeneRecordClasses.GeneRecordClass'
                and dt.taxon_id = tn.taxon_id(+)
                and (tn.name_class is null or tn.name_class = 'scientific name')
            ) ta
            , apidbtuning.GeneAttributes ga
            GROUP BY ga.source_id, target_name, target_type
            ORDER BY ga.source_id,target_name

             ]]>
            </sql>
          </sqlQuery>

          <sqlQuery name="ProteinProperties" isCacheable="false" excludeProjects="EuPathDB">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="lc_project_id"/>
            <column name="transcript_id"/>
            <column name="isoelectric_point"/>
            <column name="molecular_weight"/>
            <column name="has_signalp"/>
            <column name="has_tmhmm"/>
            <column name="protein_length"/>
            <sql>
            <![CDATA[
SELECT
  gene_source_id as source_id
, transcript_source_id AS transcript_id
, isoelectric_point
, molecular_weight
, project_id
, lower(project_id) as lc_project_id
, case when signalp_peptide is null then 'no' else 'yes' end as has_signalp
, case when tm_count > 0 then 'yes' else 'no' end as has_tmhmm
, protein_length
FROM
  apidbtuning.proteinattributes
ORDER BY
  transcript_source_id
             ]]>
            </sql>
          </sqlQuery>



          <sqlQuery name="ProteinExpressionPBrowse" isCacheable="false" excludeProjects="EuPathDB">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="lc_project_id"/>
            <column name="transcript_id"/>
            <column name="protein_gtracks"/>
            <column name="sum_sequence_count"/>
            <column name="unique_sequence_count"/>
            <column name="sum_spectrum_count"/>
            <column name="sample_count"/>
            <sql>
            <![CDATA[
SELECT
  ta.source_id as transcript_id
, ta.gene_source_id as source_id
, ta.project_id
, lower(ta.project_id) as lc_project_id
, (apidb.tab_to_string( SET(CAST(collect(track_names ORDER BY order_num, track_names) AS apidb.varchartab)), '%1E')) AS protein_gtracks
, mssum.sum_sequence_count
, mssum.unique_sequence_count
, mssum.sum_spectrum_count
, mssum.sample_count
FROM
  (select
    'MassSpecPeptides_' ||dsp.name AS track_names
  , ga.source_id
  , '1' AS order_num
  FROM
    apidb.datasource ds
  , apidbtuning.datasetpresenter dsp
  , APIDB.massspecsummary mss
  , SRES.externaldatabase ed
  , sres.externaldatabaserelease edr
  , APIDBTUNING.transcriptattributes ga
  WHERE
    (
      ds.name LIKE dsp.dataset_name_pattern
      OR ds.name = dsp.name
    )
    AND ds.name LIKE '%_massSpec_%'
    AND ds.type = 'protein_expression'
    AND mss.external_database_release_id = edr.external_database_release_id
    AND edr.external_database_id = ed.external_database_id
    AND ed.name = ds.name
    AND ga.aa_sequence_id = mss.aa_sequence_id
  UNION
  SELECT
    'UnifiedPostTraslationalMod' AS track_names
  , source_id
  , '2' AS order_num
  FROM
    APIDBTUNING.MSModifiedPeptideSummary
  ) tracks
,(SELECT
    source_id
  , COUNT(mps.peptide_sequence) AS sum_sequence_count
  , COUNT(DISTINCT mps.peptide_sequence) AS unique_sequence_count
  , SUM(mps.spectrum_count) AS sum_spectrum_count
  , COUNT(DISTINCT mps.sample) AS sample_count
  FROM
    apidbtuning.mspeptidesummary mps
  GROUP BY
    source_id
  ) mssum
, apidbtuning.transcriptattributes ta
WHERE
  ta.source_id = tracks.source_id
  AND ta.source_id = mssum.source_id
GROUP BY
  ta.source_id
, ta.gene_source_id
, ta.project_id
, mssum.sum_sequence_count
, mssum.unique_sequence_count
, mssum.sum_spectrum_count
, mssum.sample_count
             ]]>
            </sql>
          </sqlQuery>


          <sqlQuery name="Taxonomy" isCacheable="false" excludeProjects="EuPathDB">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="name"/>
            <column name="ncbi_tax_id"/>
            <column name="rank"/>
            <sql>
            <![CDATA[
SELECT
  ga.source_id
, ga.project_id
, t.name
, t.ncbi_tax_id
, t.rank
FROM
  ApidbTuning.Taxonomy t
, ApidbTuning.GeneAttributes ga
WHERE
  t.organism = ga.organism
ORDER BY
  ordernum DESC
             ]]>
            </sql>
          </sqlQuery>


          <sqlQuery name="Sequences" isCacheable="false" excludeProjects="EuPathDB">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="transcript_id"/>
            <column name="transcript_length"/>
            <column name="protein_length"/>
            <column name="gen_rel_intron_utr_coords"/>
            <column name="five_prime_utr_coords"/>
            <column name="three_prime_utr_coords"/>
            <column name="transcript_sequence"/>
            <column name="protein_sequence"/>
            <column name="genomic_sequence"/>
            <column name="genomic_sequence_length"/>
            <sql>
            <![CDATA[
SELECT
  ta.gene_source_id as source_id
, ta.source_id as transcript_id
, ta.project_id
, ta.length as transcript_length
, ta.protein_length
, iuc.gen_rel_intron_utr_coords
, case when ta.five_prime_utr_length > 0 
       then '[1,' || (ta.five_prime_utr_length) || ']'
       else null
  end as five_prime_utr_coords
, case when ta.three_prime_utr_length > 0 
       then '[' || (ta.length - ta.three_prime_utr_length + 1) || ',' || ta.length || ']'
       else null
  end as three_prime_utr_coords
, sns.sequence as transcript_sequence
, ps.sequence as protein_sequence
, CASE
    WHEN tl.is_reversed = 1
    THEN
      apidb.reverse_complement_clob(substr(nas.sequence, tl.start_min, tl.end_max - tl.start_min + 1))
    ELSE
      substr(nas.sequence, tl.start_min, tl.end_max - tl.start_min + 1)
  END AS genomic_sequence
, tl.end_max - tl.start_min + 1 as genomic_sequence_length
FROM
  apidbtuning.transcriptattributes ta
, apidbtuning.IntronUtrCoords iuc
, dots.transcript t
, dots.splicednasequence sns
, apidbtuning.proteinsequence ps
, dots.nasequence nas
, apidbtuning.transcriptlocation tl
where ta.na_feature_id = t.na_feature_id
and t.na_sequence_id = sns.na_sequence_id
and ta.protein_source_id = ps.source_id (+)
and nas.source_id = ta.sequence_id
and ta.na_feature_id = tl.na_feature_id
and tl.is_top_level = 1
and ta.na_feature_id = iuc.na_feature_id(+)
             ]]>
            </sql>
          </sqlQuery>


          <sqlQuery name="ExpressionGraphsDataTable" isCacheable="false" excludeProjects="EuPathDB">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="dataset_id"/>
            <!--column name="profile_set_display_name"/-->
            <column name="sample_name"/>
            <column name="value"/>
            <column name="standard_error"/>
            <column name="percentile_channel1"/>
            <column name="percentile_channel2"/>
            <sql>
            <![CDATA[
SELECT ggp.source_id 
, d.dataset_id
, d.sample_name
, d.value
, d.standard_error
, d.percentile_channel1
, d.percentile_channel2
, '@PROJECT_ID@' AS project_id
FROM apidbTuning.ExpressionGraphsData d, apidbTuning.DatasetNameTaxon dp,
     apidbTuning.GeneGroupProfile ggp
WHERE dp.dataset_presenter_id = d.dataset_id
  AND dp.name = ggp.dataset_name
  AND ggp.profile_graph_id = d.source_id
ORDER BY dataset_id
             ]]>
            </sql>
          </sqlQuery>




          <sqlQuery name="PhenotypeGraphsDataTable" isCacheable="false" excludeProjects="EuPathDB">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="dataset_id"/>
            <!--column name="profile_set_display_name"/-->
            <column name="sample_name"/>
            <column name="value"/>
            <column name="percentile_channel1"/>
            <sql>
            <![CDATA[
select ggp.source_id 
, '@PROJECT_ID@' as project_id
, dnt.dataset_presenter_id as dataset_id
, nvl(psdi.profile_set_display_name, ps.name) as profile_set_display_name
, smpl.protocol_app_node_name as sample_name
, round(nfe.value, 2) as value
, round(nfe.percentile_channel1, 2) as percentile_channel1
from results.nafeatureexpression nfe
 , apidbtuning.geneattributes ga
 , study.protocolappnode pan
 , study.studylink sl
 , study.study ps
 , study.study i
 , sres.externaldatabaserelease r
 , sres.externaldatabase d
 , apidbtuning.profilesetdisplayinfo psdi
 , apidbtuning.datasetnametaxon dnt
 , apidbtuning.genegroupprofile ggp
 , apidbtuning.profilesamples smpl
where ga.na_feature_id = nfe.na_feature_id
and ggp.profile_graph_id = ga.source_id
and d.name = ggp.dataset_name
and nfe.protocol_app_node_id = pan.protocol_app_node_id
and pan.protocol_app_node_id = sl.protocol_app_node_id
and sl.study_id = ps.study_id
and ps.investigation_id = i.study_id
and i.external_database_release_id = r.external_database_release_id
and r.external_database_id = d.external_database_id
and ps.name = psdi.profile_set_name (+)
and d.name = dnt.name
and dnt.dataset_presenter_id = 'DS_3f5188c7a8' -- this is the TriTryp RNASeq phenotype dataset id
and ps.study_id = smpl.study_id
and smpl.protocol_app_node_id = pan.protocol_app_node_id
and smpl.profile_type = 'values'
order by smpl.node_order_num
             ]]>
            </sql>
          </sqlQuery>









          <sqlQuery name="HostResponseGraphsDataTable" isCacheable="false" includeProjects="PlasmoDB">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="dataset_id"/>
            <column name="profile_set_display_name"/>
            <column name="sample_name"/>
            <column name="value"/>
            <sql>
            <![CDATA[
select ggp.source_id 
, '@PROJECT_ID@' as project_id
, dnt.dataset_presenter_id as dataset_id
, nvl(psdi.profile_set_display_name, ps.name) as profile_set_display_name
, pan.name as sample_name
, round(nfe.value, 2) as value
from results.nafeaturehostresponse nfe
 , apidbtuning.geneattributes ga
 , study.protocolappnode pan
 , study.studylink sl
 , study.study ps
 , study.study i
 , sres.externaldatabaserelease r
 , sres.externaldatabase d
 , apidbtuning.profilesetdisplayinfo psdi
 , apidbtuning.datasetnametaxon dnt
 , apidbtuning.genegroupprofile ggp
where ga.na_feature_id = nfe.na_feature_id
and ggp.profile_graph_id = ga.source_id
and d.name = ggp.dataset_name
and nfe.protocol_app_node_id = pan.protocol_app_node_id
and pan.protocol_app_node_id = sl.protocol_app_node_id
and sl.study_id = ps.study_id
and ps.investigation_id = i.study_id
and i.external_database_release_id = r.external_database_release_id
and r.external_database_id = d.external_database_id
and ps.name = psdi.profile_set_name (+)
and d.name = dnt.name
             ]]>
            </sql>
          </sqlQuery>




          <sqlQuery name="CrisprPhenotypeGraphsDataTable" isCacheable="false" includeProjects="ToxoDB">
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="dataset_id"/>
            <column name="profile_set_display_name"/>
            <column name="sample_name"/>
            <column name="phenotype_score"/>
            <column name="standard_error"/>
            <column name="gene_fdr"/>
            <sql>
            <![CDATA[
select ggp.source_id
, '@PROJECT_ID@' as project_id
, dnt.dataset_presenter_id as dataset_id
, nvl(psdi.profile_set_display_name, ps.name) as profile_set_display_name
, pan.name as sample_name
, round(cp.mean_phenotype, 2) as phenotype_score
, round(cp.standard_error, 4) as standard_error
, round(cp.gene_fdr, 4) as gene_fdr
from apidb.crisprphenotype cp
 , apidbtuning.geneattributes ga
 , study.protocolappnode pan
 , study.studylink sl
 , study.study ps
 , study.study i
 , sres.externaldatabaserelease r
 , sres.externaldatabase d
 , apidbtuning.profilesetdisplayinfo psdi
 , apidbtuning.datasetnametaxon dnt
 , apidbtuning.genegroupprofile ggp
where ga.na_feature_id = cp.na_feature_id
and ggp.profile_graph_id = ga.source_id
and d.name = ggp.dataset_name
and cp.protocol_app_node_id = pan.protocol_app_node_id
and pan.protocol_app_node_id = sl.protocol_app_node_id
and sl.study_id = ps.study_id
and ps.investigation_id = i.study_id
and i.external_database_release_id = r.external_database_release_id
and r.external_database_id = d.external_database_id
and ps.name = psdi.profile_set_name (+)
and d.name = dnt.name
             ]]>
            </sql>
          </sqlQuery>





   </querySet>
</wdkModel>
