<wdkModel>
    <querySet name="SnpTables" queryType="table" includeProjects="ToxoDB,PlasmoDB,CryptoDB,EuPathDB,AmoebaDB,TriTrypDB">


      <defaultTestParamValues includeProjects="PlasmoDB">
         <paramValue name="source_id">CombinedSNP.MAL13.6332</paramValue>
         <paramValue name="project_id">PlasmoDB</paramValue>
      </defaultTestParamValues>

      <defaultTestParamValues includeProjects="ToxoDB">
         <paramValue name="source_id">SNP_TGME49_chrVI_485196</paramValue>
         <paramValue name="project_id">ToxoDB</paramValue>
      </defaultTestParamValues>

      <defaultTestParamValues includeProjects="CryptoDB">
         <paramValue name="source_id">chr3-2_66329</paramValue>
         <paramValue name="project_id">CryptoDB</paramValue>
      </defaultTestParamValues>

      <defaultTestParamValues includeProjects="TriTrypDB">
         <paramValue name="source_id">NGS_SNP.Tb927_01_v4.36382</paramValue>
         <paramValue name="project_id">TriTrypDB</paramValue>
      </defaultTestParamValues>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Strains for sequencing SNPs -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

        <sqlQuery name="Strains" includeProjects="ToxoDB,PlasmoDB,CryptoDB,AmoebaDB,TriTrypDB" 
              isCacheable="false">
            <column name="source_id" />
            <column name="project_id" />
            <column name="strain"/>
            <column name="allele"/>
            <column name="allele_gene_strand"/>
            <column name="phenotype"/>
            <column name="product"/>
            <sql>
            <![CDATA[
SELECT snp.source_id, 
       '@PROJECT_ID@' AS project_id,
       CASE WHEN var.strain = 'iowa_II' THEN 'IOWA II'
            WHEN var.strain = 'md' THEN 'MD'
            WHEN var.strain = 'tu114' THEN 'TU114'
       ELSE var.strain
       END as strain,
       CASE WHEN snp.gene_strand = 'reverse' THEN apidb.reverse_complement(var.allele) 
            WHEN snp.gene_source_id is null THEN ''
       ELSE var.allele 
       END as allele_gene_strand,
       var.allele,
       var.phenotype, 
       var.product
FROM   ApiDBTuning.SnpAttributes snp, 
       DoTS.SeqVariation var, 
       DoTS.SnpFeature sf, 
       DoTS.NALocation l, 
       DoTS.NASequence s
WHERE  var.parent_id = snp.na_feature_id
   AND sf.na_feature_id = snp.na_feature_id
   AND l.na_feature_id = sf.na_feature_id
   AND s.na_sequence_id = sf.na_sequence_id
ORDER BY var.strain
             ]]>
           </sql>
        </sqlQuery>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Strains for HTS SNPs -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

        <sqlQuery name="HTSStrains" includeProjects="AmoebaDB,TriTrypDB" 
              isCacheable="false">
            <column name="source_id" />
            <column name="project_id" />
            <column name="strain"/>
            <column name="allele"/>
            <column name="allele_gene_strand"/>
            <column name="phenotype"/>
            <column name="product"/>
            <column name="coverage"/>
            <column name="pvalue"/>
            <column name="allele_percent"/>
            <column name="view_align"/>
            <column name="has_align"/>
            <sql>
            <![CDATA[
       SELECT snp.source_id, '@PROJECT_ID@' AS project_id, var.strain,
                 var.allele,
                 CASE WHEN snp.gene_strand = 'reverse' THEN apidb.reverse_complement(var.allele) 
                      WHEN snp.gene_source_id is null THEN ''
                      ELSE var.allele END as allele_gene_strand,
                 var.phenotype, var.product,
                 var.coverage, var.allele_percent, var.pvalue,
                 CASE WHEN var.coverage is null THEN ''
                 ELSE lower(snp.project_id) || 
                      '/?name=' || nas.source_id || ':' || to_char(l.start_min - 50) || '..' || to_char(l.start_min + 50) || 
                      ';l=' || 
                      CASE 
                        WHEN snp.project_id = 'ToxoDB' 
                          THEN snp.reference_strain || '_CoverageDensity%1E' || snp.reference_strain || '_CoverageXyplot%1E' || snp.reference_strain || '_Alignment%1E' 
                          ELSE  
                            CASE WHEN snp.reference_strain = 'Non-Esmeraldo-like' 
                                 THEN 'P_' || var.strain || '_CoverageDensity%1E' || 'P_' || var.strain  || '_CoverageXyplot%1E' || 'P_' || var.strain || '_Alignment%1E'
                                 WHEN (snp.reference_strain = 'Esmeraldo-%' OR snp.reference_strain = 'CL-Brener')
                                 THEN 'S_' || var.strain || '_CoverageDensity%1E' || 'S_' || var.strain  || '_CoverageXyplot%1E' || 'S_' || var.strain || '_Alignment%1E' 
                                 ELSE  var.strain || '_CoverageDensity%1E' || var.strain  || '_CoverageXyplot%1E' || var.strain || '_Alignment%1E' 
                             END 
                          END   ||
                      ';h_region=' || nas.source_id || ':' || to_char(l.start_min) || '..' || to_char(l.start_min + 1) || '@red'  END as view_align,
                 CASE WHEN var.coverage is null THEN '' ELSE 'view alignment' END as has_align
       FROM  apidbtuning.SnpAttributes snp, 
             dots.SeqVariation var, 
             dots.snpfeature sf, 
             dots.nalocation l, 
             dots.nasequence nas
       WHERE var.parent_id = snp.na_feature_id
         AND sf.na_feature_id = snp.na_feature_id
         AND l.na_feature_id = sf.na_feature_id
         AND nas.na_sequence_id = sf.na_sequence_id
        ORDER BY var.strain
             ]]>
           </sql>
        </sqlQuery>

        <sqlQuery name="HTSStrains" includeProjects="PlasmoDB,CryptoDB,ToxoDB" 
              isCacheable="false">

           <testParamValues includeProjects="CryptoDB">
               <paramValue name="source_id">NGS_SNP.AAEE01000002.1096761</paramValue>
            </testParamValues>
            <column name="source_id" />
            <column name="project_id" />
            <column name="strain"/>
            <column name="allele"/>
            <column name="allele_gene_strand"/>
            <column name="phenotype"/>
            <column name="product"/>
            <column name="coverage"/>
            <column name="pvalue"/>
            <column name="allele_percent"/>
            <column name="view_align"/>
            <column name="has_align"/>
            <column name="isolate_source_id"/>
            <sql>
            <![CDATA[
SELECT snp.source_id, '@PROJECT_ID@' AS project_id,
       b.source_id as isolate_source_id,
       var.strain as strain,
       var.allele,
       CASE WHEN snp.gene_strand = 'reverse' THEN apidb.reverse_complement(var.allele) 
            WHEN snp.gene_source_id is null THEN ''
            ELSE var.allele 
       END as allele_gene_strand,
       var.phenotype, 
       var.product,
       var.coverage, 
       var.allele_percent,
       var.pvalue,
       CASE WHEN b.source_id is null THEN ''
            ELSE lower(snp.project_id) || 
              '/?name=' || nas.source_id || ':' || to_char(l.start_min - 50) || '..' || to_char(l.start_min + 50) || 
              ';l=' || s.name || '_' || var.strain || '_CoverageDensity%1E' || 
                       s.name || '_' || var.strain || '_CoverageXyplot%1E' || 
                       s.name || '_' || var.strain || '_Alignment%1E' ||
              ';h_region=' || nas.source_id || ':' || to_char(l.start_min) || '..' || to_char(l.start_min + 1) || '@red'  
       END as view_align,
       CASE WHEN b.source_id is null THEN '' ELSE 'view alignment' END as has_align
FROM   apidbtuning.SnpAttributes snp, 
      dots.SeqVariation var, 
      study.study s, 
      rad.studybiomaterial sb, 
      study.biomaterial b, 
      dots.snpfeature sf, 
      dots.nalocation l, 
      dots.nasequence nas
WHERE var.parent_id = snp.na_feature_id
 AND sf.na_feature_id = snp.na_feature_id
 AND l.na_feature_id = sf.na_feature_id
 AND nas.na_sequence_id = sf.na_sequence_id
 AND var.external_database_release_id = b.external_database_release_id(+)
 AND b.bio_material_id = sb.bio_material_id(+)
 AND sb.study_id = s.study_id(+)
ORDER BY var.strain
             ]]>
           </sql>
        </sqlQuery>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Providers -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

        <sqlQuery name="Providers" includeProjects="ToxoDB,PlasmoDB,CryptoDB,AmoebaDB,TriTrypDB" 
               isCacheable="false">
            <column name="source_id" />
            <column name="project_id" />
            <column name="source_id_link"/>
            <column name="name"/>
            <sqlParamValue name="name" includeProjects="ToxoDB,PlasmoDB,CryptoDB">
                      DECODE(ed.name, 'InsertSnps.pm NGS SNPs INTERNAL', 'HTS SNPs', dsa.display_name)
            </sqlParamValue>
            <sqlParamValue name="name" includeProjects="AmoebaDB,TriTrypDB">
                      DECODE(ed.name, 'InsertSnps.pm NGS SNPs INTERNAL', 'HTS SNPs', ed.name)
            </sqlParamValue>
            <sqlParamValue name="filter" includeProjects="PlasmoDB">
                and sb.source_id != sa.source_id
            </sqlParamValue>
            <sqlParamValue name="filter" includeProjects="ToxoDB,CryptoDB,AmoebaDB,TriTrypDB">
            </sqlParamValue>

            <sql includeProjects="ToxoDB,PlasmoDB,CryptoDB">
            <![CDATA[
               SELECT sa.source_id, '@PROJECT_ID@' AS project_id,
               sb.source_id as source_id_link,
               &&name&& as name
               FROM  dots.SnpFeature sa, dots.snpfeature sb, dots.nalocation la, dots.nalocation lb,
                     sres.externaldatabase ed, sres.externaldatabaserelease edr,
                      apidbtuning.DatasetPresenter dsa
               WHERE sa.na_feature_id = la.na_feature_id
                and sb.na_feature_id = lb.na_feature_id
                and sa.na_sequence_id = sb.na_sequence_id
                and la.start_min = lb.start_min
                &&filter&&
                and sb.external_database_release_id = edr.external_database_release_id
                and edr.external_database_id = ed.external_database_id
                and ed.name = dsa.name
             ]]>
           </sql>

            <sql includeProjects="AmoebaDB,TriTrypDB">
            <![CDATA[
               SELECT sa.source_id, '@PROJECT_ID@' AS project_id,
               sb.source_id as source_id_link,
               &&name&& as name
               FROM  dots.SnpFeature sa, dots.snpfeature sb, dots.nalocation la, dots.nalocation lb,
                     sres.externaldatabase ed, sres.externaldatabaserelease edr
               WHERE sa.na_feature_id = la.na_feature_id
                and sb.na_feature_id = lb.na_feature_id
                and sa.na_sequence_id = sb.na_sequence_id
                and la.start_min = lb.start_min
                &&filter&&
                and sb.external_database_release_id = edr.external_database_release_id
                and edr.external_database_id = ed.external_database_id
             ]]>
           </sql>
        </sqlQuery>

       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
       <!-- Isolates -->  
       <!--++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

        <sqlQuery name="isolates" includeProjects="PlasmoDB" 
              isCacheable="false">

           <testParamValues includeProjects="PlasmoDB">
               <paramValue name="source_id">CombinedSNP.MAL2.3180</paramValue>
            </testParamValues>

            <column name="source_id" />
            <column name="project_id" />
            <column name="isolate_id"/>
            <column name="assay_type"/>
            <column name="strain"/>
            <column name="country"/>
            <column name="allele"/>
            <sql>
            <![CDATA[
              select isnp.snp_source_id AS source_id, '@PROJECT_ID@' AS project_id,
              atr.SOURCE_ID as isolate_id, atr.strain as strain, atr.geographic_location as country, 
              isnp.allele, atr.DATA_TYPE as assay_type
              from ApidbTuning.IsolateAttributes atr, ApidbTuning.IsolateSNPs isnp
              where isnp.is_source_id = atr.SOURCE_ID
              order by atr.geographic_location,atr.strain
            ]]>
           </sql>
        </sqlQuery>


        <sqlQuery name="isolatesAlleleFrequency" includeProjects="PlasmoDB" 
              isCacheable="false">

           <testParamValues includeProjects="PlasmoDB">
               <paramValue name="source_id">CombinedSNP.MAL2.3180</paramValue>
            </testParamValues>

            <column name="source_id" />
            <column name="project_id" />
            <column name="allele"/>
            <column name="frequency"/>
            <sql>
            <![CDATA[
                 select s.snp_source_id as source_id, '@PROJECT_ID@' as project_id,
                         s.allele, to_char(s.ct/t.tot, '0.99') as frequency
                 from (
                       select snp_source_id,allele,count(*) as ct
                       from ApidbTuning.IsolateSNPs
                       where  allele in ('A','C','G','T')
                       group by snp_source_id,allele
                       ) s,
                       (
                       select snp_source_id, count(*) as tot
                       from ApidbTuning.IsolateSNPs
                       where  allele in ('A','C','G','T')
                       group by snp_source_id
                       ) t
                       where s.snp_source_id = t.snp_source_id
                       order by s.ct desc  
            ]]>
           </sql>
        </sqlQuery>

      <sqlQuery name="AllResults" isCacheable="false" includeProjects="EuPathDB">
            <paramRef ref="recordParams.snps_answer"/>
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="wdk_weight"/>
            <sql>
                <![CDATA[
                    SELECT  c.source_id, c.project_id, c.wdk_weight 
                    FROM $$snps_answer$$ c
                ]]>
            </sql>
        </sqlQuery>
      <sqlQuery name="ApiProjectSnps" isCacheable="false" includeProjects="EuPathDB">
            <paramRef ref="recordParams.Project"/>
            <paramRef ref="recordParams.snps_answer"/>
            <column name="source_id"/>
            <column name="project_id"/>
            <column name="wdk_weight"/>
            <sql>
                <![CDATA[
                    SELECT c.source_id, c.project_id, c.wdk_weight 
                    FROM $$snps_answer$$ c, ApidbTuning.SnpAttributes sa
                    where sa.source_id = c.source_id
                    and sa.project_id = $$Project$$
                ]]>
            </sql>
     </sqlQuery>

        <!-- this is not a filter query, it is the query used for basket function -->
        <sqlQuery name="AllSnpRecords" isCacheable="false" doNotTest="true">
            <column name="source_id"/>
            <column name="project_id"/>
            <sql>
                <![CDATA[ 
                SELECT sa.source_id, sa.project_id
                FROM ApidbTuning.SnpAttributes sa
                ]]>
            </sql>
        </sqlQuery>
    </querySet>
</wdkModel>
