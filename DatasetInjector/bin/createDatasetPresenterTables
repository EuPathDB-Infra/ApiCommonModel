#!/usr/bin/perl

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";

use DBI;
use ApiCommonData::Load::TuningConfig::Utils;

usage() unless scalar(@ARGV) == 4;

my ($instance, $suffix, $propfile, $mode) = shift @ARGV;

usage() unless ($mode eq '-create' || $mode eq '-drop' || $mode eq '-dropConstraints');

my ($schema, $password);

($instance, $schema, $password) = ApiCommonData::Load::TuningConfig::Utils::getDbLoginInfo($instance, $propfile, "", "");

my $dbh = ApiCommonData::Load::TuningConfig::Utils::getDbHandle($instance, $schema, $password);

$|=1;

if ($mode eq "dropConstraints") {
  dropConstraints($dbh, $schema, $suffix);  # (also drops sequences)
} else {
if ($mode eq "drop") {
  dropConstraints($dbh, $schema, $suffix);
  dropTables($dbh, $schema, $suffix);
} else {
  createTables($dbh, $schema, $suffix);
}

sub createTables {
    my ($dbh, $schema, $suffix) = @_;

    $dbh->do(<<SQL) or die "creating DatasetPresenter table";
      create table $schema.DatasetPresenter$suffix (
        dataset_presenter_id         number(12),
        name                         varchar2(200),
        dataset_name_regex           varchar2(200),
        display_name                 varchar2(200),
        short_display_name           varchar2(200),
        summary                      varchar2(2000),
        protocol                     varchar2(4000),
        description                  varchar2(4000),
        caveat                       varchar2(4000),
        acknowledgement              varchar2(4000),
        release_policy               varchar2(4000),
        display_category             varchar2(60),
        type                         varchar2(100),
        subtype                      varchar2(100),
        is_species_scope             number(1),
        constraint DatasetPresenter${suffix}_pk primary key (dataset_presenter_id)
      )
SQL

    $dbh->do(<<SQL) or die "creating primary-key sequence for DatasetPresenter table";
      create sequence $schema.DatasetPresenter${suffix}_sq
SQL

    ###############################################

    $dbh->do(<<SQL) or die "creating DatasetContact table";
      create table $schema.DatasetContact$suffix (
        dataset_contact_id           number(12),
        dataset_presenter_id         number(12),
        is_primary_contact           varchar2(20),
        name                         varchar2(255),
        email                        varchar2(255),
        affiliation                  varchar2(255),
        city                         varchar2(255),
        state                        varchar2(255),
        country                      varchar2(255),
        address                      varchar2(255),
        zip                          varchar2(25),
        constraint DatasetContact${suffix}_pk primary key (dataset_contact_id),
        constraint DatasetContact${suffix}_fk FOREIGN KEY (dataset_presenter_id) REFERENCES $schema.DatasetPresenter$suffix (dataset_presenter_id)
      )
SQL

    $dbh->do(<<SQL) or die "creating primary-key sequence for DatasetContact table";
      create sequence $schema.DatasetContact${suffix}_sq
SQL


   #######################################################

    $dbh->do(<<SQL) or die "creating DatasetHyperLink table";
      create table $schema.DatasetHyperLinkL$suffix (
        dataset_link_id                  number(12),
        dataset_presenter_id             number(12),
        text                             varchar2(4000),
        url                              varchar2(2000),
        constraint DatasetHyperLink${suffix}_pk primary key (dataset_link_id),
        constraint DatasetHyperLinkink${suffix}_fk FOREIGN KEY (dataset_presenter_id) REFERENCES $schema.DatasetPresenter$suffix (dataset_presenter_id)
      )
SQL

    $dbh->do(<<SQL) or die "creating primary-key sequence for DatasetHyperLink table";
      create sequence $schema.DatasetHyperLink${suffix}_sq
SQL



   #######################################################

    $dbh->do(<<SQL) or die "creating DatasetPublication table";
      create table $schema.DatasetPublication$suffix (
        dataset_publication_id       number(12),
        dataset_presenter_id         number(12),
        pmid                         varchar2(60),
        citation                     varchar2(4000),
        constraint DatasetPub${suffix}_pk primary key (dataset_publication_id),
        constraint DatasetPub${suffix}_fk FOREIGN KEY (dataset_presenter_id) REFERENCES $schema.DatasetPresenter$suffix (dataset_presenter_id)
SQL
      )
SQL

    $dbh->do(<<SQL) or die "creating primary-key sequence for DatasetPublication table";
      create sequence $schema.DatasetPub${suffix}_sq
SQL


   #######################################################

    $dbh->do(<<SQL) or die "creating DatasetTaxon table";
      create table $schema.DatasetTaxon$suffix (
        dataset_taxon_id          number(12),
        dataset_presenter_id      number(12),
        taxon_id                  number(12),
        constraint DatasetTax${suffix}_pk primary key (dataset_taxon_id),
        constraint DatasetTax${suffix}_fk FOREIGN KEY (dataset_presenter_id) REFERENCES $schema.DatasetPresenter$suffix (dataset_presenter_id)
      )
SQL

    $dbh->do(<<SQL) or die "creating primary-key sequence for DatasetTaxon table";
      create sequence $schema.DatasetTax${suffix}_sq
SQL



   #######################################################

    $dbh->do(<<SQL) or die "creating DatasetModelReference table";
      create table $schema.DatasetModelReference$suffix (
        dataset_model_ref_id         number(12),
        dataset_presenter_id         number(12),
        record_type                  varchar2(50),
        target_type                  varchar2(20),
        target_name                  varchar2(100),
        constraint DatasetModelRef${suffix}_pk primary key (dataset_reference_id),
        constraint DatasetModelRef${suffix}_fk FOREIGN KEY (dataset_presenter_id) REFERENCES $schema.DatasetPresenter$suffix (dataset_presenter_id)
      )
SQL

    $dbh->do(<<SQL) or die "creating primary-key sequence for DatasetModelReference table";
      create sequence $schema.DatasetModelRef${suffix}_sq
SQL

}

sub dropTabless {
    my ($dbh, $schema, $suffix) = @_;

    $dbh->do(<<SQL) 
      drop table $schema.DatasetPresenter${suffix}
SQL
    $dbh->do(<<SQL) 
      drop table $schema.DatasetContact${suffix}
SQL
    $dbh->do(<<SQL) 
      drop table $schema.DatasetHyperLink${suffix}
SQL
    $dbh->do(<<SQL) 
      drop table $schema.DatasetPub${suffix}
SQL
    $dbh->do(<<SQL) 
      drop table $schema.DatasetTax${suffix}
SQL
    $dbh->do(<<SQL) 
      drop table $schema.DatasetModelRef${suffix}
SQL
}

sub dropConstraints {
    my ($dbh, $schema, $suffix) = @_;

    $dbh->do(<<SQL) 
      drop sequence $schema.DatasetPresenter${suffix}_sq
SQL
    $dbh->do(<<SQL) 
      drop sequence $schema.DatasetContact${suffix}_sq
SQL
    $dbh->do(<<SQL) 
      drop sequence $schema.DatasetHyperLink${suffix}_sq
SQL
    $dbh->do(<<SQL) 
      drop sequence $schema.DatasetPub${suffix}_sq
SQL
    $dbh->do(<<SQL) 
      drop sequence $schema.DatasetTax${suffix}_sq
SQL
    $dbh->do(<<SQL) 
      drop sequence $schema.DatasetModelRef${suffix}_sq
SQL
    $dbh->do(<<SQL) 
      drop constraint $schema.DatasetContact${suffix}_fk
SQL
    $dbh->do(<<SQL) 
      drop constraint $schema.DatasetHyperLink${suffix}_fk
SQL
    $dbh->do(<<SQL) 
      drop constraint $schema.DatasetPub${suffix}_fk
SQL
    $dbh->do(<<SQL) 
      drop constraint $schema.DatasetTax${suffix}_fk
SQL
    $dbh->do(<<SQL) 
      drop constraint $schema.DatasetModelRef${suffix}_fk
SQL
}

sub usage {
  die "
Create the DatasetPresenter schema (used by the tuning manager).

Usage:  createDatasetPresenterSchema instance suffix propsXmlFile mode

Where:
  instance:       the name of the instance to create tables in

  suffix:         the name of the suffix to append on the tables, etc, created.
                  This is typically a number supplied by the tuning manager

  propsXmlFile:   an XML file compatible with tuning manager property XML format.
                  Required properties are:  password and schema.  (See tuningManager usage.)

  mode:           -create|-drop|-dropConstraints.  The last of these drops constraints and sequences.
                  We do this after the tables are populated because they are no longer needed and
                  this simplifies the tuning manager.
";
}
